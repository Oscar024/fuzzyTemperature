

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Nov 03 15:08:44 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK6,global,class=BANK6,space=1,delta=1
    12                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    13                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataBANK1
    71  0036AC                     __pidataBANK1:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _countup
    75  0036AC  0001               	dw	1
    76                           
    77                           	psect	smallconst
    78  000800                     __psmallconst:
    79                           	opt stack 0
    80  000800  00                 	db	0
    81  000801                     _dpowers:
    82                           	opt stack 0
    83  000801  0001               	dw	1
    84  000803  0000               	dw	0
    85  000805  000A               	dw	10
    86  000807  0000               	dw	0
    87  000809  0064               	dw	100
    88  00080B  0000               	dw	0
    89  00080D  03E8               	dw	1000
    90  00080F  0000               	dw	0
    91  000811  2710               	dw	10000
    92  000813  0000               	dw	0
    93  000815  86A0               	dw	34464
    94  000817  0001               	dw	1
    95  000819  4240               	dw	16960
    96  00081B  000F               	dw	15
    97  00081D  9680               	dw	38528
    98  00081F  0098               	dw	152
    99  000821  E100               	dw	57600
   100  000823  05F5               	dw	1525
   101  000825  CA00               	dw	51712
   102  000827  3B9A               	dw	15258
   103  000829                     __end_of_dpowers:
   104                           	opt stack 0
   105  000829                     __npowers_:
   106                           	opt stack 0
   107  000829  00                 	db	0
   108  00082A  80                 	db	128
   109  00082B  3F                 	db	63
   110  00082C  CD                 	db	205
   111  00082D  CC                 	db	204
   112  00082E  3D                 	db	61
   113  00082F  D7                 	db	215
   114  000830  23                 	db	35
   115  000831  3C                 	db	60
   116  000832  12                 	db	18
   117  000833  83                 	db	131
   118  000834  3A                 	db	58
   119  000835  B7                 	db	183
   120  000836  D1                 	db	209
   121  000837  38                 	db	56
   122  000838  C6                 	db	198
   123  000839  27                 	db	39
   124  00083A  37                 	db	55
   125  00083B  38                 	db	56
   126  00083C  86                 	db	134
   127  00083D  35                 	db	53
   128  00083E  C0                 	db	192
   129  00083F  D6                 	db	214
   130  000840  33                 	db	51
   131  000841  CC                 	db	204
   132  000842  2B                 	db	43
   133  000843  32                 	db	50
   134  000844  70                 	db	112
   135  000845  89                 	db	137
   136  000846  30                 	db	48
   137  000847  E7                 	db	231
   138  000848  DB                 	db	219
   139  000849  2E                 	db	46
   140  00084A  E5                 	db	229
   141  00084B  3C                 	db	60
   142  00084C  1E                 	db	30
   143  00084D  42                 	db	66
   144  00084E  A2                 	db	162
   145  00084F  0D                 	db	13
   146  000850                     __end_of__npowers_:
   147                           	opt stack 0
   148  000850                     __powers_:
   149                           	opt stack 0
   150  000850  00                 	db	0
   151  000851  80                 	db	128
   152  000852  3F                 	db	63
   153  000853  00                 	db	0
   154  000854  20                 	db	32
   155  000855  41                 	db	65
   156  000856  00                 	db	0
   157  000857  C8                 	db	200
   158  000858  42                 	db	66
   159  000859  00                 	db	0
   160  00085A  7A                 	db	122
   161  00085B  44                 	db	68
   162  00085C  40                 	db	64
   163  00085D  1C                 	db	28
   164  00085E  46                 	db	70
   165  00085F  50                 	db	80
   166  000860  C3                 	db	195
   167  000861  47                 	db	71
   168  000862  24                 	db	36
   169  000863  74                 	db	116
   170  000864  49                 	db	73
   171  000865  97                 	db	151
   172  000866  18                 	db	24
   173  000867  4B                 	db	75
   174  000868  BC                 	db	188
   175  000869  BE                 	db	190
   176  00086A  4C                 	db	76
   177  00086B  6B                 	db	107
   178  00086C  6E                 	db	110
   179  00086D  4E                 	db	78
   180  00086E  03                 	db	3
   181  00086F  15                 	db	21
   182  000870  50                 	db	80
   183  000871  79                 	db	121
   184  000872  AD                 	db	173
   185  000873  60                 	db	96
   186  000874  F3                 	db	243
   187  000875  49                 	db	73
   188  000876  71                 	db	113
   189  000877                     __end_of__powers_:
   190                           	opt stack 0
   191  0000                     _ADCON0bits	set	4034
   192  0000                     _ADCON1bits	set	4033
   193  0000                     _ADCON2bits	set	4032
   194  0000                     _ADRESH	set	4036
   195  0000                     _ADRESL	set	4035
   196  0000                     _CCP1CON	set	4029
   197  0000                     _CCPR1L	set	4030
   198  0000                     _PIE1bits	set	3997
   199  0000                     _PIR1bits	set	3998
   200  0000                     _PORTA	set	3968
   201  0000                     _PORTB	set	3969
   202  0000                     _PORTC	set	3970
   203  0000                     _PORTD	set	3971
   204  0000                     _PORTDbits	set	3971
   205  0000                     _PORTE	set	3972
   206  0000                     _PORTEbits	set	3972
   207  0000                     _PR2	set	4043
   208  0000                     _T2CON	set	4042
   209  0000                     _T2CONbits	set	4042
   210  0000                     _TMR2	set	4044
   211  0000                     _TRISA	set	3986
   212  0000                     _TRISAbits	set	3986
   213  0000                     _TRISB	set	3987
   214  0000                     _TRISC	set	3988
   215  0000                     _TRISCbits	set	3988
   216  0000                     _TRISD	set	3989
   217  0000                     _TRISE	set	3990
   218  000877                     STR_5:
   219  000877  74                 	db	116	;'t'
   220  000878  65                 	db	101	;'e'
   221  000879  6D                 	db	109	;'m'
   222  00087A  70                 	db	112	;'p'
   223  00087B  3A                 	db	58	;':'
   224  00087C  20                 	db	32
   225  00087D  00                 	db	0
   226  00087E                     STR_4:
   227  00087E  25                 	db	37
   228  00087F  50                 	db	80	;'P'
   229  000880  57                 	db	87	;'W'
   230  000881  4D                 	db	77	;'M'
   231  000882  3A                 	db	58	;':'
   232  000883  20                 	db	32
   233  000884  00                 	db	0
   234  000885                     STR_3:
   235  000885  49                 	db	73	;'I'
   236  000886  6E                 	db	110	;'n'
   237  000887  69                 	db	105	;'i'
   238  000888  63                 	db	99	;'c'
   239  000889  69                 	db	105	;'i'
   240  00088A  6F                 	db	111	;'o'
   241  00088B  00                 	db	0
   242  00088C  25                 	db	37
   243  00088D  2E                 	db	46
   244  00088E  32                 	db	50	;'2'
   245  00088F  64                 	db	100	;'d'
   246  000890  00                 	db	0
   247  000891                     STR_1:
   248  000891  25                 	db	37
   249  000892  2E                 	db	46
   250  000893  32                 	db	50	;'2'
   251  000894  66                 	db	102	;'f'
   252  000895  00                 	db	0
   253  000896                     STR_6:
   254  000896  20                 	db	32
   255  000897  43                 	db	67	;'C'
   256  000898  00                 	db	0
   257                           
   258                           ; #config settings
   259  000899  00                 	db	0	; dummy byte at the end
   260  0000                     
   261                           	psect	cinit
   262  0034CE                     __pcinit:
   263                           	opt stack 0
   264  0034CE                     start_initialization:
   265                           	opt stack 0
   266  0034CE                     __initialization:
   267                           	opt stack 0
   268                           
   269                           ; Initialize objects allocated to BANK1 (2 bytes)
   270                           ; load TBLPTR registers with __pidataBANK1
   271  0034CE  0EAC               	movlw	low __pidataBANK1
   272  0034D0  6EF6               	movwf	tblptrl,c
   273  0034D2  0E36               	movlw	high __pidataBANK1
   274  0034D4  6EF7               	movwf	tblptrh,c
   275  0034D6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   276  0034D8  6EF8               	movwf	tblptru,c
   277  0034DA  0009               	tblrd		*+	;fetch initializer
   278  0034DC  CFF5 F1F2          	movff	tablat,__pdataBANK1
   279  0034E0  0009               	tblrd		*+	;fetch initializer
   280  0034E2  CFF5 F1F3          	movff	tablat,__pdataBANK1+1
   281                           
   282                           ; Clear objects allocated to BANK1 (2 bytes)
   283  0034E6  0101               	movlb	1
   284  0034E8  6BF1               	clrf	(__pbssBANK1+1)& (0+255),b
   285  0034EA  6BF0               	clrf	__pbssBANK1& (0+255),b
   286                           
   287                           ; Clear objects allocated to BANK0 (3 bytes)
   288  0034EC  0100               	movlb	0
   289  0034EE  6BFE               	clrf	(__pbssBANK0+2)& (0+255),b
   290  0034F0  6BFD               	clrf	(__pbssBANK0+1)& (0+255),b
   291  0034F2  6BFC               	clrf	__pbssBANK0& (0+255),b
   292  0034F4                     end_of_initialization:
   293                           	opt stack 0
   294  0034F4                     __end_of__initialization:
   295                           	opt stack 0
   296  0034F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   297  0034F6  6EF8               	movwf	tblptru,c
   298  0034F8  0100               	movlb	0
   299  0034FA  EF61  F017         	goto	_main	;jump to C main() function
   300                           tblptru	equ	0xFF8
   301                           tblptrh	equ	0xFF7
   302                           tblptrl	equ	0xFF6
   303                           tablat	equ	0xFF5
   304                           
   305                           	psect	bssBANK0
   306  0000FC                     __pbssBANK0:
   307                           	opt stack 0
   308  0000FC                     _i:
   309                           	opt stack 0
   310  0000FC                     	ds	2
   311  0000FE                     _Timer2Config:
   312                           	opt stack 0
   313  0000FE                     	ds	1
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           tblptrl	equ	0xFF6
   317                           tablat	equ	0xFF5
   318                           
   319                           	psect	bssBANK1
   320  0001F0                     __pbssBANK1:
   321                           	opt stack 0
   322  0001F0                     _DutyCycle:
   323                           	opt stack 0
   324  0001F0                     	ds	2
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           
   330                           	psect	dataBANK1
   331  0001F2                     __pdataBANK1:
   332                           	opt stack 0
   333  0001F2                     _countup:
   334                           	opt stack 0
   335  0001F2                     	ds	2
   336                           tblptru	equ	0xFF8
   337                           tblptrh	equ	0xFF7
   338                           tblptrl	equ	0xFF6
   339                           tablat	equ	0xFF5
   340                           
   341                           	psect	cstackBANK6
   342  000600                     __pcstackBANK6:
   343                           	opt stack 0
   344  000600                     fuzzy_system_single@x:
   345                           	opt stack 0
   346                           
   347                           ; 120 bytes @ 0x0
   348  000600                     	ds	120
   349  000678                     fuzzy_system_single@y:
   350                           	opt stack 0
   351                           
   352                           ; 120 bytes @ 0x78
   353  000678                     	ds	120
   354                           tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           
   359                           	psect	cstackBANK5
   360  000500                     __pcstackBANK5:
   361                           	opt stack 0
   362  000500                     fuzzy_system_single@qualified_cons_mf3:
   363                           	opt stack 0
   364                           
   365                           ; 120 bytes @ 0x0
   366  000500                     	ds	120
   367  000578                     fuzzy_system_single@overall_out_mf:
   368                           	opt stack 0
   369                           
   370                           ; 120 bytes @ 0x78
   371  000578                     	ds	120
   372                           tblptru	equ	0xFF8
   373                           tblptrh	equ	0xFF7
   374                           tblptrl	equ	0xFF6
   375                           tablat	equ	0xFF5
   376                           
   377                           	psect	cstackBANK4
   378  000400                     __pcstackBANK4:
   379                           	opt stack 0
   380  000400                     fuzzy_system_single@qualified_cons_mf1:
   381                           	opt stack 0
   382                           
   383                           ; 120 bytes @ 0x0
   384  000400                     	ds	120
   385  000478                     fuzzy_system_single@qualified_cons_mf2:
   386                           	opt stack 0
   387                           
   388                           ; 120 bytes @ 0x78
   389  000478                     	ds	120
   390                           tblptru	equ	0xFF8
   391                           tblptrh	equ	0xFF7
   392                           tblptrl	equ	0xFF6
   393                           tablat	equ	0xFF5
   394                           
   395                           	psect	cstackBANK3
   396  000300                     __pcstackBANK3:
   397                           	opt stack 0
   398  000300                     fuzzy_system_single@cons_mf2:
   399                           	opt stack 0
   400                           
   401                           ; 120 bytes @ 0x0
   402  000300                     	ds	120
   403  000378                     fuzzy_system_single@cons_mf3:
   404                           	opt stack 0
   405                           
   406                           ; 120 bytes @ 0x78
   407  000378                     	ds	120
   408                           tblptru	equ	0xFF8
   409                           tblptrh	equ	0xFF7
   410                           tblptrl	equ	0xFF6
   411                           tablat	equ	0xFF5
   412                           
   413                           	psect	cstackBANK2
   414  000200                     __pcstackBANK2:
   415                           	opt stack 0
   416  000200                     fuzzy_system_single@ante_mf3:
   417                           	opt stack 0
   418                           
   419                           ; 120 bytes @ 0x0
   420  000200                     	ds	120
   421  000278                     fuzzy_system_single@cons_mf1:
   422                           	opt stack 0
   423                           
   424                           ; 120 bytes @ 0x78
   425  000278                     	ds	120
   426                           tblptru	equ	0xFF8
   427                           tblptrh	equ	0xFF7
   428                           tblptrl	equ	0xFF6
   429                           tablat	equ	0xFF5
   430                           
   431                           	psect	cstackBANK1
   432  000100                     __pcstackBANK1:
   433                           	opt stack 0
   434  000100                     fuzzy_system_single@ante_mf1:
   435                           	opt stack 0
   436                           
   437                           ; 120 bytes @ 0x0
   438  000100                     	ds	120
   439  000178                     fuzzy_system_single@ante_mf2:
   440                           	opt stack 0
   441                           
   442                           ; 120 bytes @ 0x78
   443  000178                     	ds	120
   444                           tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           tblptrl	equ	0xFF6
   447                           tablat	equ	0xFF5
   448                           
   449                           	psect	cstackBANK0
   450  000060                     __pcstackBANK0:
   451                           	opt stack 0
   452  000060                     trap_mf@t_value:
   453                           	opt stack 0
   454  000060                     _sprintf$1526:
   455                           	opt stack 0
   456                           
   457                           ; 3 bytes @ 0x0
   458  000060                     	ds	2
   459  000062                     trap_mf@x:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x2
   463  000062                     	ds	1
   464  000063                     sprintf@ap:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x3
   468  000063                     	ds	1
   469  000064                     trap_mf@a:
   470                           	opt stack 0
   471                           
   472                           ; 3 bytes @ 0x4
   473  000064                     	ds	1
   474  000065                     sprintf@flag:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x5
   478  000065                     	ds	2
   479  000067                     sprintf@exp:
   480                           	opt stack 0
   481  000067                     trap_mf@b:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x7
   485  000067                     	ds	2
   486  000069                     sprintf@tmpval:
   487                           	opt stack 0
   488                           
   489                           ; 4 bytes @ 0x9
   490  000069                     	ds	1
   491  00006A                     trap_mf@c:
   492                           	opt stack 0
   493                           
   494                           ; 3 bytes @ 0xA
   495  00006A                     	ds	3
   496  00006D                     trap_mf@d:
   497                           	opt stack 0
   498  00006D                     sprintf@val:
   499                           	opt stack 0
   500                           
   501                           ; 4 bytes @ 0xD
   502  00006D                     	ds	3
   503  000070                     trap_mf@temp:
   504                           	opt stack 0
   505                           
   506                           ; 120 bytes @ 0x10
   507  000070                     	ds	1
   508  000071                     sprintf@prec:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x11
   512  000071                     	ds	2
   513  000073                     sprintf@fval:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x13
   517  000073                     	ds	3
   518  000076                     sprintf@c:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x16
   522  000076                     	ds	1
   523  000077                     Lcd_Write_Float@s:
   524                           	opt stack 0
   525                           
   526                           ; 20 bytes @ 0x17
   527  000077                     	ds	113
   528  0000E8                     trap_mf@i:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x88
   532  0000E8                     	ds	2
   533  0000EA                     fuzzy_system_single@w1:
   534                           	opt stack 0
   535                           
   536                           ; 3 bytes @ 0x8A
   537  0000EA                     	ds	3
   538  0000ED                     fuzzy_system_single@w2:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x8D
   542  0000ED                     	ds	3
   543  0000F0                     fuzzy_system_single@w3:
   544                           	opt stack 0
   545                           
   546                           ; 3 bytes @ 0x90
   547  0000F0                     	ds	3
   548  0000F3                     fuzzy_system_single@output:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x93
   552  0000F3                     	ds	3
   553  0000F6                     main@temperatura:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x96
   557  0000F6                     	ds	3
   558  0000F9                     main@duty:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x99
   562  0000F9                     	ds	3
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           
   568                           	psect	cstackCOMRAM
   569  000001                     __pcstackCOMRAM:
   570                           	opt stack 0
   571  000001                     ??_isdigit:
   572  000001                     ?_Leer_ADC:
   573                           	opt stack 0
   574  000001                     ?___awmod:
   575                           	opt stack 0
   576  000001                     ?___ftpack:
   577                           	opt stack 0
   578  000001                     ?___ftneg:
   579                           	opt stack 0
   580  000001                     ?__tdiv_to_l_:
   581                           	opt stack 0
   582  000001                     ?__div_to_l_:
   583                           	opt stack 0
   584  000001                     ?___lldiv:
   585                           	opt stack 0
   586  000001                     Lcd_Port@a:
   587                           	opt stack 0
   588  000001                     ADC_select_channel@channel:
   589                           	opt stack 0
   590  000001                     OpenPWM1@period:
   591                           	opt stack 0
   592  000001                     OpenTimer2@config:
   593                           	opt stack 0
   594  000001                     SetDCPWM1@dutycycle:
   595                           	opt stack 0
   596  000001                     ___awmod@dividend:
   597                           	opt stack 0
   598  000001                     __div_to_l_@f1:
   599                           	opt stack 0
   600  000001                     ___ftpack@arg:
   601                           	opt stack 0
   602  000001                     __tdiv_to_l_@f1:
   603                           	opt stack 0
   604  000001                     ___ftneg@f1:
   605                           	opt stack 0
   606  000001                     ___lldiv@dividend:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x0
   610  000001                     	ds	1
   611  000002                     ??_Lcd_Cmd:
   612  000002                     Lcd_Write_Char@temp:
   613                           	opt stack 0
   614  000002                     PWM_init@period:
   615                           	opt stack 0
   616  000002                     _isdigit$1148:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x1
   620  000002                     	ds	1
   621  000003                     ??_SetDCPWM1:
   622  000003                     Lcd_Cmd@a:
   623                           	opt stack 0
   624  000003                     Lcd_Write_Char@y:
   625                           	opt stack 0
   626  000003                     isdigit@c:
   627                           	opt stack 0
   628  000003                     Leer_ADC@dato_adc:
   629                           	opt stack 0
   630  000003                     ___awmod@divisor:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x2
   634  000003                     	ds	1
   635  000004                     ??_Lcd_Init:
   636  000004                     Lcd_Set_Cursor@b:
   637                           	opt stack 0
   638  000004                     Lcd_Write_Char@a:
   639                           	opt stack 0
   640  000004                     ___ftpack@exp:
   641                           	opt stack 0
   642  000004                     __div_to_l_@f2:
   643                           	opt stack 0
   644  000004                     __tdiv_to_l_@f2:
   645                           	opt stack 0
   646                           
   647                           ; 3 bytes @ 0x3
   648  000004                     	ds	1
   649  000005                     Lcd_Set_Cursor@a:
   650                           	opt stack 0
   651  000005                     ___awmod@counter:
   652                           	opt stack 0
   653  000005                     ___ftpack@sign:
   654                           	opt stack 0
   655  000005                     Lcd_Write_String@a:
   656                           	opt stack 0
   657  000005                     SetDCPWM1@DCycle:
   658                           	opt stack 0
   659  000005                     ___lldiv@divisor:
   660                           	opt stack 0
   661                           
   662                           ; 4 bytes @ 0x4
   663  000005                     	ds	1
   664  000006                     ??___ftpack:
   665  000006                     Lcd_Set_Cursor@z:
   666                           	opt stack 0
   667  000006                     ___awmod@sign:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x5
   671  000006                     	ds	1
   672  000007                     ??__tdiv_to_l_:
   673  000007                     ??_Lcd_Write_String:
   674  000007                     ?___awdiv:
   675                           	opt stack 0
   676  000007                     Lcd_Set_Cursor@y:
   677                           	opt stack 0
   678  000007                     ___awdiv@dividend:
   679                           	opt stack 0
   680  000007                     __div_to_l_@quot:
   681                           	opt stack 0
   682                           
   683                           ; 4 bytes @ 0x6
   684  000007                     	ds	1
   685  000008                     Lcd_Set_Cursor@temp:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x7
   689  000008                     	ds	1
   690  000009                     ?___awtoft:
   691                           	opt stack 0
   692  000009                     ?___lbtoft:
   693                           	opt stack 0
   694  000009                     ?___lltoft:
   695                           	opt stack 0
   696  000009                     Lcd_Write_String@i:
   697                           	opt stack 0
   698  000009                     ___awdiv@divisor:
   699                           	opt stack 0
   700  000009                     ___awtoft@c:
   701                           	opt stack 0
   702  000009                     ___lldiv@quotient:
   703                           	opt stack 0
   704  000009                     ___lltoft@c:
   705                           	opt stack 0
   706                           
   707                           ; 4 bytes @ 0x8
   708  000009                     	ds	1
   709  00000A                     __tdiv_to_l_@quot:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x9
   713  00000A                     	ds	1
   714  00000B                     ___awdiv@counter:
   715                           	opt stack 0
   716  00000B                     __div_to_l_@cntr:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0xA
   720  00000B                     	ds	1
   721  00000C                     ___awdiv@sign:
   722                           	opt stack 0
   723  00000C                     ___awtoft@sign:
   724                           	opt stack 0
   725  00000C                     __div_to_l_@exp1:
   726                           	opt stack 0
   727  00000C                     ___lbtoft@c:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0xB
   731  00000C                     	ds	1
   732  00000D                     ??___lltoft:
   733  00000D                     ___lldiv@counter:
   734                           	opt stack 0
   735  00000D                     ___awdiv@quotient:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0xC
   739  00000D                     	ds	1
   740  00000E                     ?___llmod:
   741                           	opt stack 0
   742  00000E                     __tdiv_to_l_@cntr:
   743                           	opt stack 0
   744  00000E                     ___llmod@dividend:
   745                           	opt stack 0
   746                           
   747                           ; 4 bytes @ 0xD
   748  00000E                     	ds	1
   749  00000F                     ?___wmul:
   750                           	opt stack 0
   751  00000F                     __tdiv_to_l_@exp1:
   752                           	opt stack 0
   753  00000F                     ___wmul@multiplier:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0xE
   757  00000F                     	ds	2
   758  000011                     ___lltoft@exp:
   759                           	opt stack 0
   760  000011                     ___wmul@multiplicand:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x10
   764  000011                     	ds	1
   765  000012                     ___llmod@divisor:
   766                           	opt stack 0
   767                           
   768                           ; 4 bytes @ 0x11
   769  000012                     	ds	1
   770  000013                     ___wmul@product:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x12
   774  000013                     	ds	2
   775  000015                     ?___ftmul:
   776                           	opt stack 0
   777  000015                     ___ftge@ff1:
   778                           	opt stack 0
   779  000015                     ___ftmul@f1:
   780                           	opt stack 0
   781                           
   782                           ; 3 bytes @ 0x14
   783  000015                     	ds	1
   784  000016                     ___llmod@counter:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x15
   788  000016                     	ds	2
   789  000018                     ___ftge@ff2:
   790                           	opt stack 0
   791  000018                     ___ftmul@f2:
   792                           	opt stack 0
   793                           
   794                           ; 3 bytes @ 0x17
   795  000018                     	ds	3
   796  00001B                     ??___ftmul:
   797  00001B                     ??___ftge:
   798                           
   799                           ; 1 bytes @ 0x1A
   800  00001B                     	ds	3
   801  00001E                     ___ftmul@exp:
   802                           	opt stack 0
   803  00001E                     qualified@y:
   804                           	opt stack 0
   805  00001E                     out_mf@result:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x1D
   809  00001E                     	ds	1
   810  00001F                     ___ftmul@f3_as_product:
   811                           	opt stack 0
   812                           
   813                           ; 3 bytes @ 0x1E
   814  00001F                     	ds	1
   815  000020                     qualified@x:
   816                           	opt stack 0
   817  000020                     out_mf@x:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x1F
   821  000020                     	ds	2
   822  000022                     ___ftmul@cntr:
   823                           	opt stack 0
   824  000022                     out_mf@y:
   825                           	opt stack 0
   826  000022                     qualified@w:
   827                           	opt stack 0
   828                           
   829                           ; 3 bytes @ 0x21
   830  000022                     	ds	1
   831  000023                     ___ftmul@sign:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x22
   835  000023                     	ds	1
   836  000024                     ?_fround:
   837                           	opt stack 0
   838  000024                     ?_scale:
   839                           	opt stack 0
   840  000024                     out_mf@z:
   841                           	opt stack 0
   842                           
   843                           ; 2 bytes @ 0x23
   844  000024                     	ds	1
   845  000025                     qualified@min:
   846                           	opt stack 0
   847                           
   848                           ; 3 bytes @ 0x24
   849  000025                     	ds	1
   850  000026                     out_mf@i:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x25
   854  000026                     	ds	1
   855  000027                     _fround$1524:
   856                           	opt stack 0
   857  000027                     _scale$1525:
   858                           	opt stack 0
   859                           
   860                           ; 3 bytes @ 0x26
   861  000027                     	ds	1
   862  000028                     qualified@i:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x27
   866  000028                     	ds	2
   867  00002A                     scale@scl:
   868                           	opt stack 0
   869  00002A                     _fround$1523:
   870                           	opt stack 0
   871                           
   872                           ; 3 bytes @ 0x29
   873  00002A                     	ds	1
   874  00002B                     ?___fttol:
   875                           	opt stack 0
   876  00002B                     ___fttol@f1:
   877                           	opt stack 0
   878                           
   879                           ; 3 bytes @ 0x2A
   880  00002B                     	ds	2
   881  00002D                     fround@prec:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x2C
   885  00002D                     	ds	1
   886  00002E                     ?___ftadd:
   887                           	opt stack 0
   888  00002E                     ___ftadd@f1:
   889                           	opt stack 0
   890                           
   891                           ; 3 bytes @ 0x2D
   892  00002E                     	ds	1
   893  00002F                     ??___fttol:
   894                           
   895                           ; 1 bytes @ 0x2E
   896  00002F                     	ds	2
   897  000031                     ___ftadd@f2:
   898                           	opt stack 0
   899                           
   900                           ; 3 bytes @ 0x30
   901  000031                     	ds	3
   902  000034                     ??___ftadd:
   903  000034                     ___fttol@sign1:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x33
   907  000034                     	ds	1
   908  000035                     ___fttol@lval:
   909                           	opt stack 0
   910                           
   911                           ; 4 bytes @ 0x34
   912  000035                     	ds	2
   913  000037                     ___ftadd@sign:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x36
   917  000037                     	ds	1
   918  000038                     ___ftadd@exp2:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x37
   922  000038                     	ds	1
   923  000039                     ___ftadd@exp1:
   924                           	opt stack 0
   925  000039                     ___fttol@exp1:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x38
   929  000039                     	ds	1
   930  00003A                     ?___ftdiv:
   931                           	opt stack 0
   932  00003A                     ?___ftsub:
   933                           	opt stack 0
   934  00003A                     PWM_DutyCycle@DutyCycle:
   935                           	opt stack 0
   936  00003A                     ___ftdiv@f1:
   937                           	opt stack 0
   938  00003A                     ___ftsub@f1:
   939                           	opt stack 0
   940                           
   941                           ; 3 bytes @ 0x39
   942  00003A                     	ds	2
   943  00003C                     PWM_DutyCycle@percentageDuty:
   944                           	opt stack 0
   945                           
   946                           ; 1 bytes @ 0x3B
   947  00003C                     	ds	1
   948  00003D                     PWM_DutyCycle@DC:
   949                           	opt stack 0
   950  00003D                     ___ftdiv@f2:
   951                           	opt stack 0
   952  00003D                     ___ftsub@f2:
   953                           	opt stack 0
   954                           
   955                           ; 3 bytes @ 0x3C
   956  00003D                     	ds	3
   957  000040                     ??___ftdiv:
   958  000040                     ?_sprintf:
   959                           	opt stack 0
   960  000040                     sprintf@sp:
   961                           	opt stack 0
   962                           
   963                           ; 2 bytes @ 0x3F
   964  000040                     	ds	2
   965  000042                     sprintf@f:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x41
   969  000042                     	ds	1
   970  000043                     ___ftdiv@cntr:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x42
   974  000043                     	ds	1
   975  000044                     ___ftdiv@f3:
   976                           	opt stack 0
   977                           
   978                           ; 3 bytes @ 0x43
   979  000044                     	ds	3
   980  000047                     ??_sprintf:
   981  000047                     ___ftdiv@exp:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x46
   985  000047                     	ds	1
   986  000048                     ___ftdiv@sign:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0x47
   990  000048                     	ds	1
   991  000049                     ?_trapezoidal:
   992                           	opt stack 0
   993  000049                     ?_defuzzy:
   994                           	opt stack 0
   995  000049                     linspace@x:
   996                           	opt stack 0
   997  000049                     defuzzy@x:
   998                           	opt stack 0
   999  000049                     trapezoidal@a:
  1000                           	opt stack 0
  1001                           
  1002                           ; 3 bytes @ 0x48
  1003  000049                     	ds	2
  1004  00004B                     defuzzy@mf:
  1005                           	opt stack 0
  1006  00004B                     linspace@start:
  1007                           	opt stack 0
  1008                           
  1009                           ; 3 bytes @ 0x4A
  1010  00004B                     	ds	1
  1011  00004C                     trapezoidal@b:
  1012                           	opt stack 0
  1013                           
  1014                           ; 3 bytes @ 0x4B
  1015  00004C                     	ds	1
  1016  00004D                     Lcd_Write_Float@f:
  1017                           	opt stack 0
  1018  00004D                     defuzzy@out:
  1019                           	opt stack 0
  1020                           
  1021                           ; 3 bytes @ 0x4C
  1022  00004D                     	ds	1
  1023  00004E                     linspace@end:
  1024                           	opt stack 0
  1025                           
  1026                           ; 3 bytes @ 0x4D
  1027  00004E                     	ds	1
  1028  00004F                     trapezoidal@c:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0x4E
  1032  00004F                     	ds	1
  1033  000050                     ?_temp_sense:
  1034                           	opt stack 0
  1035  000050                     defuzzy@sum1:
  1036                           	opt stack 0
  1037                           
  1038                           ; 3 bytes @ 0x4F
  1039  000050                     	ds	1
  1040  000051                     linspace@size:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x50
  1044  000051                     	ds	1
  1045  000052                     trapezoidal@d:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x51
  1049  000052                     	ds	1
  1050  000053                     ??_temp_sense:
  1051  000053                     ??_linspace:
  1052  000053                     defuzzy@sum2:
  1053                           	opt stack 0
  1054                           
  1055                           ; 3 bytes @ 0x52
  1056  000053                     	ds	1
  1057  000054                     temp_sense@canal:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x53
  1061  000054                     	ds	1
  1062  000055                     linspace@i:
  1063                           	opt stack 0
  1064  000055                     temp_sense@vin:
  1065                           	opt stack 0
  1066  000055                     trapezoidal@x:
  1067                           	opt stack 0
  1068                           
  1069                           ; 3 bytes @ 0x54
  1070  000055                     	ds	1
  1071  000056                     defuzzy@i:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x55
  1075  000056                     	ds	2
  1076  000058                     temp_sense@adc_result:
  1077                           	opt stack 0
  1078  000058                     trapezoidal@ux:
  1079                           	opt stack 0
  1080                           
  1081                           ; 3 bytes @ 0x57
  1082  000058                     	ds	3
  1083  00005B                     ?_fuzzy_system_single:
  1084                           	opt stack 0
  1085  00005B                     temp_sense@temperatura:
  1086                           	opt stack 0
  1087  00005B                     fuzzy_system_single@input:
  1088                           	opt stack 0
  1089                           
  1090                           ; 3 bytes @ 0x5A
  1091  00005B                     	ds	3
  1092  00005E                     temp_sense@i:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x5D
  1096  00005E                     	ds	2
  1097  000060                     tblptru	equ	0xFF8
  1098                           tblptrh	equ	0xFF7
  1099                           tblptrl	equ	0xFF6
  1100                           tablat	equ	0xFF5
  1101                           
  1102                           ; 1 bytes @ 0x5F
  1103 ;;
  1104 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1105 ;;
  1106 ;; *************** function _main *****************
  1107 ;; Defined at:
  1108 ;;		line 26 in file "main.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;		None
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  duty            3  153[BANK0 ] PTR unsigned char 
  1113 ;;  temperatura     3  150[BANK0 ] PTR unsigned char 
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  2   79[None  ] int 
  1116 ;; Registers used:
  1117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1123 ;;      Params:         0       0       0       0       0       0       0       0       0
  1124 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1125 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1126 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1127 ;;Total ram usage:        6 bytes
  1128 ;; Hardware stack levels required when called:    6
  1129 ;; This function calls:
  1130 ;;		_Init_ADC
  1131 ;;		_Lcd_Clear
  1132 ;;		_Lcd_Init
  1133 ;;		_Lcd_Set_Cursor
  1134 ;;		_Lcd_Write_Float
  1135 ;;		_Lcd_Write_String
  1136 ;;		_PWM_DutyCycle
  1137 ;;		_PWM_init
  1138 ;;		___fttol
  1139 ;;		_fuzzy_system_single
  1140 ;;		_mcu_init
  1141 ;;		_temp_sense
  1142 ;; This function is called by:
  1143 ;;		Startup code after reset
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text0
  1148  002EC2                     __ptext0:
  1149                           	opt stack 0
  1150  002EC2                     _main:
  1151                           	opt stack 25
  1152                           
  1153                           ;main.c: 29: mcu_init();Lcd_Init();Lcd_Clear();Init_ADC();Lcd_Set_Cursor(1,1);Lcd_Write_
      +                          String("Inicio");
  1154                           
  1155                           ;incstack = 0
  1156  002EC2  ECAC  F01A         	call	_mcu_init	;wreg free
  1157  002EC6  EC78  F018         	call	_Lcd_Init	;wreg free
  1158  002ECA  EC4F  F01B         	call	_Lcd_Clear	;wreg free
  1159  002ECE  ECC1  F01A         	call	_Init_ADC	;wreg free
  1160  002ED2  0E01               	movlw	1
  1161  002ED4  6E04               	movwf	Lcd_Set_Cursor@b,c
  1162  002ED6  0E01               	movlw	1
  1163  002ED8  ECB1  F019         	call	_Lcd_Set_Cursor
  1164  002EDC  0E85               	movlw	low STR_3
  1165  002EDE  6E05               	movwf	Lcd_Write_String@a,c
  1166  002EE0  0E08               	movlw	high STR_3
  1167  002EE2  6E06               	movwf	Lcd_Write_String@a+1,c
  1168  002EE4  ECB2  F018         	call	_Lcd_Write_String	;wreg free
  1169                           
  1170                           ;main.c: 30: PWM_init(0xFF);
  1171  002EE8  0EFF               	movlw	255
  1172  002EEA  EC3A  F01B         	call	_PWM_init
  1173  002EEE                     l3766:
  1174                           
  1175                           ;main.c: 35: temperatura=temp_sense(0);
  1176  002EEE  0E00               	movlw	0
  1177  002EF0  EC16  F013         	call	_temp_sense
  1178  002EF4  C050  F0F6         	movff	?_temp_sense,main@temperatura
  1179  002EF8  C051  F0F7         	movff	?_temp_sense+1,main@temperatura+1
  1180  002EFC  C052  F0F8         	movff	?_temp_sense+2,main@temperatura+2
  1181                           
  1182                           ;main.c: 37: duty=(float)duty;
  1183  002F00  C0F6  F05B         	movff	main@temperatura,fuzzy_system_single@input
  1184  002F04  C0F7  F05C         	movff	main@temperatura+1,fuzzy_system_single@input+1
  1185  002F08  C0F8  F05D         	movff	main@temperatura+2,fuzzy_system_single@input+2
  1186  002F0C  ECCC  F008         	call	_fuzzy_system_single	;wreg free
  1187  002F10  C05B  F0F9         	movff	?_fuzzy_system_single,main@duty
  1188  002F14  C05C  F0FA         	movff	?_fuzzy_system_single+1,main@duty+1
  1189  002F18  C05D  F0FB         	movff	?_fuzzy_system_single+2,main@duty+2
  1190                           
  1191                           ;main.c: 38: Lcd_Set_Cursor(2,1);
  1192  002F1C  0E01               	movlw	1
  1193  002F1E  6E04               	movwf	Lcd_Set_Cursor@b,c
  1194  002F20  0E02               	movlw	2
  1195  002F22  ECB1  F019         	call	_Lcd_Set_Cursor
  1196                           
  1197                           ;main.c: 39: Lcd_Write_String("%PWM: ");
  1198  002F26  0E7E               	movlw	low STR_4
  1199  002F28  6E05               	movwf	Lcd_Write_String@a,c
  1200  002F2A  0E08               	movlw	high STR_4
  1201  002F2C  6E06               	movwf	Lcd_Write_String@a+1,c
  1202  002F2E  ECB2  F018         	call	_Lcd_Write_String	;wreg free
  1203                           
  1204                           ;main.c: 40: Lcd_Write_Float(duty);
  1205  002F32  C0F9  F04D         	movff	main@duty,Lcd_Write_Float@f
  1206  002F36  C0FA  F04E         	movff	main@duty+1,Lcd_Write_Float@f+1
  1207  002F3A  C0FB  F04F         	movff	main@duty+2,Lcd_Write_Float@f+2
  1208  002F3E  EC7F  F01A         	call	_Lcd_Write_Float	;wreg free
  1209                           
  1210                           ;main.c: 41: PWM_DutyCycle(duty);
  1211  002F42  C0F9  F02B         	movff	main@duty,___fttol@f1
  1212  002F46  C0FA  F02C         	movff	main@duty+1,___fttol@f1+1
  1213  002F4A  C0FB  F02D         	movff	main@duty+2,___fttol@f1+2
  1214  002F4E  ECBF  F014         	call	___fttol	;wreg free
  1215  002F52  502B               	movf	?___fttol,w,c
  1216  002F54  EC84  F019         	call	_PWM_DutyCycle
  1217  002F58  D7CA               	goto	l3766
  1218  002F5A                     __end_of_main:
  1219                           	opt stack 0
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           
  1225 ;; *************** function _temp_sense *****************
  1226 ;; Defined at:
  1227 ;;		line 11 in file "lm35.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;  canal           1    wreg     unsigned char 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;  canal           1   83[COMRAM] unsigned char 
  1232 ;;  i               2   93[COMRAM] int 
  1233 ;;  temperatura     3   90[COMRAM] int 
  1234 ;;  adc_result      3   87[COMRAM] int 
  1235 ;;  vin             3   84[COMRAM] int 
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  3   79[COMRAM] int 
  1238 ;; Registers used:
  1239 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1245 ;;      Params:         3       0       0       0       0       0       0       0       0
  1246 ;;      Locals:        12       0       0       0       0       0       0       0       0
  1247 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1248 ;;      Totals:        16       0       0       0       0       0       0       0       0
  1249 ;;Total ram usage:       16 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; Hardware stack levels required when called:    5
  1252 ;; This function calls:
  1253 ;;		_ADC_select_channel
  1254 ;;		_Lcd_Set_Cursor
  1255 ;;		_Lcd_Write_Float
  1256 ;;		_Lcd_Write_String
  1257 ;;		_Leer_ADC
  1258 ;;		___awtoft
  1259 ;;		___ftdiv
  1260 ;;		___ftmul
  1261 ;; This function is called by:
  1262 ;;		_main
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           	psect	text1
  1267  00262C                     __ptext1:
  1268                           	opt stack 0
  1269  00262C                     _temp_sense:
  1270                           	opt stack 25
  1271                           
  1272                           ;incstack = 0
  1273                           ;temp_sense@canal stored from wreg
  1274  00262C  6E54               	movwf	temp_sense@canal,c
  1275                           
  1276                           ;lm35.c: 13: double vin=0,adc_result=0,temperatura=0;
  1277  00262E  0E00               	movlw	0
  1278  002630  6E55               	movwf	temp_sense@vin,c
  1279  002632  0E00               	movlw	0
  1280  002634  6E56               	movwf	temp_sense@vin+1,c
  1281  002636  0E00               	movlw	0
  1282  002638  6E57               	movwf	temp_sense@vin+2,c
  1283  00263A  0E00               	movlw	0
  1284  00263C  6E58               	movwf	temp_sense@adc_result,c
  1285  00263E  0E00               	movlw	0
  1286  002640  6E59               	movwf	temp_sense@adc_result+1,c
  1287  002642  0E00               	movlw	0
  1288  002644  6E5A               	movwf	temp_sense@adc_result+2,c
  1289  002646  0E00               	movlw	0
  1290  002648  6E5B               	movwf	temp_sense@temperatura,c
  1291  00264A  0E00               	movlw	0
  1292  00264C  6E5C               	movwf	temp_sense@temperatura+1,c
  1293  00264E  0E00               	movlw	0
  1294  002650  6E5D               	movwf	temp_sense@temperatura+2,c
  1295                           
  1296                           ;lm35.c: 14: ADC_select_channel(canal);
  1297  002652  5054               	movf	temp_sense@canal,w,c
  1298  002654  EC99  F016         	call	_ADC_select_channel
  1299                           
  1300                           ;lm35.c: 15: adc_result= (double) Leer_ADC();
  1301  002658  EC4E  F01A         	call	_Leer_ADC	;wreg free
  1302  00265C  C001  F009         	movff	?_Leer_ADC,___awtoft@c
  1303  002660  C002  F00A         	movff	?_Leer_ADC+1,___awtoft@c+1
  1304  002664  EC32  F01A         	call	___awtoft	;wreg free
  1305  002668  C009  F058         	movff	?___awtoft,temp_sense@adc_result
  1306  00266C  C00A  F059         	movff	?___awtoft+1,temp_sense@adc_result+1
  1307  002670  C00B  F05A         	movff	?___awtoft+2,temp_sense@adc_result+2
  1308                           
  1309                           ;lm35.c: 16: vin=(adc_result*5)/(1024);
  1310  002674  0E00               	movlw	0
  1311  002676  6E18               	movwf	___ftmul@f2,c
  1312  002678  0EA0               	movlw	160
  1313  00267A  6E19               	movwf	___ftmul@f2+1,c
  1314  00267C  0E40               	movlw	64
  1315  00267E  6E1A               	movwf	___ftmul@f2+2,c
  1316  002680  C058  F015         	movff	temp_sense@adc_result,___ftmul@f1
  1317  002684  C059  F016         	movff	temp_sense@adc_result+1,___ftmul@f1+1
  1318  002688  C05A  F017         	movff	temp_sense@adc_result+2,___ftmul@f1+2
  1319  00268C  EC39  F015         	call	___ftmul	;wreg free
  1320  002690  C015  F03A         	movff	?___ftmul,___ftdiv@f1
  1321  002694  C016  F03B         	movff	?___ftmul+1,___ftdiv@f1+1
  1322  002698  C017  F03C         	movff	?___ftmul+2,___ftdiv@f1+2
  1323  00269C  0E00               	movlw	0
  1324  00269E  6E3D               	movwf	___ftdiv@f2,c
  1325  0026A0  0E80               	movlw	128
  1326  0026A2  6E3E               	movwf	___ftdiv@f2+1,c
  1327  0026A4  0E44               	movlw	68
  1328  0026A6  6E3F               	movwf	___ftdiv@f2+2,c
  1329  0026A8  EC26  F016         	call	___ftdiv	;wreg free
  1330  0026AC  C03A  F055         	movff	?___ftdiv,temp_sense@vin
  1331  0026B0  C03B  F056         	movff	?___ftdiv+1,temp_sense@vin+1
  1332  0026B4  C03C  F057         	movff	?___ftdiv+2,temp_sense@vin+2
  1333                           
  1334                           ;lm35.c: 17: temperatura=vin*100;
  1335  0026B8  C055  F015         	movff	temp_sense@vin,___ftmul@f1
  1336  0026BC  C056  F016         	movff	temp_sense@vin+1,___ftmul@f1+1
  1337  0026C0  C057  F017         	movff	temp_sense@vin+2,___ftmul@f1+2
  1338  0026C4  0E00               	movlw	0
  1339  0026C6  6E18               	movwf	___ftmul@f2,c
  1340  0026C8  0EC8               	movlw	200
  1341  0026CA  6E19               	movwf	___ftmul@f2+1,c
  1342  0026CC  0E42               	movlw	66
  1343  0026CE  6E1A               	movwf	___ftmul@f2+2,c
  1344  0026D0  EC39  F015         	call	___ftmul	;wreg free
  1345  0026D4  C015  F05B         	movff	?___ftmul,temp_sense@temperatura
  1346  0026D8  C016  F05C         	movff	?___ftmul+1,temp_sense@temperatura+1
  1347  0026DC  C017  F05D         	movff	?___ftmul+2,temp_sense@temperatura+2
  1348                           
  1349                           ;lm35.c: 20: Lcd_Set_Cursor(1,1);
  1350  0026E0  0E01               	movlw	1
  1351  0026E2  6E04               	movwf	Lcd_Set_Cursor@b,c
  1352  0026E4  0E01               	movlw	1
  1353  0026E6  ECB1  F019         	call	_Lcd_Set_Cursor
  1354                           
  1355                           ;lm35.c: 22: Lcd_Write_String("temp: ");
  1356  0026EA  0E77               	movlw	low STR_5
  1357  0026EC  6E05               	movwf	Lcd_Write_String@a,c
  1358  0026EE  0E08               	movlw	high STR_5
  1359  0026F0  6E06               	movwf	Lcd_Write_String@a+1,c
  1360  0026F2  ECB2  F018         	call	_Lcd_Write_String	;wreg free
  1361                           
  1362                           ;lm35.c: 30: Lcd_Write_Float(temperatura);
  1363  0026F6  C05B  F04D         	movff	temp_sense@temperatura,Lcd_Write_Float@f
  1364  0026FA  C05C  F04E         	movff	temp_sense@temperatura+1,Lcd_Write_Float@f+1
  1365  0026FE  C05D  F04F         	movff	temp_sense@temperatura+2,Lcd_Write_Float@f+2
  1366  002702  EC7F  F01A         	call	_Lcd_Write_Float	;wreg free
  1367                           
  1368                           ;lm35.c: 31: Lcd_Write_String(" C");
  1369  002706  0E96               	movlw	low STR_6
  1370  002708  6E05               	movwf	Lcd_Write_String@a,c
  1371  00270A  0E08               	movlw	high STR_6
  1372  00270C  6E06               	movwf	Lcd_Write_String@a+1,c
  1373  00270E  ECB2  F018         	call	_Lcd_Write_String	;wreg free
  1374                           
  1375                           ;lm35.c: 32: for(int i=0; i<50;i++)
  1376  002712  0E00               	movlw	0
  1377  002714  6E5F               	movwf	temp_sense@i+1,c
  1378  002716  0E00               	movlw	0
  1379  002718  6E5E               	movwf	temp_sense@i,c
  1380  00271A  BE5F               	btfsc	temp_sense@i+1,7,c
  1381  00271C  D006               	goto	l3678
  1382  00271E  505F               	movf	temp_sense@i+1,w,c
  1383  002720  E113               	bnz	l139
  1384  002722  0E32               	movlw	50
  1385  002724  5C5E               	subwf	temp_sense@i,w,c
  1386  002726  B0D8               	btfsc	status,0,c
  1387  002728  D00F               	goto	l139
  1388  00272A                     l3678:
  1389                           
  1390                           ;lm35.c: 33: _delay((unsigned long)((20)*(4000000/4000.0)));
  1391  00272A  0E1A               	movlw	26
  1392  00272C  6E53               	movwf	??_temp_sense& (0+255),c
  1393  00272E  0EF8               	movlw	248
  1394  002730                     u3897:
  1395  002730  2EE8               	decfsz	wreg,f,c
  1396  002732  D7FE               	goto	u3897
  1397  002734  2E53               	decfsz	??_temp_sense& (0+255),f,c
  1398  002736  D7FC               	goto	u3897
  1399  002738  D000               	nop2	
  1400  00273A  4A5E               	infsnz	temp_sense@i,f,c
  1401  00273C  2A5F               	incf	temp_sense@i+1,f,c
  1402  00273E  BE5F               	btfsc	temp_sense@i+1,7,c
  1403  002740  D7F4               	goto	l3678
  1404  002742  505F               	movf	temp_sense@i+1,w,c
  1405  002744  E101               	bnz	u3700
  1406  002746  D7ED               	goto	L1
  1407  002748                     u3700:
  1408  002748                     l139:
  1409                           
  1410                           ;lm35.c: 34: return temperatura;
  1411  002748  C05B  F050         	movff	temp_sense@temperatura,?_temp_sense
  1412  00274C  C05C  F051         	movff	temp_sense@temperatura+1,?_temp_sense+1
  1413  002750  C05D  F052         	movff	temp_sense@temperatura+2,?_temp_sense+2
  1414  002754  0012               	return		;funcret
  1415  002756                     __end_of_temp_sense:
  1416                           	opt stack 0
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           wreg	equ	0xFE8
  1422                           status	equ	0xFD8
  1423                           
  1424 ;; *************** function _Leer_ADC *****************
  1425 ;; Defined at:
  1426 ;;		line 19 in file "ADC.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;  dato_adc        2    2[COMRAM] int 
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  2    0[COMRAM] int 
  1433 ;; Registers used:
  1434 ;;		wreg, status,2, status,0
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1440 ;;      Params:         2       0       0       0       0       0       0       0       0
  1441 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1443 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1444 ;;Total ram usage:        4 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_temp_sense
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text2
  1454  00349C                     __ptext2:
  1455                           	opt stack 0
  1456  00349C                     _Leer_ADC:
  1457                           	opt stack 29
  1458                           
  1459                           ;ADC.c: 21: int dato_adc=0;
  1460                           
  1461                           ;incstack = 0
  1462  00349C  0E00               	movlw	0
  1463  00349E  6E04               	movwf	Leer_ADC@dato_adc+1,c
  1464  0034A0  0E00               	movlw	0
  1465  0034A2  6E03               	movwf	Leer_ADC@dato_adc,c
  1466                           
  1467                           ;ADC.c: 23: ADCON0bits.GO = 1;
  1468  0034A4  82C2               	bsf	4034,1,c	;volatile
  1469  0034A6                     l101:
  1470  0034A6  B2C2               	btfsc	4034,1,c	;volatile
  1471  0034A8  D7FE               	goto	l101
  1472                           
  1473                           ;ADC.c: 27: dato_adc = ADRESH;
  1474  0034AA  CFC4 F003          	movff	4036,Leer_ADC@dato_adc	;volatile
  1475  0034AE  6A04               	clrf	Leer_ADC@dato_adc+1,c
  1476                           
  1477                           ;ADC.c: 28: dato_adc = dato_adc<<8;
  1478  0034B0  5003               	movf	Leer_ADC@dato_adc,w,c
  1479  0034B2  6E04               	movwf	Leer_ADC@dato_adc+1,c
  1480  0034B4  6A03               	clrf	Leer_ADC@dato_adc,c
  1481                           
  1482                           ;ADC.c: 29: dato_adc = dato_adc+ADRESL;
  1483  0034B6  50C3               	movf	4035,w,c	;volatile
  1484  0034B8  2403               	addwf	Leer_ADC@dato_adc,w,c
  1485  0034BA  6E03               	movwf	Leer_ADC@dato_adc,c
  1486  0034BC  0E00               	movlw	0
  1487  0034BE  2004               	addwfc	Leer_ADC@dato_adc+1,w,c
  1488  0034C0  6E04               	movwf	Leer_ADC@dato_adc+1,c
  1489                           
  1490                           ;ADC.c: 30: ADCON0bits.GO = 0;
  1491  0034C2  92C2               	bcf	4034,1,c	;volatile
  1492                           
  1493                           ;ADC.c: 32: return dato_adc;
  1494  0034C4  C003  F001         	movff	Leer_ADC@dato_adc,?_Leer_ADC
  1495  0034C8  C004  F002         	movff	Leer_ADC@dato_adc+1,?_Leer_ADC+1
  1496  0034CC  0012               	return	
  1497  0034CE                     __end_of_Leer_ADC:
  1498                           	opt stack 0
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           wreg	equ	0xFE8
  1504                           status	equ	0xFD8
  1505                           
  1506 ;; *************** function _Lcd_Write_Float *****************
  1507 ;; Defined at:
  1508 ;;		line 118 in file "lcd.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;  f               3   76[COMRAM] float 
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;  s              20   23[BANK0 ] unsigned char [20]
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  1    wreg      void 
  1515 ;; Registers used:
  1516 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1522 ;;      Params:         3       0       0       0       0       0       0       0       0
  1523 ;;      Locals:         0      20       0       0       0       0       0       0       0
  1524 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1525 ;;      Totals:         3      20       0       0       0       0       0       0       0
  1526 ;;Total ram usage:       23 bytes
  1527 ;; Hardware stack levels used:    1
  1528 ;; Hardware stack levels required when called:    4
  1529 ;; This function calls:
  1530 ;;		_Lcd_Write_String
  1531 ;;		_sprintf
  1532 ;; This function is called by:
  1533 ;;		_main
  1534 ;;		_temp_sense
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text3
  1539  0034FE                     __ptext3:
  1540                           	opt stack 0
  1541  0034FE                     _Lcd_Write_Float:
  1542                           	opt stack 25
  1543                           
  1544                           ;lcd.c: 120: unsigned char s[20];
  1545                           ;lcd.c: 121: sprintf(s, "%.2f", f);
  1546                           
  1547                           ;incstack = 0
  1548  0034FE  0E77               	movlw	low Lcd_Write_Float@s
  1549  003500  6E40               	movwf	sprintf@sp,c
  1550  003502  0E00               	movlw	high Lcd_Write_Float@s
  1551  003504  6E41               	movwf	sprintf@sp+1,c
  1552  003506  0E91               	movlw	low STR_1
  1553  003508  6E42               	movwf	sprintf@f,c
  1554  00350A  0E08               	movlw	high STR_1
  1555  00350C  6E43               	movwf	sprintf@f+1,c
  1556  00350E  C04D  F044         	movff	Lcd_Write_Float@f,?_sprintf+4
  1557  003512  C04E  F045         	movff	Lcd_Write_Float@f+1,?_sprintf+5
  1558  003516  C04F  F046         	movff	Lcd_Write_Float@f+2,?_sprintf+6
  1559  00351A  EC4D  F004         	call	_sprintf	;wreg free
  1560                           
  1561                           ;lcd.c: 123: Lcd_Write_String(s);
  1562  00351E  0E77               	movlw	low Lcd_Write_Float@s
  1563  003520  6E05               	movwf	Lcd_Write_String@a,c
  1564  003522  0E00               	movlw	high Lcd_Write_Float@s
  1565  003524  6E06               	movwf	Lcd_Write_String@a+1,c
  1566  003526  ECB2  F018         	call	_Lcd_Write_String	;wreg free
  1567  00352A  0012               	return		;funcret
  1568  00352C                     __end_of_Lcd_Write_Float:
  1569                           	opt stack 0
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           wreg	equ	0xFE8
  1575                           status	equ	0xFD8
  1576                           
  1577 ;; *************** function _sprintf *****************
  1578 ;; Defined at:
  1579 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1582 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), 
  1583 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1584 ;;		 -> STR_2(5), STR_1(5), 
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  val             4   13[BANK0 ] unsigned long 
  1587 ;;  tmpval          4    9[BANK0 ] struct .
  1588 ;;  fval            3   19[BANK0 ] struct .
  1589 ;;  cp              3    0        PTR const unsigned char 
  1590 ;;  prec            2   17[BANK0 ] int 
  1591 ;;  exp             2    7[BANK0 ] int 
  1592 ;;  flag            2    5[BANK0 ] unsigned short 
  1593 ;;  ap              2    3[BANK0 ] PTR void [1]
  1594 ;;		 -> ?_sprintf(2), 
  1595 ;;  len             2    0        unsigned int 
  1596 ;;  width           2    0        int 
  1597 ;;  c               1   22[BANK0 ] char 
  1598 ;;  d               1    0        unsigned char 
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  2   63[COMRAM] int 
  1601 ;; Registers used:
  1602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1608 ;;      Params:         7       0       0       0       0       0       0       0       0
  1609 ;;      Locals:         0      23       0       0       0       0       0       0       0
  1610 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1611 ;;      Totals:        13      23       0       0       0       0       0       0       0
  1612 ;;Total ram usage:       36 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    3
  1615 ;; This function calls:
  1616 ;;		___awdiv
  1617 ;;		___ftadd
  1618 ;;		___ftge
  1619 ;;		___ftmul
  1620 ;;		___ftneg
  1621 ;;		___ftsub
  1622 ;;		___fttol
  1623 ;;		___lldiv
  1624 ;;		___llmod
  1625 ;;		___lltoft
  1626 ;;		___wmul
  1627 ;;		__div_to_l_
  1628 ;;		__tdiv_to_l_
  1629 ;;		_fround
  1630 ;;		_isdigit
  1631 ;;		_scale
  1632 ;; This function is called by:
  1633 ;;		_Lcd_Write_Float
  1634 ;;		_Lcd_Write_Integer
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           	psect	text4
  1639  00089A                     __ptext4:
  1640                           	opt stack 0
  1641  00089A                     _sprintf:
  1642                           	opt stack 25
  1643                           
  1644                           ;doprnt.c: 494: va_list ap;
  1645                           ;doprnt.c: 499: signed char c;
  1646                           ;doprnt.c: 501: int width;
  1647                           ;doprnt.c: 504: int prec;
  1648                           ;doprnt.c: 508: unsigned short flag;
  1649                           ;doprnt.c: 515: char d;
  1650                           ;doprnt.c: 516: double fval;
  1651                           ;doprnt.c: 517: int exp;
  1652                           ;doprnt.c: 523: union {
  1653                           ;doprnt.c: 524: unsigned long vd;
  1654                           ;doprnt.c: 525: double integ;
  1655                           ;doprnt.c: 526: } tmpval;
  1656                           ;doprnt.c: 528: unsigned long val;
  1657                           ;doprnt.c: 529: unsigned len;
  1658                           ;doprnt.c: 530: const char * cp;
  1659                           ;doprnt.c: 533: *ap = __va_start();
  1660                           
  1661                           ;incstack = 0
  1662  00089A  0E44               	movlw	low (?_sprintf+4)
  1663  00089C  0100               	movlb	0	; () banked
  1664  00089E  6F63               	movwf	sprintf@ap& (0+255),b
  1665  0008A0  0E00               	movlw	high (?_sprintf+4)
  1666  0008A2  0100               	movlb	0	; () banked
  1667  0008A4  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  1668                           
  1669                           ;doprnt.c: 536: while(c = *f++) {
  1670  0008A6  EFB7  F008         	goto	l3354
  1671  0008AA                     l3124:
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;doprnt.c: 538: if(c != '%')
  1675  0008AA  0E25               	movlw	37
  1676  0008AC  0100               	movlb	0	; () banked
  1677  0008AE  1976               	xorwf	sprintf@c& (0+255),w,b
  1678  0008B0  B4D8               	btfsc	status,2,c
  1679  0008B2  D00A               	goto	l3130
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;doprnt.c: 540: {
  1683                           ;doprnt.c: 541: ((*sp++ = (c)));
  1684  0008B4  C040  FFD9         	movff	sprintf@sp,fsr2l
  1685  0008B8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1686  0008BC  C076  FFDF         	movff	sprintf@c,indf2
  1687                           
  1688                           ; BSR set to: 0
  1689  0008C0  4A40               	infsnz	sprintf@sp,f,c
  1690  0008C2  2A41               	incf	sprintf@sp+1,f,c
  1691                           
  1692                           ;doprnt.c: 542: continue;
  1693  0008C4  EFB7  F008         	goto	l3354
  1694  0008C8                     l3130:
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;doprnt.c: 543: }
  1698                           ;doprnt.c: 548: flag = 0;
  1699  0008C8  0E00               	movlw	0
  1700  0008CA  0100               	movlb	0	; () banked
  1701  0008CC  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  1702  0008CE  0E00               	movlw	0
  1703  0008D0  6F65               	movwf	sprintf@flag& (0+255),b
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;doprnt.c: 611: if(*f == '.') {
  1707  0008D2  C042  FFF6         	movff	sprintf@f,tblptrl
  1708  0008D6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1709  0008DA                     	if	0	;tblptru may be non-zero
  1710  0008DA                     	endif
  1711  0008DA                     	if	0	;tblptru may be non-zero
  1712  0008DA                     	endif
  1713  0008DA  0008               	tblrd		*
  1714  0008DC  50F5               	movf	tablat,w,c
  1715  0008DE  0A2E               	xorlw	46
  1716  0008E0  A4D8               	btfss	status,2,c
  1717  0008E2  D032               	goto	l3144
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;doprnt.c: 612: flag |= 0x4000;
  1721  0008E4  0100               	movlb	0	; () banked
  1722  0008E6  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  1723                           
  1724                           ;doprnt.c: 613: f++;
  1725  0008E8  4A42               	infsnz	sprintf@f,f,c
  1726  0008EA  2A43               	incf	sprintf@f+1,f,c
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;doprnt.c: 620: {
  1730                           ;doprnt.c: 621: prec = 0;
  1731  0008EC  0E00               	movlw	0
  1732  0008EE  0100               	movlb	0	; () banked
  1733  0008F0  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1734  0008F2  0E00               	movlw	0
  1735  0008F4  6F71               	movwf	sprintf@prec& (0+255),b
  1736                           
  1737                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1738  0008F6  D01D               	goto	l3142
  1739  0008F8                     l3138:
  1740                           
  1741                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1742  0008F8  C071  F00F         	movff	sprintf@prec,___wmul@multiplier
  1743  0008FC  C072  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1744  000900  0E00               	movlw	0
  1745  000902  6E12               	movwf	___wmul@multiplicand+1,c
  1746  000904  0E0A               	movlw	10
  1747  000906  6E11               	movwf	___wmul@multiplicand,c
  1748  000908  ECD6  F01A         	call	___wmul	;wreg free
  1749  00090C  C042  FFF6         	movff	sprintf@f,tblptrl
  1750  000910  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1751  000914                     	if	0	;tblptru may be non-zero
  1752  000914                     	endif
  1753  000914                     	if	0	;tblptru may be non-zero
  1754  000914                     	endif
  1755  000914  0008               	tblrd		*
  1756  000916  50F5               	movf	tablat,w,c
  1757  000918  260F               	addwf	?___wmul,f,c
  1758  00091A  0E00               	movlw	0
  1759  00091C  2210               	addwfc	?___wmul+1,f,c
  1760  00091E  0ED0               	movlw	208
  1761  000920  240F               	addwf	?___wmul,w,c
  1762  000922  0100               	movlb	0	; () banked
  1763  000924  6F71               	movwf	sprintf@prec& (0+255),b
  1764  000926  0EFF               	movlw	255
  1765  000928  2010               	addwfc	?___wmul+1,w,c
  1766  00092A  0100               	movlb	0	; () banked
  1767  00092C  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1768                           
  1769                           ; BSR set to: 0
  1770  00092E  4A42               	infsnz	sprintf@f,f,c
  1771  000930  2A43               	incf	sprintf@f+1,f,c
  1772  000932                     l3142:
  1773                           
  1774                           ; BSR set to: 0
  1775  000932  C042  FFF6         	movff	sprintf@f,tblptrl
  1776  000936  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1777  00093A                     	if	0	;tblptru may be non-zero
  1778  00093A                     	endif
  1779  00093A                     	if	0	;tblptru may be non-zero
  1780  00093A                     	endif
  1781  00093A  0008               	tblrd		*
  1782  00093C  50F5               	movf	tablat,w,c
  1783  00093E  EC1D  F01B         	call	_isdigit
  1784  000942  A0D8               	btfss	status,0,c
  1785  000944  D00C               	goto	l3152
  1786  000946  D7D8               	goto	l3138
  1787  000948                     l3144:
  1788                           
  1789                           ;doprnt.c: 626: prec = 0;
  1790  000948  0E00               	movlw	0
  1791  00094A  0100               	movlb	0	; () banked
  1792  00094C  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1793  00094E  0E00               	movlw	0
  1794  000950  6F71               	movwf	sprintf@prec& (0+255),b
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;doprnt.c: 628: flag |= 0x1000;
  1798  000952  0100               	movlb	0	; () banked
  1799  000954  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;doprnt.c: 630: }
  1803                           ;doprnt.c: 635: switch(c = *f++) {
  1804  000956  D003               	goto	l3152
  1805  000958                     l3148:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;doprnt.c: 663: flag |= 0x400;
  1809  000958  0100               	movlb	0	; () banked
  1810  00095A  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;doprnt.c: 698: case 'i':
  1814                           ;doprnt.c: 699: break;
  1815                           
  1816                           ; BSR set to: 0
  1817                           
  1818                           ;doprnt.c: 697: case 'd':
  1819                           
  1820                           ;doprnt.c: 664: break;
  1821  00095C  D018               	goto	l3154
  1822  00095E                     l3152:
  1823  00095E  C042  FFF6         	movff	sprintf@f,tblptrl
  1824  000962  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1825  000966  4A42               	infsnz	sprintf@f,f,c
  1826  000968  2A43               	incf	sprintf@f+1,f,c
  1827  00096A                     	if	0	;tblptru may be non-zero
  1828  00096A                     	endif
  1829  00096A                     	if	0	;tblptru may be non-zero
  1830  00096A                     	endif
  1831  00096A  0008               	tblrd		*
  1832  00096C  CFF5 F076          	movff	tablat,sprintf@c
  1833  000970  0100               	movlb	0	; () banked
  1834  000972  5176               	movf	sprintf@c& (0+255),w,b
  1835                           
  1836                           ; Switch size 1, requested type "space"
  1837                           ; Number of cases is 4, Range of values is 0 to 105
  1838                           ; switch strategies available:
  1839                           ; Name         Instructions Cycles
  1840                           ; simple_byte           13     7 (average)
  1841                           ;	Chosen strategy is simple_byte
  1842  000974  0A00               	xorlw	0	; case 0
  1843  000976  B4D8               	btfsc	status,2,c
  1844  000978  EFC5  F008         	goto	l3356
  1845  00097C  0A64               	xorlw	100	; case 100
  1846  00097E  B4D8               	btfsc	status,2,c
  1847  000980  D006               	goto	l3154
  1848  000982  0A02               	xorlw	2	; case 102
  1849  000984  B4D8               	btfsc	status,2,c
  1850  000986  D7E8               	goto	l3148
  1851  000988  0A0F               	xorlw	15	; case 105
  1852  00098A  A4D8               	btfss	status,2,c
  1853  00098C  D3F0               	goto	l3354
  1854  00098E                     l3154:
  1855                           
  1856                           ; BSR set to: 0
  1857                           ;doprnt.c: 825: if(flag & (0x700)) {
  1858  00098E  0E07               	movlw	7
  1859  000990  0100               	movlb	0	; () banked
  1860  000992  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1861  000994  B4D8               	btfsc	status,2,c
  1862  000996  D306               	goto	l3302
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;doprnt.c: 827: if(flag & 0x1000)
  1866  000998  0100               	movlb	0	; () banked
  1867  00099A  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  1868  00099C  D005               	goto	l3160
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;doprnt.c: 829: prec = 6;
  1872  00099E  0E00               	movlw	0
  1873  0009A0  0100               	movlb	0	; () banked
  1874  0009A2  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1875  0009A4  0E06               	movlw	6
  1876  0009A6  6F71               	movwf	sprintf@prec& (0+255),b
  1877  0009A8                     l3160:
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1881  0009A8  C063  FFD9         	movff	sprintf@ap,fsr2l
  1882  0009AC  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1883  0009B0  CFDE F073          	movff	postinc2,sprintf@fval
  1884  0009B4  CFDE F074          	movff	postinc2,sprintf@fval+1
  1885  0009B8  CFDD F075          	movff	postdec2,sprintf@fval+2
  1886                           
  1887                           ; BSR set to: 0
  1888  0009BC  0E03               	movlw	3
  1889  0009BE  0100               	movlb	0	; () banked
  1890  0009C0  2763               	addwf	sprintf@ap& (0+255),f,b
  1891  0009C2  0E00               	movlw	0
  1892  0009C4  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;doprnt.c: 831: if(fval < 0.0) {
  1896  0009C6  0100               	movlb	0	; () banked
  1897  0009C8  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1898  0009CA  D011               	goto	l3170
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;doprnt.c: 832: fval = -fval;
  1902  0009CC  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1903  0009D0  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1904  0009D4  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1905  0009D8  ECE9  F01A         	call	___ftneg	;wreg free
  1906  0009DC  C001  F073         	movff	?___ftneg,sprintf@fval
  1907  0009E0  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1908  0009E4  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1909                           
  1910                           ;doprnt.c: 833: flag |= 0x03;
  1911  0009E8  0E03               	movlw	3
  1912  0009EA  0100               	movlb	0	; () banked
  1913  0009EC  1365               	iorwf	sprintf@flag& (0+255),f,b
  1914  0009EE                     l3170:
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;doprnt.c: 834: }
  1918                           ;doprnt.c: 835: exp = 0;
  1919  0009EE  0E00               	movlw	0
  1920  0009F0  0100               	movlb	0	; () banked
  1921  0009F2  6F68               	movwf	(sprintf@exp+1)& (0+255),b
  1922  0009F4  0E00               	movlw	0
  1923  0009F6  6F67               	movwf	sprintf@exp& (0+255),b
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;doprnt.c: 836: if( fval!=0) {
  1927  0009F8  0100               	movlb	0	; () banked
  1928  0009FA  5173               	movf	sprintf@fval& (0+255),w,b
  1929  0009FC  0100               	movlb	0	; () banked
  1930  0009FE  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1931  000A00  0100               	movlb	0	; () banked
  1932  000A02  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1933  000A04  B4D8               	btfsc	status,2,c
  1934  000A06  D08B               	goto	l3198
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1938  000A08  0E82               	movlw	130
  1939  000A0A  6E47               	movwf	??_sprintf& (0+255),c
  1940  000A0C  0EFF               	movlw	255
  1941  000A0E  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1942  000A10  C073  F049         	movff	sprintf@fval,??_sprintf+2
  1943  000A14  C074  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1944  000A18  C075  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1945  000A1C  C076  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1946  000A20  0E10               	movlw	16
  1947  000A22  D005               	goto	u3060
  1948  000A24                     u3065:
  1949  000A24  90D8               	bcf	status,0,c
  1950  000A26  324C               	rrcf	??_sprintf+5,f,c
  1951  000A28  324B               	rrcf	??_sprintf+4,f,c
  1952  000A2A  324A               	rrcf	??_sprintf+3,f,c
  1953  000A2C  3249               	rrcf	??_sprintf+2,f,c
  1954  000A2E                     u3060:
  1955  000A2E  2EE8               	decfsz	wreg,f,c
  1956  000A30  D7F9               	goto	u3065
  1957  000A32  5049               	movf	??_sprintf+2,w,c
  1958  000A34  2447               	addwf	??_sprintf,w,c
  1959  000A36  0100               	movlb	0	; () banked
  1960  000A38  6F67               	movwf	sprintf@exp& (0+255),b
  1961  000A3A  0E00               	movlw	0
  1962  000A3C  2048               	addwfc	??_sprintf+1,w,c
  1963  000A3E  0100               	movlb	0	; () banked
  1964  000A40  6F68               	movwf	(sprintf@exp+1)& (0+255),b
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;doprnt.c: 838: exp--;
  1968  000A42  0100               	movlb	0	; () banked
  1969  000A44  0767               	decf	sprintf@exp& (0+255),f,b
  1970  000A46  A0D8               	btfss	status,0,c
  1971  000A48  0768               	decf	(sprintf@exp+1)& (0+255),f,b
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;doprnt.c: 839: exp *= 3;
  1975  000A4A  C067  F00F         	movff	sprintf@exp,___wmul@multiplier
  1976  000A4E  C068  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1977  000A52  0E00               	movlw	0
  1978  000A54  6E12               	movwf	___wmul@multiplicand+1,c
  1979  000A56  0E03               	movlw	3
  1980  000A58  6E11               	movwf	___wmul@multiplicand,c
  1981  000A5A  ECD6  F01A         	call	___wmul	;wreg free
  1982  000A5E  C00F  F067         	movff	?___wmul,sprintf@exp
  1983  000A62  C010  F068         	movff	?___wmul+1,sprintf@exp+1
  1984                           
  1985                           ;doprnt.c: 840: exp /= 10;
  1986  000A66  C067  F007         	movff	sprintf@exp,___awdiv@dividend
  1987  000A6A  C068  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1988  000A6E  0E00               	movlw	0
  1989  000A70  6E0A               	movwf	___awdiv@divisor+1,c
  1990  000A72  0E0A               	movlw	10
  1991  000A74  6E09               	movwf	___awdiv@divisor,c
  1992  000A76  ECF5  F017         	call	___awdiv	;wreg free
  1993  000A7A  C007  F067         	movff	?___awdiv,sprintf@exp
  1994  000A7E  C008  F068         	movff	?___awdiv+1,sprintf@exp+1
  1995                           
  1996                           ;doprnt.c: 841: if(exp < 0)
  1997  000A82  0100               	movlb	0	; () banked
  1998  000A84  AF68               	btfss	(sprintf@exp+1)& (0+255),7,b
  1999  000A86  D004               	goto	l3186
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;doprnt.c: 842: exp--;
  2003  000A88  0100               	movlb	0	; () banked
  2004  000A8A  0767               	decf	sprintf@exp& (0+255),f,b
  2005  000A8C  A0D8               	btfss	status,0,c
  2006  000A8E  0768               	decf	(sprintf@exp+1)& (0+255),f,b
  2007  000A90                     l3186:
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2011  000A90  0100               	movlb	0	; () banked
  2012  000A92  5167               	movf	sprintf@exp& (0+255),w,b
  2013  000A94  0800               	sublw	0
  2014  000A96  ECEF  F00A         	call	_scale
  2015  000A9A  C024  F069         	movff	?_scale,sprintf@tmpval
  2016  000A9E  C025  F06A         	movff	?_scale+1,sprintf@tmpval+1
  2017  000AA2  C026  F06B         	movff	?_scale+2,sprintf@tmpval+2
  2018                           
  2019                           ;doprnt.c: 847: tmpval.integ *= fval;
  2020  000AA6  C069  F015         	movff	sprintf@tmpval,___ftmul@f1
  2021  000AAA  C06A  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2022  000AAE  C06B  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2023  000AB2  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2024  000AB6  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2025  000ABA  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2026  000ABE  EC39  F015         	call	___ftmul	;wreg free
  2027  000AC2  C015  F069         	movff	?___ftmul,sprintf@tmpval
  2028  000AC6  C016  F06A         	movff	?___ftmul+1,sprintf@tmpval+1
  2029  000ACA  C017  F06B         	movff	?___ftmul+2,sprintf@tmpval+2
  2030                           
  2031                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2032  000ACE  C069  F015         	movff	sprintf@tmpval,___ftge@ff1
  2033  000AD2  C06A  F016         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2034  000AD6  C06B  F017         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2035  000ADA  0E00               	movlw	0
  2036  000ADC  6E18               	movwf	___ftge@ff2,c
  2037  000ADE  0E80               	movlw	128
  2038  000AE0  6E19               	movwf	___ftge@ff2+1,c
  2039  000AE2  0E3F               	movlw	63
  2040  000AE4  6E1A               	movwf	___ftge@ff2+2,c
  2041  000AE6  ECAD  F017         	call	___ftge	;wreg free
  2042  000AEA  B0D8               	btfsc	status,0,c
  2043  000AEC  D005               	goto	l3194
  2044                           
  2045                           ;doprnt.c: 849: exp--;
  2046  000AEE  0100               	movlb	0	; () banked
  2047  000AF0  0767               	decf	sprintf@exp& (0+255),f,b
  2048  000AF2  A0D8               	btfss	status,0,c
  2049  000AF4  0768               	decf	(sprintf@exp+1)& (0+255),f,b
  2050  000AF6  D013               	goto	l3198
  2051  000AF8                     l3194:
  2052                           
  2053                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2054  000AF8  C069  F015         	movff	sprintf@tmpval,___ftge@ff1
  2055  000AFC  C06A  F016         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2056  000B00  C06B  F017         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2057  000B04  0E00               	movlw	0
  2058  000B06  6E18               	movwf	___ftge@ff2,c
  2059  000B08  0E20               	movlw	32
  2060  000B0A  6E19               	movwf	___ftge@ff2+1,c
  2061  000B0C  0E41               	movlw	65
  2062  000B0E  6E1A               	movwf	___ftge@ff2+2,c
  2063  000B10  ECAD  F017         	call	___ftge	;wreg free
  2064  000B14  A0D8               	btfss	status,0,c
  2065  000B16  D003               	goto	l3198
  2066                           
  2067                           ;doprnt.c: 851: exp++;
  2068  000B18  0100               	movlb	0	; () banked
  2069  000B1A  4B67               	infsnz	sprintf@exp& (0+255),f,b
  2070  000B1C  2B68               	incf	(sprintf@exp+1)& (0+255),f,b
  2071  000B1E                     l3198:
  2072                           
  2073                           ;doprnt.c: 852: }
  2074                           ;doprnt.c: 1112: if(prec <= 12)
  2075  000B1E  0100               	movlb	0	; () banked
  2076  000B20  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2077  000B22  D008               	goto	l3200
  2078  000B24  0100               	movlb	0	; () banked
  2079  000B26  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2080  000B28  E11D               	bnz	l3202
  2081  000B2A  0E0D               	movlw	13
  2082  000B2C  0100               	movlb	0	; () banked
  2083  000B2E  5D71               	subwf	sprintf@prec& (0+255),w,b
  2084  000B30  B0D8               	btfsc	status,0,c
  2085  000B32  D018               	goto	l3202
  2086  000B34                     l3200:
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;doprnt.c: 1113: fval += fround(prec);
  2090  000B34  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  2091  000B38  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  2092  000B3C  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  2093  000B40  0100               	movlb	0	; () banked
  2094  000B42  5171               	movf	sprintf@prec& (0+255),w,b
  2095  000B44  EC19  F00E         	call	_fround
  2096  000B48  C024  F031         	movff	?_fround,___ftadd@f2
  2097  000B4C  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2098  000B50  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2099  000B54  EC5B  F010         	call	___ftadd	;wreg free
  2100  000B58  C02E  F073         	movff	?___ftadd,sprintf@fval
  2101  000B5C  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  2102  000B60  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  2103  000B64                     l3202:
  2104                           
  2105                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2106  000B64  0100               	movlb	0	; () banked
  2107  000B66  BF68               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2108  000B68  D008               	goto	l3204
  2109  000B6A  0100               	movlb	0	; () banked
  2110  000B6C  5168               	movf	(sprintf@exp+1)& (0+255),w,b
  2111  000B6E  E126               	bnz	l3210
  2112  000B70  0E0A               	movlw	10
  2113  000B72  0100               	movlb	0	; () banked
  2114  000B74  5D67               	subwf	sprintf@exp& (0+255),w,b
  2115  000B76  B0D8               	btfsc	status,0,c
  2116  000B78  D021               	goto	l3210
  2117  000B7A                     l3204:
  2118                           
  2119                           ; BSR set to: 0
  2120  000B7A  0100               	movlb	0	; () banked
  2121  000B7C  5173               	movf	sprintf@fval& (0+255),w,b
  2122  000B7E  0100               	movlb	0	; () banked
  2123  000B80  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2124  000B82  0100               	movlb	0	; () banked
  2125  000B84  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2126  000B86  B4D8               	btfsc	status,2,c
  2127  000B88  D05B               	goto	l3224
  2128                           
  2129                           ; BSR set to: 0
  2130  000B8A  C073  F02B         	movff	sprintf@fval,___fttol@f1
  2131  000B8E  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2132  000B92  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2133  000B96  ECBF  F014         	call	___fttol	;wreg free
  2134  000B9A  502B               	movf	?___fttol,w,c
  2135  000B9C  102C               	iorwf	?___fttol+1,w,c
  2136  000B9E  102D               	iorwf	?___fttol+2,w,c
  2137  000BA0  102E               	iorwf	?___fttol+3,w,c
  2138  000BA2  A4D8               	btfss	status,2,c
  2139  000BA4  D04D               	goto	l3224
  2140  000BA6  0100               	movlb	0	; () banked
  2141  000BA8  BF68               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2142  000BAA  D04A               	goto	l3224
  2143  000BAC  0100               	movlb	0	; () banked
  2144  000BAE  5168               	movf	(sprintf@exp+1)& (0+255),w,b
  2145  000BB0  E105               	bnz	l3210
  2146  000BB2  0E02               	movlw	2
  2147  000BB4  0100               	movlb	0	; () banked
  2148  000BB6  5D67               	subwf	sprintf@exp& (0+255),w,b
  2149  000BB8  A0D8               	btfss	status,0,c
  2150  000BBA  D042               	goto	l3224
  2151  000BBC                     l3210:
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2155  000BBC  C069  F015         	movff	sprintf@tmpval,___ftge@ff1
  2156  000BC0  C06A  F016         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2157  000BC4  C06B  F017         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2158  000BC8  0E70               	movlw	112
  2159  000BCA  6E18               	movwf	___ftge@ff2,c
  2160  000BCC  0E89               	movlw	137
  2161  000BCE  6E19               	movwf	___ftge@ff2+1,c
  2162  000BD0  0E40               	movlw	64
  2163  000BD2  6E1A               	movwf	___ftge@ff2+2,c
  2164  000BD4  ECAD  F017         	call	___ftge	;wreg free
  2165  000BD8  B0D8               	btfsc	status,0,c
  2166  000BDA  D003               	goto	l3214
  2167                           
  2168                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2169  000BDC  0100               	movlb	0	; () banked
  2170  000BDE  0EF7               	movlw	247
  2171  000BE0  D002               	goto	L2
  2172  000BE2                     l3214:
  2173                           
  2174                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2175  000BE2  0100               	movlb	0	; () banked
  2176  000BE4  0EF8               	movlw	248
  2177  000BE6                     L2:
  2178  000BE6  2767               	addwf	sprintf@exp& (0+255),f,b
  2179  000BE8  0EFF               	movlw	255
  2180  000BEA  2368               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;doprnt.c: 1124: }
  2184                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2185                           
  2186                           ; BSR set to: 0
  2187  000BEC  0100               	movlb	0	; () banked
  2188  000BEE  5167               	movf	sprintf@exp& (0+255),w,b
  2189  000BF0  ECEF  F00A         	call	_scale
  2190  000BF4  C024  F069         	movff	?_scale,sprintf@tmpval
  2191  000BF8  C025  F06A         	movff	?_scale+1,sprintf@tmpval+1
  2192  000BFC  C026  F06B         	movff	?_scale+2,sprintf@tmpval+2
  2193                           
  2194                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2195  000C00  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2196  000C04  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2197  000C08  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2198  000C0C  C069  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2199  000C10  C06A  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2200  000C14  C06B  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2201  000C18  EC7D  F012         	call	__tdiv_to_l_	;wreg free
  2202  000C1C  C001  F06D         	movff	?__tdiv_to_l_,sprintf@val
  2203  000C20  C002  F06E         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2204  000C24  C003  F06F         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2205  000C28  C004  F070         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2206                           
  2207                           ;doprnt.c: 1129: fval = 0.0;
  2208  000C2C  0E00               	movlw	0
  2209  000C2E  0100               	movlb	0	; () banked
  2210  000C30  6F73               	movwf	sprintf@fval& (0+255),b
  2211  000C32  0E00               	movlw	0
  2212  000C34  0100               	movlb	0	; () banked
  2213  000C36  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  2214  000C38  0E00               	movlw	0
  2215  000C3A  0100               	movlb	0	; () banked
  2216  000C3C  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  2217                           
  2218                           ;doprnt.c: 1130: } else {
  2219  000C3E  D033               	goto	l3228
  2220  000C40                     l3224:
  2221                           
  2222                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2223  000C40  C073  F02B         	movff	sprintf@fval,___fttol@f1
  2224  000C44  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2225  000C48  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2226  000C4C  ECBF  F014         	call	___fttol	;wreg free
  2227  000C50  C02B  F06D         	movff	?___fttol,sprintf@val
  2228  000C54  C02C  F06E         	movff	?___fttol+1,sprintf@val+1
  2229  000C58  C02D  F06F         	movff	?___fttol+2,sprintf@val+2
  2230  000C5C  C02E  F070         	movff	?___fttol+3,sprintf@val+3
  2231                           
  2232                           ;doprnt.c: 1132: fval -= (double)val;
  2233  000C60  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  2234  000C64  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2235  000C68  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2236  000C6C  C06D  F009         	movff	sprintf@val,___lltoft@c
  2237  000C70  C06E  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2238  000C74  C06F  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2239  000C78  C070  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2240  000C7C  EC56  F019         	call	___lltoft	;wreg free
  2241  000C80  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2242  000C84  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2243  000C88  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2244  000C8C  ECD9  F019         	call	___ftsub	;wreg free
  2245  000C90  C03A  F073         	movff	?___ftsub,sprintf@fval
  2246  000C94  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  2247  000C98  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  2248                           
  2249                           ;doprnt.c: 1133: exp = 0;
  2250  000C9C  0E00               	movlw	0
  2251  000C9E  0100               	movlb	0	; () banked
  2252  000CA0  6F68               	movwf	(sprintf@exp+1)& (0+255),b
  2253  000CA2  0E00               	movlw	0
  2254  000CA4  6F67               	movwf	sprintf@exp& (0+255),b
  2255  000CA6                     l3228:
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;doprnt.c: 1134: }
  2259                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2260  000CA6  0E01               	movlw	1
  2261  000CA8  0100               	movlb	0	; () banked
  2262  000CAA  6F76               	movwf	sprintf@c& (0+255),b
  2263  000CAC                     l3230:
  2264                           
  2265                           ; BSR set to: 0
  2266  000CAC  0E0A               	movlw	10
  2267  000CAE  0100               	movlb	0	; () banked
  2268  000CB0  1976               	xorwf	sprintf@c& (0+255),w,b
  2269  000CB2  B4D8               	btfsc	status,2,c
  2270  000CB4  D01E               	goto	l3242
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;doprnt.c: 1137: if(val < dpowers[c])
  2274                           
  2275                           ; BSR set to: 0
  2276                           
  2277                           ; BSR set to: 0
  2278  000CB6  0100               	movlb	0	; () banked
  2279  000CB8  5176               	movf	sprintf@c& (0+255),w,b
  2280  000CBA  0D04               	mullw	4
  2281  000CBC  0E01               	movlw	low _dpowers
  2282  000CBE  24F3               	addwf	prodl,w,c
  2283  000CC0  6EF6               	movwf	tblptrl,c
  2284  000CC2  0E08               	movlw	high _dpowers
  2285  000CC4  20F4               	addwfc	prodh,w,c
  2286  000CC6  6EF7               	movwf	tblptrh,c
  2287  000CC8                     	if	0	;There are less than 3 active tblptr bytes
  2288  000CC8                     	endif
  2289  000CC8  0009               	tblrd		*+
  2290  000CCA  50F5               	movf	tablat,w,c
  2291  000CCC  0100               	movlb	0	; () banked
  2292  000CCE  5D6D               	subwf	sprintf@val& (0+255),w,b
  2293  000CD0  0009               	tblrd		*+
  2294  000CD2  50F5               	movf	tablat,w,c
  2295  000CD4  0100               	movlb	0	; () banked
  2296  000CD6  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  2297  000CD8  0009               	tblrd		*+
  2298  000CDA  50F5               	movf	tablat,w,c
  2299  000CDC  0100               	movlb	0	; () banked
  2300  000CDE  596F               	subwfb	(sprintf@val+2)& (0+255),w,b
  2301  000CE0  0009               	tblrd		*+
  2302  000CE2  50F5               	movf	tablat,w,c
  2303  000CE4  0100               	movlb	0	; () banked
  2304  000CE6  5970               	subwfb	(sprintf@val+3)& (0+255),w,b
  2305  000CE8  A0D8               	btfss	status,0,c
  2306  000CEA  D003               	goto	l3242
  2307                           
  2308                           ; BSR set to: 0
  2309                           
  2310                           ; BSR set to: 0
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;doprnt.c: 1138: break;
  2314  000CEC  0100               	movlb	0	; () banked
  2315  000CEE  2B76               	incf	sprintf@c& (0+255),f,b
  2316  000CF0  D7DD               	goto	l3230
  2317  000CF2                     l3242:
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;doprnt.c: 1175: {
  2321                           ;doprnt.c: 1188: if(flag & 0x03)
  2322  000CF2  0E03               	movlw	3
  2323  000CF4  0100               	movlb	0	; () banked
  2324  000CF6  1565               	andwf	sprintf@flag& (0+255),w,b
  2325  000CF8  6E47               	movwf	??_sprintf& (0+255),c
  2326  000CFA  0E00               	movlw	0
  2327  000CFC  0100               	movlb	0	; () banked
  2328  000CFE  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2329  000D00  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2330  000D02  5047               	movf	??_sprintf,w,c
  2331  000D04  1048               	iorwf	??_sprintf+1,w,c
  2332  000D06  B4D8               	btfsc	status,2,c
  2333  000D08  D053               	goto	l3256
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2337  000D0A  C040  FFD9         	movff	sprintf@sp,fsr2l
  2338  000D0E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2339  000D12  0E2D               	movlw	45
  2340  000D14  D04B               	goto	L3
  2341  000D16                     l3246:
  2342                           
  2343                           ; BSR set to: 0
  2344  000D16  4A40               	infsnz	sprintf@sp,f,c
  2345  000D18  2A41               	incf	sprintf@sp+1,f,c
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;doprnt.c: 1195: }
  2349                           ;doprnt.c: 1196: while(c--) {
  2350  000D1A  D04A               	goto	l3256
  2351  000D1C                     l3248:
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;doprnt.c: 1200: {
  2355                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2356  000D1C  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  2357  000D20  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2358  000D24  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2359  000D28  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2360  000D2C  0100               	movlb	0	; () banked
  2361  000D2E  5176               	movf	sprintf@c& (0+255),w,b
  2362  000D30  0D04               	mullw	4
  2363  000D32  0E01               	movlw	low _dpowers
  2364  000D34  24F3               	addwf	prodl,w,c
  2365  000D36  6EF6               	movwf	tblptrl,c
  2366  000D38  0E08               	movlw	high _dpowers
  2367  000D3A  20F4               	addwfc	prodh,w,c
  2368  000D3C  6EF7               	movwf	tblptrh,c
  2369  000D3E                     	if	0	;There are less than 3 active tblptr bytes
  2370  000D3E                     	endif
  2371  000D3E  0009               	tblrd		*+
  2372  000D40  CFF5 F005          	movff	tablat,___lldiv@divisor
  2373  000D44  0009               	tblrd		*+
  2374  000D46  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2375  000D4A  0009               	tblrd		*+
  2376  000D4C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2377  000D50  000A               	tblrd		*-
  2378  000D52  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2379  000D56  EC37  F018         	call	___lldiv	;wreg free
  2380  000D5A  C001  F069         	movff	?___lldiv,sprintf@tmpval
  2381  000D5E  C002  F06A         	movff	?___lldiv+1,sprintf@tmpval+1
  2382  000D62  C003  F06B         	movff	?___lldiv+2,sprintf@tmpval+2
  2383  000D66  C004  F06C         	movff	?___lldiv+3,sprintf@tmpval+3
  2384                           
  2385                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2386  000D6A  C069  F00E         	movff	sprintf@tmpval,___llmod@dividend
  2387  000D6E  C06A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2388  000D72  C06B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2389  000D76  C06C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2390  000D7A  0E0A               	movlw	10
  2391  000D7C  6E12               	movwf	___llmod@divisor,c
  2392  000D7E  0E00               	movlw	0
  2393  000D80  6E13               	movwf	___llmod@divisor+1,c
  2394  000D82  0E00               	movlw	0
  2395  000D84  6E14               	movwf	___llmod@divisor+2,c
  2396  000D86  0E00               	movlw	0
  2397  000D88  6E15               	movwf	___llmod@divisor+3,c
  2398  000D8A  EC23  F019         	call	___llmod	;wreg free
  2399  000D8E  C00E  F069         	movff	?___llmod,sprintf@tmpval
  2400  000D92  C00F  F06A         	movff	?___llmod+1,sprintf@tmpval+1
  2401  000D96  C010  F06B         	movff	?___llmod+2,sprintf@tmpval+2
  2402  000D9A  C011  F06C         	movff	?___llmod+3,sprintf@tmpval+3
  2403                           
  2404                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2405  000D9E  0100               	movlb	0	; () banked
  2406  000DA0  5169               	movf	sprintf@tmpval& (0+255),w,b
  2407  000DA2  0F30               	addlw	48
  2408  000DA4  C040  FFD9         	movff	sprintf@sp,fsr2l
  2409  000DA8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2410  000DAC                     L3:
  2411  000DAC  6EDF               	movwf	indf2,c
  2412  000DAE  D7B3               	goto	l3246
  2413  000DB0                     l3256:
  2414                           
  2415                           ; BSR set to: 0
  2416  000DB0  0100               	movlb	0	; () banked
  2417  000DB2  0776               	decf	sprintf@c& (0+255),f,b
  2418  000DB4  0100               	movlb	0	; () banked
  2419  000DB6  2976               	incf	sprintf@c& (0+255),w,b
  2420  000DB8  B4D8               	btfsc	status,2,c
  2421  000DBA  D00D               	goto	l3264
  2422  000DBC  D7AF               	goto	l3248
  2423  000DBE                     l3258:
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2427  000DBE  C040  FFD9         	movff	sprintf@sp,fsr2l
  2428  000DC2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2429  000DC6  0E30               	movlw	48
  2430  000DC8  6EDF               	movwf	indf2,c
  2431                           
  2432                           ; BSR set to: 0
  2433  000DCA  4A40               	infsnz	sprintf@sp,f,c
  2434  000DCC  2A41               	incf	sprintf@sp+1,f,c
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;doprnt.c: 1209: exp--;
  2438  000DCE  0100               	movlb	0	; () banked
  2439  000DD0  0767               	decf	sprintf@exp& (0+255),f,b
  2440  000DD2  A0D8               	btfss	status,0,c
  2441  000DD4  0768               	decf	(sprintf@exp+1)& (0+255),f,b
  2442  000DD6                     l3264:
  2443                           
  2444                           ; BSR set to: 0
  2445  000DD6  0100               	movlb	0	; () banked
  2446  000DD8  BF68               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2447  000DDA  D007               	goto	l3266
  2448  000DDC  0100               	movlb	0	; () banked
  2449  000DDE  5168               	movf	(sprintf@exp+1)& (0+255),w,b
  2450  000DE0  E1EE               	bnz	l3258
  2451  000DE2  0100               	movlb	0	; () banked
  2452  000DE4  0567               	decf	sprintf@exp& (0+255),w,b
  2453  000DE6  B0D8               	btfsc	status,0,c
  2454  000DE8  D7EA               	goto	l3258
  2455  000DEA                     l3266:
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;doprnt.c: 1210: }
  2459                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2460  000DEA  0100               	movlb	0	; () banked
  2461  000DEC  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2462  000DEE  D00C               	goto	l341
  2463  000DF0  0100               	movlb	0	; () banked
  2464  000DF2  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2465  000DF4  E105               	bnz	u3220
  2466  000DF6  0E09               	movlw	9
  2467  000DF8  0100               	movlb	0	; () banked
  2468  000DFA  5D71               	subwf	sprintf@prec& (0+255),w,b
  2469  000DFC  A0D8               	btfss	status,0,c
  2470  000DFE  D004               	goto	l341
  2471  000E00                     u3220:
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2475  000E00  0E08               	movlw	8
  2476  000E02  0100               	movlb	0	; () banked
  2477  000E04  6F76               	movwf	sprintf@c& (0+255),b
  2478  000E06  D002               	goto	l3270
  2479  000E08                     l341:
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;doprnt.c: 1213: else
  2483                           ;doprnt.c: 1214: c = prec;
  2484  000E08  C071  F076         	movff	sprintf@prec,sprintf@c
  2485  000E0C                     l3270:
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;doprnt.c: 1215: prec -= c;
  2489  000E0C  0100               	movlb	0	; () banked
  2490  000E0E  5176               	movf	sprintf@c& (0+255),w,b
  2491  000E10  0100               	movlb	0	; () banked
  2492  000E12  5F71               	subwf	sprintf@prec& (0+255),f,b
  2493  000E14  0E00               	movlw	0
  2494  000E16  0100               	movlb	0	; () banked
  2495  000E18  BF76               	btfsc	sprintf@c& (0+255),7,b
  2496  000E1A  0EFF               	movlw	255
  2497  000E1C  0100               	movlb	0	; () banked
  2498  000E1E  5B72               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;doprnt.c: 1219: if(c)
  2502  000E20  0100               	movlb	0	; () banked
  2503  000E22  5176               	movf	sprintf@c& (0+255),w,b
  2504  000E24  0100               	movlb	0	; () banked
  2505  000E26  B4D8               	btfsc	status,2,c
  2506  000E28  D008               	goto	l3278
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2510  000E2A  C040  FFD9         	movff	sprintf@sp,fsr2l
  2511  000E2E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2512  000E32  0E2E               	movlw	46
  2513  000E34  6EDF               	movwf	indf2,c
  2514                           
  2515                           ; BSR set to: 0
  2516  000E36  4A40               	infsnz	sprintf@sp,f,c
  2517  000E38  2A41               	incf	sprintf@sp+1,f,c
  2518  000E3A                     l3278:
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2522  000E3A  0100               	movlb	0	; () banked
  2523  000E3C  5176               	movf	sprintf@c& (0+255),w,b
  2524  000E3E  ECEF  F00A         	call	_scale
  2525  000E42  C024  F060         	movff	?_scale,_sprintf$1526
  2526  000E46  C025  F061         	movff	?_scale+1,_sprintf$1526+1
  2527  000E4A  C026  F062         	movff	?_scale+2,_sprintf$1526+2
  2528                           
  2529                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2530  000E4E  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2531  000E52  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2532  000E56  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2533  000E5A  C060  F015         	movff	_sprintf$1526,___ftmul@f1
  2534  000E5E  C061  F016         	movff	_sprintf$1526+1,___ftmul@f1+1
  2535  000E62  C062  F017         	movff	_sprintf$1526+2,___ftmul@f1+2
  2536  000E66  EC39  F015         	call	___ftmul	;wreg free
  2537  000E6A  C015  F02B         	movff	?___ftmul,___fttol@f1
  2538  000E6E  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2539  000E72  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2540  000E76  ECBF  F014         	call	___fttol	;wreg free
  2541  000E7A  C02B  F06D         	movff	?___fttol,sprintf@val
  2542  000E7E  C02C  F06E         	movff	?___fttol+1,sprintf@val+1
  2543  000E82  C02D  F06F         	movff	?___fttol+2,sprintf@val+2
  2544  000E86  C02E  F070         	movff	?___fttol+3,sprintf@val+3
  2545                           
  2546                           ;doprnt.c: 1228: while(c--) {
  2547  000E8A  D072               	goto	l3292
  2548  000E8C                     l3282:
  2549                           
  2550                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2551  000E8C  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  2552  000E90  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2553  000E94  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2554  000E98  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2555  000E9C  0100               	movlb	0	; () banked
  2556  000E9E  5176               	movf	sprintf@c& (0+255),w,b
  2557  000EA0  0D04               	mullw	4
  2558  000EA2  0E01               	movlw	low _dpowers
  2559  000EA4  24F3               	addwf	prodl,w,c
  2560  000EA6  6EF6               	movwf	tblptrl,c
  2561  000EA8  0E08               	movlw	high _dpowers
  2562  000EAA  20F4               	addwfc	prodh,w,c
  2563  000EAC  6EF7               	movwf	tblptrh,c
  2564  000EAE                     	if	0	;There are less than 3 active tblptr bytes
  2565  000EAE                     	endif
  2566  000EAE  0009               	tblrd		*+
  2567  000EB0  CFF5 F005          	movff	tablat,___lldiv@divisor
  2568  000EB4  0009               	tblrd		*+
  2569  000EB6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2570  000EBA  0009               	tblrd		*+
  2571  000EBC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2572  000EC0  000A               	tblrd		*-
  2573  000EC2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2574  000EC6  EC37  F018         	call	___lldiv	;wreg free
  2575  000ECA  C001  F069         	movff	?___lldiv,sprintf@tmpval
  2576  000ECE  C002  F06A         	movff	?___lldiv+1,sprintf@tmpval+1
  2577  000ED2  C003  F06B         	movff	?___lldiv+2,sprintf@tmpval+2
  2578  000ED6  C004  F06C         	movff	?___lldiv+3,sprintf@tmpval+3
  2579                           
  2580                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2581  000EDA  C069  F00E         	movff	sprintf@tmpval,___llmod@dividend
  2582  000EDE  C06A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2583  000EE2  C06B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2584  000EE6  C06C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2585  000EEA  0E0A               	movlw	10
  2586  000EEC  6E12               	movwf	___llmod@divisor,c
  2587  000EEE  0E00               	movlw	0
  2588  000EF0  6E13               	movwf	___llmod@divisor+1,c
  2589  000EF2  0E00               	movlw	0
  2590  000EF4  6E14               	movwf	___llmod@divisor+2,c
  2591  000EF6  0E00               	movlw	0
  2592  000EF8  6E15               	movwf	___llmod@divisor+3,c
  2593  000EFA  EC23  F019         	call	___llmod	;wreg free
  2594  000EFE  C00E  F069         	movff	?___llmod,sprintf@tmpval
  2595  000F02  C00F  F06A         	movff	?___llmod+1,sprintf@tmpval+1
  2596  000F06  C010  F06B         	movff	?___llmod+2,sprintf@tmpval+2
  2597  000F0A  C011  F06C         	movff	?___llmod+3,sprintf@tmpval+3
  2598                           
  2599                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2600  000F0E  0100               	movlb	0	; () banked
  2601  000F10  5169               	movf	sprintf@tmpval& (0+255),w,b
  2602  000F12  0F30               	addlw	48
  2603  000F14  C040  FFD9         	movff	sprintf@sp,fsr2l
  2604  000F18  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2605  000F1C  6EDF               	movwf	indf2,c
  2606                           
  2607                           ; BSR set to: 0
  2608  000F1E  4A40               	infsnz	sprintf@sp,f,c
  2609  000F20  2A41               	incf	sprintf@sp+1,f,c
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;doprnt.c: 1232: val %= dpowers[c];
  2613  000F22  C06D  F00E         	movff	sprintf@val,___llmod@dividend
  2614  000F26  C06E  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  2615  000F2A  C06F  F010         	movff	sprintf@val+2,___llmod@dividend+2
  2616  000F2E  C070  F011         	movff	sprintf@val+3,___llmod@dividend+3
  2617  000F32  0100               	movlb	0	; () banked
  2618  000F34  5176               	movf	sprintf@c& (0+255),w,b
  2619  000F36  0D04               	mullw	4
  2620  000F38  0E01               	movlw	low _dpowers
  2621  000F3A  24F3               	addwf	prodl,w,c
  2622  000F3C  6EF6               	movwf	tblptrl,c
  2623  000F3E  0E08               	movlw	high _dpowers
  2624  000F40  20F4               	addwfc	prodh,w,c
  2625  000F42  6EF7               	movwf	tblptrh,c
  2626  000F44                     	if	0	;There are less than 3 active tblptr bytes
  2627  000F44                     	endif
  2628  000F44  0009               	tblrd		*+
  2629  000F46  CFF5 F012          	movff	tablat,___llmod@divisor
  2630  000F4A  0009               	tblrd		*+
  2631  000F4C  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2632  000F50  0009               	tblrd		*+
  2633  000F52  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2634  000F56  000A               	tblrd		*-
  2635  000F58  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2636  000F5C  EC23  F019         	call	___llmod	;wreg free
  2637  000F60  C00E  F06D         	movff	?___llmod,sprintf@val
  2638  000F64  C00F  F06E         	movff	?___llmod+1,sprintf@val+1
  2639  000F68  C010  F06F         	movff	?___llmod+2,sprintf@val+2
  2640  000F6C  C011  F070         	movff	?___llmod+3,sprintf@val+3
  2641  000F70                     l3292:
  2642  000F70  0100               	movlb	0	; () banked
  2643  000F72  0776               	decf	sprintf@c& (0+255),f,b
  2644  000F74  0100               	movlb	0	; () banked
  2645  000F76  2976               	incf	sprintf@c& (0+255),w,b
  2646  000F78  B4D8               	btfsc	status,2,c
  2647  000F7A  D00D               	goto	l3300
  2648  000F7C  D787               	goto	l3282
  2649  000F7E                     l3294:
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2653  000F7E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2654  000F82  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2655  000F86  0E30               	movlw	48
  2656  000F88  6EDF               	movwf	indf2,c
  2657                           
  2658                           ; BSR set to: 0
  2659  000F8A  4A40               	infsnz	sprintf@sp,f,c
  2660  000F8C  2A41               	incf	sprintf@sp+1,f,c
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;doprnt.c: 1237: prec--;
  2664  000F8E  0100               	movlb	0	; () banked
  2665  000F90  0771               	decf	sprintf@prec& (0+255),f,b
  2666  000F92  A0D8               	btfss	status,0,c
  2667  000F94  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2668  000F96                     l3300:
  2669                           
  2670                           ; BSR set to: 0
  2671  000F96  0100               	movlb	0	; () banked
  2672  000F98  5171               	movf	sprintf@prec& (0+255),w,b
  2673  000F9A  0100               	movlb	0	; () banked
  2674  000F9C  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2675  000F9E  B4D8               	btfsc	status,2,c
  2676  000FA0  D0E6               	goto	l3354
  2677  000FA2  D7ED               	goto	l3294
  2678  000FA4                     l3302:
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;doprnt.c: 1246: }
  2682                           ;doprnt.c: 1253: {
  2683                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2684  000FA4  C063  FFD9         	movff	sprintf@ap,fsr2l
  2685  000FA8  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  2686  000FAC  CFDE F06D          	movff	postinc2,sprintf@val
  2687  000FB0  CFDD F06E          	movff	postdec2,sprintf@val+1
  2688  000FB4  0100               	movlb	0	; () banked
  2689  000FB6  0E00               	movlw	0
  2690  000FB8  BF6E               	btfsc	(sprintf@val+1)& (0+255),7,b
  2691  000FBA  0EFF               	movlw	-1
  2692  000FBC  6F6F               	movwf	(sprintf@val+2)& (0+255),b
  2693  000FBE  6F70               	movwf	(sprintf@val+3)& (0+255),b
  2694                           
  2695                           ; BSR set to: 0
  2696  000FC0  0E02               	movlw	2
  2697  000FC2  0100               	movlb	0	; () banked
  2698  000FC4  2763               	addwf	sprintf@ap& (0+255),f,b
  2699  000FC6  0E00               	movlw	0
  2700  000FC8  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;doprnt.c: 1261: if((long)val < 0) {
  2704  000FCA  0100               	movlb	0	; () banked
  2705  000FCC  AF70               	btfss	(sprintf@val+3)& (0+255),7,b
  2706  000FCE  D00C               	goto	l3312
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;doprnt.c: 1262: flag |= 0x03;
  2710  000FD0  0E03               	movlw	3
  2711  000FD2  0100               	movlb	0	; () banked
  2712  000FD4  1365               	iorwf	sprintf@flag& (0+255),f,b
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;doprnt.c: 1263: val = -val;
  2716  000FD6  0100               	movlb	0	; () banked
  2717  000FD8  1F70               	comf	(sprintf@val+3)& (0+255),f,b
  2718  000FDA  1F6F               	comf	(sprintf@val+2)& (0+255),f,b
  2719  000FDC  1F6E               	comf	(sprintf@val+1)& (0+255),f,b
  2720  000FDE  6D6D               	negf	sprintf@val& (0+255),b
  2721  000FE0  0E00               	movlw	0
  2722  000FE2  236E               	addwfc	(sprintf@val+1)& (0+255),f,b
  2723  000FE4  236F               	addwfc	(sprintf@val+2)& (0+255),f,b
  2724  000FE6  2370               	addwfc	(sprintf@val+3)& (0+255),f,b
  2725  000FE8                     l3312:
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;doprnt.c: 1264: }
  2729                           ;doprnt.c: 1266: }
  2730                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2731  000FE8  0100               	movlb	0	; () banked
  2732  000FEA  5171               	movf	sprintf@prec& (0+255),w,b
  2733  000FEC  0100               	movlb	0	; () banked
  2734  000FEE  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2735  000FF0  A4D8               	btfss	status,2,c
  2736  000FF2  D00D               	goto	l3318
  2737                           
  2738                           ; BSR set to: 0
  2739  000FF4  0100               	movlb	0	; () banked
  2740  000FF6  516D               	movf	sprintf@val& (0+255),w,b
  2741  000FF8  0100               	movlb	0	; () banked
  2742  000FFA  116E               	iorwf	(sprintf@val+1)& (0+255),w,b
  2743  000FFC  0100               	movlb	0	; () banked
  2744  000FFE  116F               	iorwf	(sprintf@val+2)& (0+255),w,b
  2745  001000  0100               	movlb	0	; () banked
  2746  001002  1170               	iorwf	(sprintf@val+3)& (0+255),w,b
  2747  001004  A4D8               	btfss	status,2,c
  2748  001006  D003               	goto	l3318
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;doprnt.c: 1291: prec++;
  2752  001008  0100               	movlb	0	; () banked
  2753  00100A  4B71               	infsnz	sprintf@prec& (0+255),f,b
  2754  00100C  2B72               	incf	(sprintf@prec+1)& (0+255),f,b
  2755  00100E                     l3318:
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2759  00100E  0E01               	movlw	1
  2760  001010  0100               	movlb	0	; () banked
  2761  001012  6F76               	movwf	sprintf@c& (0+255),b
  2762  001014                     l3320:
  2763                           
  2764                           ; BSR set to: 0
  2765  001014  0E0A               	movlw	10
  2766  001016  0100               	movlb	0	; () banked
  2767  001018  1976               	xorwf	sprintf@c& (0+255),w,b
  2768  00101A  B4D8               	btfsc	status,2,c
  2769  00101C  D01E               	goto	l3332
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;doprnt.c: 1306: if(val < dpowers[c])
  2773                           
  2774                           ; BSR set to: 0
  2775                           
  2776                           ; BSR set to: 0
  2777  00101E  0100               	movlb	0	; () banked
  2778  001020  5176               	movf	sprintf@c& (0+255),w,b
  2779  001022  0D04               	mullw	4
  2780  001024  0E01               	movlw	low _dpowers
  2781  001026  24F3               	addwf	prodl,w,c
  2782  001028  6EF6               	movwf	tblptrl,c
  2783  00102A  0E08               	movlw	high _dpowers
  2784  00102C  20F4               	addwfc	prodh,w,c
  2785  00102E  6EF7               	movwf	tblptrh,c
  2786  001030                     	if	0	;There are less than 3 active tblptr bytes
  2787  001030                     	endif
  2788  001030  0009               	tblrd		*+
  2789  001032  50F5               	movf	tablat,w,c
  2790  001034  0100               	movlb	0	; () banked
  2791  001036  5D6D               	subwf	sprintf@val& (0+255),w,b
  2792  001038  0009               	tblrd		*+
  2793  00103A  50F5               	movf	tablat,w,c
  2794  00103C  0100               	movlb	0	; () banked
  2795  00103E  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  2796  001040  0009               	tblrd		*+
  2797  001042  50F5               	movf	tablat,w,c
  2798  001044  0100               	movlb	0	; () banked
  2799  001046  596F               	subwfb	(sprintf@val+2)& (0+255),w,b
  2800  001048  0009               	tblrd		*+
  2801  00104A  50F5               	movf	tablat,w,c
  2802  00104C  0100               	movlb	0	; () banked
  2803  00104E  5970               	subwfb	(sprintf@val+3)& (0+255),w,b
  2804  001050  A0D8               	btfss	status,0,c
  2805  001052  D003               	goto	l3332
  2806                           
  2807                           ; BSR set to: 0
  2808                           
  2809                           ; BSR set to: 0
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;doprnt.c: 1307: break;
  2813  001054  0100               	movlb	0	; () banked
  2814  001056  2B76               	incf	sprintf@c& (0+255),f,b
  2815  001058  D7DD               	goto	l3320
  2816  00105A                     l3332:
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;doprnt.c: 1339: if(c < prec)
  2820  00105A  0E80               	movlw	128
  2821  00105C  0100               	movlb	0	; () banked
  2822  00105E  BF76               	btfsc	sprintf@c& (0+255),7,b
  2823  001060  0E7F               	movlw	127
  2824  001062  6E47               	movwf	??_sprintf& (0+255),c
  2825  001064  0100               	movlb	0	; () banked
  2826  001066  5171               	movf	sprintf@prec& (0+255),w,b
  2827  001068  0100               	movlb	0	; () banked
  2828  00106A  5D76               	subwf	sprintf@c& (0+255),w,b
  2829  00106C  0100               	movlb	0	; () banked
  2830  00106E  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2831  001070  0A80               	xorlw	128
  2832  001072  5847               	subwfb	??_sprintf& (0+255),w,c
  2833  001074  B0D8               	btfsc	status,0,c
  2834  001076  D003               	goto	l3336
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;doprnt.c: 1340: c = prec;
  2838  001078  C071  F076         	movff	sprintf@prec,sprintf@c
  2839  00107C  D016               	goto	l3340
  2840  00107E                     l3336:
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;doprnt.c: 1341: else if(prec < c)
  2844  00107E  0100               	movlb	0	; () banked
  2845  001080  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2846  001082  0A80               	xorlw	128
  2847  001084  6E47               	movwf	??_sprintf& (0+255),c
  2848  001086  0100               	movlb	0	; () banked
  2849  001088  5176               	movf	sprintf@c& (0+255),w,b
  2850  00108A  0100               	movlb	0	; () banked
  2851  00108C  5D71               	subwf	sprintf@prec& (0+255),w,b
  2852  00108E  0E80               	movlw	128
  2853  001090  0100               	movlb	0	; () banked
  2854  001092  BF76               	btfsc	sprintf@c& (0+255),7,b
  2855  001094  0E7F               	movlw	127
  2856  001096  5847               	subwfb	??_sprintf& (0+255),w,c
  2857  001098  B0D8               	btfsc	status,0,c
  2858  00109A  D007               	goto	l3340
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;doprnt.c: 1342: prec = c;
  2862  00109C  0100               	movlb	0	; () banked
  2863  00109E  5176               	movf	sprintf@c& (0+255),w,b
  2864  0010A0  0100               	movlb	0	; () banked
  2865  0010A2  6F71               	movwf	sprintf@prec& (0+255),b
  2866  0010A4  6B72               	clrf	(sprintf@prec+1)& (0+255),b
  2867  0010A6  BF71               	btfsc	sprintf@prec& (0+255),7,b
  2868  0010A8  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2869  0010AA                     l3340:
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;doprnt.c: 1422: {
  2873                           ;doprnt.c: 1438: if(flag & 0x03)
  2874  0010AA  0E03               	movlw	3
  2875  0010AC  0100               	movlb	0	; () banked
  2876  0010AE  1565               	andwf	sprintf@flag& (0+255),w,b
  2877  0010B0  6E47               	movwf	??_sprintf& (0+255),c
  2878  0010B2  0E00               	movlw	0
  2879  0010B4  0100               	movlb	0	; () banked
  2880  0010B6  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2881  0010B8  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2882  0010BA  5047               	movf	??_sprintf,w,c
  2883  0010BC  1048               	iorwf	??_sprintf+1,w,c
  2884  0010BE  B4D8               	btfsc	status,2,c
  2885  0010C0  D04B               	goto	l3352
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2889  0010C2  C040  FFD9         	movff	sprintf@sp,fsr2l
  2890  0010C6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2891  0010CA  0E2D               	movlw	45
  2892  0010CC  6EDF               	movwf	indf2,c
  2893  0010CE  D042               	goto	l3350
  2894  0010D0                     l3346:
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;doprnt.c: 1478: {
  2898                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2899  0010D0  C071  F047         	movff	sprintf@prec,??_sprintf
  2900  0010D4  C072  F048         	movff	sprintf@prec+1,??_sprintf+1
  2901  0010D8  90D8               	bcf	status,0,c
  2902  0010DA  3647               	rlcf	??_sprintf,f,c
  2903  0010DC  3648               	rlcf	??_sprintf+1,f,c
  2904  0010DE  90D8               	bcf	status,0,c
  2905  0010E0  3647               	rlcf	??_sprintf,f,c
  2906  0010E2  3648               	rlcf	??_sprintf+1,f,c
  2907  0010E4  0E01               	movlw	low _dpowers
  2908  0010E6  2447               	addwf	??_sprintf,w,c
  2909  0010E8  6EF6               	movwf	tblptrl,c
  2910  0010EA  0E08               	movlw	high _dpowers
  2911  0010EC  2048               	addwfc	??_sprintf+1,w,c
  2912  0010EE  6EF7               	movwf	tblptrh,c
  2913  0010F0                     	if	0	;There are less than 3 active tblptr bytes
  2914  0010F0                     	endif
  2915  0010F0  0009               	tblrd		*+
  2916  0010F2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2917  0010F6  0009               	tblrd		*+
  2918  0010F8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2919  0010FC  0009               	tblrd		*+
  2920  0010FE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2921  001102  000A               	tblrd		*-
  2922  001104  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2923  001108  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  2924  00110C  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2925  001110  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2926  001114  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2927  001118  EC37  F018         	call	___lldiv	;wreg free
  2928  00111C  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2929  001120  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2930  001124  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2931  001128  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2932  00112C  0E0A               	movlw	10
  2933  00112E  6E12               	movwf	___llmod@divisor,c
  2934  001130  0E00               	movlw	0
  2935  001132  6E13               	movwf	___llmod@divisor+1,c
  2936  001134  0E00               	movlw	0
  2937  001136  6E14               	movwf	___llmod@divisor+2,c
  2938  001138  0E00               	movlw	0
  2939  00113A  6E15               	movwf	___llmod@divisor+3,c
  2940  00113C  EC23  F019         	call	___llmod	;wreg free
  2941  001140  500E               	movf	?___llmod,w,c
  2942  001142  0F30               	addlw	48
  2943  001144  0100               	movlb	0	; () banked
  2944  001146  6F76               	movwf	sprintf@c& (0+255),b
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;doprnt.c: 1523: }
  2948                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2949  001148  C040  FFD9         	movff	sprintf@sp,fsr2l
  2950  00114C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2951  001150  C076  FFDF         	movff	sprintf@c,indf2
  2952  001154                     l3350:
  2953                           
  2954                           ; BSR set to: 0
  2955  001154  4A40               	infsnz	sprintf@sp,f,c
  2956  001156  2A41               	incf	sprintf@sp+1,f,c
  2957  001158                     l3352:
  2958                           
  2959                           ; BSR set to: 0
  2960  001158  0100               	movlb	0	; () banked
  2961  00115A  0771               	decf	sprintf@prec& (0+255),f,b
  2962  00115C  A0D8               	btfss	status,0,c
  2963  00115E  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2964  001160  0100               	movlb	0	; () banked
  2965  001162  2971               	incf	sprintf@prec& (0+255),w,b
  2966  001164  E1B5               	bnz	l3346
  2967  001166  0100               	movlb	0	; () banked
  2968  001168  2972               	incf	(sprintf@prec+1)& (0+255),w,b
  2969  00116A  A4D8               	btfss	status,2,c
  2970  00116C  D7B1               	goto	l3346
  2971  00116E                     l3354:
  2972                           
  2973                           ; BSR set to: 0
  2974  00116E  C042  FFF6         	movff	sprintf@f,tblptrl
  2975  001172  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2976  001176  4A42               	infsnz	sprintf@f,f,c
  2977  001178  2A43               	incf	sprintf@f+1,f,c
  2978  00117A                     	if	0	;tblptru may be non-zero
  2979  00117A                     	endif
  2980  00117A                     	if	0	;tblptru may be non-zero
  2981  00117A                     	endif
  2982  00117A  0008               	tblrd		*
  2983  00117C  CFF5 F076          	movff	tablat,sprintf@c
  2984  001180  0100               	movlb	0	; () banked
  2985  001182  5176               	movf	sprintf@c& (0+255),w,b
  2986  001184  A4D8               	btfss	status,2,c
  2987  001186  EF55  F004         	goto	l3124
  2988  00118A                     l3356:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;doprnt.c: 1538: *sp = 0;
  2992  00118A  C040  FFD9         	movff	sprintf@sp,fsr2l
  2993  00118E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2994  001192  0E00               	movlw	0
  2995  001194  6EDF               	movwf	indf2,c
  2996  001196  0012               	return	
  2997  001198                     __end_of_sprintf:
  2998                           	opt stack 0
  2999                           tblptru	equ	0xFF8
  3000                           tblptrh	equ	0xFF7
  3001                           tblptrl	equ	0xFF6
  3002                           tablat	equ	0xFF5
  3003                           prodh	equ	0xFF4
  3004                           prodl	equ	0xFF3
  3005                           wreg	equ	0xFE8
  3006                           indf2	equ	0xFDF
  3007                           postinc2	equ	0xFDE
  3008                           postdec2	equ	0xFDD
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function _scale *****************
  3014 ;; Defined at:
  3015 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  scl             1    wreg     char 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  scl             1   41[COMRAM] char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  3   35[COMRAM] char 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3029 ;;      Params:         3       0       0       0       0       0       0       0       0
  3030 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3032 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3033 ;;Total ram usage:        7 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    2
  3036 ;; This function calls:
  3037 ;;		___awdiv
  3038 ;;		___awmod
  3039 ;;		___ftmul
  3040 ;;		___wmul
  3041 ;; This function is called by:
  3042 ;;		_sprintf
  3043 ;; This function uses a non-reentrant model
  3044 ;;
  3045                           
  3046                           	psect	text5
  3047  0015DE                     __ptext5:
  3048                           	opt stack 0
  3049  0015DE                     _scale:
  3050                           	opt stack 25
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;incstack = 0
  3054                           ;scale@scl stored from wreg
  3055  0015DE  6E2A               	movwf	scale@scl,c
  3056                           
  3057                           ;doprnt.c: 428: if(scl < 0) {
  3058  0015E0  AE2A               	btfss	scale@scl,7,c
  3059  0015E2  D0FB               	goto	l2788
  3060                           
  3061                           ;doprnt.c: 429: scl = -scl;
  3062  0015E4  6C2A               	negf	scale@scl,c
  3063                           
  3064                           ;doprnt.c: 430: if(scl>=110)
  3065  0015E6  502A               	movf	scale@scl,w,c
  3066  0015E8  0A80               	xorlw	128
  3067  0015EA  0F12               	addlw	-238
  3068  0015EC  A0D8               	btfss	status,0,c
  3069  0015EE  D091               	goto	l2778
  3070                           
  3071                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3072  0015F0  0E00               	movlw	0
  3073  0015F2  6E12               	movwf	___wmul@multiplicand+1,c
  3074  0015F4  0E03               	movlw	3
  3075  0015F6  6E11               	movwf	___wmul@multiplicand,c
  3076  0015F8  0E00               	movlw	0
  3077  0015FA  6E0A               	movwf	___awdiv@divisor+1,c
  3078  0015FC  0E0A               	movlw	10
  3079  0015FE  6E09               	movwf	___awdiv@divisor,c
  3080  001600  0E00               	movlw	0
  3081  001602  6E04               	movwf	___awmod@divisor+1,c
  3082  001604  0E64               	movlw	100
  3083  001606  6E03               	movwf	___awmod@divisor,c
  3084  001608  502A               	movf	scale@scl,w,c
  3085  00160A  6E01               	movwf	___awmod@dividend,c
  3086  00160C  6A02               	clrf	___awmod@dividend+1,c
  3087  00160E  BE01               	btfsc	___awmod@dividend,7,c
  3088  001610  0602               	decf	___awmod@dividend+1,f,c
  3089  001612  ECEB  F018         	call	___awmod	;wreg free
  3090  001616  C001  F007         	movff	?___awmod,___awdiv@dividend
  3091  00161A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3092  00161E  ECF5  F017         	call	___awdiv	;wreg free
  3093  001622  0E09               	movlw	9
  3094  001624  2407               	addwf	?___awdiv,w,c
  3095  001626  6E0F               	movwf	___wmul@multiplier,c
  3096  001628  0E00               	movlw	0
  3097  00162A  2008               	addwfc	?___awdiv+1,w,c
  3098  00162C  6E10               	movwf	___wmul@multiplier+1,c
  3099  00162E  ECD6  F01A         	call	___wmul	;wreg free
  3100  001632  0E29               	movlw	low __npowers_
  3101  001634  240F               	addwf	?___wmul,w,c
  3102  001636  6EF6               	movwf	tblptrl,c
  3103  001638  0E08               	movlw	high __npowers_
  3104  00163A  2010               	addwfc	?___wmul+1,w,c
  3105  00163C  6EF7               	movwf	tblptrh,c
  3106  00163E                     	if	0	;There are less than 3 active tblptr bytes
  3107  00163E                     	endif
  3108  00163E  0009               	tblrd		*+
  3109  001640  CFF5 F018          	movff	tablat,___ftmul@f2
  3110  001644  0009               	tblrd		*+
  3111  001646  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3112  00164A  000A               	tblrd		*-
  3113  00164C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3114  001650  0E00               	movlw	0
  3115  001652  6E0A               	movwf	___awdiv@divisor+1,c
  3116  001654  0E64               	movlw	100
  3117  001656  6E09               	movwf	___awdiv@divisor,c
  3118  001658  502A               	movf	scale@scl,w,c
  3119  00165A  6E07               	movwf	___awdiv@dividend,c
  3120  00165C  6A08               	clrf	___awdiv@dividend+1,c
  3121  00165E  BE07               	btfsc	___awdiv@dividend,7,c
  3122  001660  0608               	decf	___awdiv@dividend+1,f,c
  3123  001662  ECF5  F017         	call	___awdiv	;wreg free
  3124  001666  0E12               	movlw	18
  3125  001668  2407               	addwf	?___awdiv,w,c
  3126  00166A  6E0F               	movwf	___wmul@multiplier,c
  3127  00166C  0E00               	movlw	0
  3128  00166E  2008               	addwfc	?___awdiv+1,w,c
  3129  001670  6E10               	movwf	___wmul@multiplier+1,c
  3130  001672  0E00               	movlw	0
  3131  001674  6E12               	movwf	___wmul@multiplicand+1,c
  3132  001676  0E03               	movlw	3
  3133  001678  6E11               	movwf	___wmul@multiplicand,c
  3134  00167A  ECD6  F01A         	call	___wmul	;wreg free
  3135  00167E  0E29               	movlw	low __npowers_
  3136  001680  240F               	addwf	?___wmul,w,c
  3137  001682  6EF6               	movwf	tblptrl,c
  3138  001684  0E08               	movlw	high __npowers_
  3139  001686  2010               	addwfc	?___wmul+1,w,c
  3140  001688  6EF7               	movwf	tblptrh,c
  3141  00168A                     	if	0	;There are less than 3 active tblptr bytes
  3142  00168A                     	endif
  3143  00168A  0009               	tblrd		*+
  3144  00168C  CFF5 F015          	movff	tablat,___ftmul@f1
  3145  001690  0009               	tblrd		*+
  3146  001692  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3147  001696  000A               	tblrd		*-
  3148  001698  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3149  00169C  EC39  F015         	call	___ftmul	;wreg free
  3150  0016A0  C015  F027         	movff	?___ftmul,_scale$1525
  3151  0016A4  C016  F028         	movff	?___ftmul+1,_scale$1525+1
  3152  0016A8  C017  F029         	movff	?___ftmul+2,_scale$1525+2
  3153                           
  3154                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3155  0016AC  C027  F015         	movff	_scale$1525,___ftmul@f1
  3156  0016B0  C028  F016         	movff	_scale$1525+1,___ftmul@f1+1
  3157  0016B4  C029  F017         	movff	_scale$1525+2,___ftmul@f1+2
  3158  0016B8  0E00               	movlw	0
  3159  0016BA  6E12               	movwf	___wmul@multiplicand+1,c
  3160  0016BC  0E03               	movlw	3
  3161  0016BE  6E11               	movwf	___wmul@multiplicand,c
  3162  0016C0  0E00               	movlw	0
  3163  0016C2  6E04               	movwf	___awmod@divisor+1,c
  3164  0016C4  0E0A               	movlw	10
  3165  0016C6  6E03               	movwf	___awmod@divisor,c
  3166  0016C8  502A               	movf	scale@scl,w,c
  3167  0016CA  6E01               	movwf	___awmod@dividend,c
  3168  0016CC  6A02               	clrf	___awmod@dividend+1,c
  3169  0016CE  BE01               	btfsc	___awmod@dividend,7,c
  3170  0016D0  0602               	decf	___awmod@dividend+1,f,c
  3171  0016D2  ECEB  F018         	call	___awmod	;wreg free
  3172  0016D6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3173  0016DA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3174  0016DE  ECD6  F01A         	call	___wmul	;wreg free
  3175  0016E2  0E29               	movlw	low __npowers_
  3176  0016E4  240F               	addwf	?___wmul,w,c
  3177  0016E6  6EF6               	movwf	tblptrl,c
  3178  0016E8  0E08               	movlw	high __npowers_
  3179  0016EA  2010               	addwfc	?___wmul+1,w,c
  3180  0016EC  6EF7               	movwf	tblptrh,c
  3181  0016EE                     	if	0	;There are less than 3 active tblptr bytes
  3182  0016EE                     	endif
  3183  0016EE  0009               	tblrd		*+
  3184  0016F0  CFF5 F018          	movff	tablat,___ftmul@f2
  3185  0016F4  0009               	tblrd		*+
  3186  0016F6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3187  0016FA  000A               	tblrd		*-
  3188  0016FC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3189  001700  EC39  F015         	call	___ftmul	;wreg free
  3190  001704  C015  F024         	movff	?___ftmul,?_scale
  3191  001708  C016  F025         	movff	?___ftmul+1,?_scale+1
  3192  00170C  C017  F026         	movff	?___ftmul+2,?_scale+2
  3193  001710  0012               	return	
  3194  001712                     l2778:
  3195                           
  3196                           ;doprnt.c: 432: else if(scl > 10)
  3197  001712  502A               	movf	scale@scl,w,c
  3198  001714  0A80               	xorlw	128
  3199  001716  0F75               	addlw	-139
  3200  001718  A0D8               	btfss	status,0,c
  3201  00171A  D04D               	goto	l2784
  3202                           
  3203                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3204  00171C  0E00               	movlw	0
  3205  00171E  6E0A               	movwf	___awdiv@divisor+1,c
  3206  001720  0E0A               	movlw	10
  3207  001722  6E09               	movwf	___awdiv@divisor,c
  3208  001724  502A               	movf	scale@scl,w,c
  3209  001726  6E07               	movwf	___awdiv@dividend,c
  3210  001728  6A08               	clrf	___awdiv@dividend+1,c
  3211  00172A  BE07               	btfsc	___awdiv@dividend,7,c
  3212  00172C  0608               	decf	___awdiv@dividend+1,f,c
  3213  00172E  ECF5  F017         	call	___awdiv	;wreg free
  3214  001732  0E09               	movlw	9
  3215  001734  2407               	addwf	?___awdiv,w,c
  3216  001736  6E0F               	movwf	___wmul@multiplier,c
  3217  001738  0E00               	movlw	0
  3218  00173A  2008               	addwfc	?___awdiv+1,w,c
  3219  00173C  6E10               	movwf	___wmul@multiplier+1,c
  3220  00173E  0E00               	movlw	0
  3221  001740  6E12               	movwf	___wmul@multiplicand+1,c
  3222  001742  0E03               	movlw	3
  3223  001744  6E11               	movwf	___wmul@multiplicand,c
  3224  001746  ECD6  F01A         	call	___wmul	;wreg free
  3225  00174A  0E29               	movlw	low __npowers_
  3226  00174C  240F               	addwf	?___wmul,w,c
  3227  00174E  6EF6               	movwf	tblptrl,c
  3228  001750  0E08               	movlw	high __npowers_
  3229  001752  2010               	addwfc	?___wmul+1,w,c
  3230  001754  6EF7               	movwf	tblptrh,c
  3231  001756                     	if	0	;There are less than 3 active tblptr bytes
  3232  001756                     	endif
  3233  001756  0009               	tblrd		*+
  3234  001758  CFF5 F015          	movff	tablat,___ftmul@f1
  3235  00175C  0009               	tblrd		*+
  3236  00175E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3237  001762  000A               	tblrd		*-
  3238  001764  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3239  001768  0E00               	movlw	0
  3240  00176A  6E12               	movwf	___wmul@multiplicand+1,c
  3241  00176C  0E03               	movlw	3
  3242  00176E  6E11               	movwf	___wmul@multiplicand,c
  3243  001770  0E00               	movlw	0
  3244  001772  6E04               	movwf	___awmod@divisor+1,c
  3245  001774  0E0A               	movlw	10
  3246  001776  6E03               	movwf	___awmod@divisor,c
  3247  001778  502A               	movf	scale@scl,w,c
  3248  00177A  6E01               	movwf	___awmod@dividend,c
  3249  00177C  6A02               	clrf	___awmod@dividend+1,c
  3250  00177E  BE01               	btfsc	___awmod@dividend,7,c
  3251  001780  0602               	decf	___awmod@dividend+1,f,c
  3252  001782  ECEB  F018         	call	___awmod	;wreg free
  3253  001786  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3254  00178A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3255  00178E  ECD6  F01A         	call	___wmul	;wreg free
  3256  001792  0E29               	movlw	low __npowers_
  3257  001794  240F               	addwf	?___wmul,w,c
  3258  001796  6EF6               	movwf	tblptrl,c
  3259  001798  0E08               	movlw	high __npowers_
  3260  00179A  2010               	addwfc	?___wmul+1,w,c
  3261  00179C  6EF7               	movwf	tblptrh,c
  3262  00179E                     	if	0	;There are less than 3 active tblptr bytes
  3263  00179E                     	endif
  3264  00179E  0009               	tblrd		*+
  3265  0017A0  CFF5 F018          	movff	tablat,___ftmul@f2
  3266  0017A4  0009               	tblrd		*+
  3267  0017A6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3268  0017AA  000A               	tblrd		*-
  3269  0017AC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3270  0017B0  EC39  F015         	call	___ftmul	;wreg free
  3271  0017B4  D7A7               	goto	L4
  3272  0017B6                     l2784:
  3273                           
  3274                           ;doprnt.c: 434: return _npowers_[scl];
  3275  0017B6  502A               	movf	scale@scl,w,c
  3276  0017B8  0D03               	mullw	3
  3277  0017BA  0E29               	movlw	low __npowers_
  3278  0017BC  24F3               	addwf	prodl,w,c
  3279  0017BE  6EF6               	movwf	tblptrl,c
  3280  0017C0  0E08               	movlw	high __npowers_
  3281  0017C2  20F4               	addwfc	prodh,w,c
  3282  0017C4  6EF7               	movwf	tblptrh,c
  3283  0017C6                     	if	0	;There are less than 3 active tblptr bytes
  3284  0017C6                     	endif
  3285  0017C6  0009               	tblrd		*+
  3286  0017C8  CFF5 F024          	movff	tablat,?_scale
  3287  0017CC  0009               	tblrd		*+
  3288  0017CE  CFF5 F025          	movff	tablat,?_scale+1
  3289  0017D2  000A               	tblrd		*-
  3290  0017D4  CFF5 F026          	movff	tablat,?_scale+2
  3291  0017D8  0012               	return	
  3292  0017DA                     l2788:
  3293                           
  3294                           ;doprnt.c: 435: }
  3295                           ;doprnt.c: 436: if(scl>=110)
  3296  0017DA  502A               	movf	scale@scl,w,c
  3297  0017DC  0A80               	xorlw	128
  3298  0017DE  0F12               	addlw	-238
  3299  0017E0  A0D8               	btfss	status,0,c
  3300  0017E2  D091               	goto	l2796
  3301                           
  3302                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3303  0017E4  0E00               	movlw	0
  3304  0017E6  6E12               	movwf	___wmul@multiplicand+1,c
  3305  0017E8  0E03               	movlw	3
  3306  0017EA  6E11               	movwf	___wmul@multiplicand,c
  3307  0017EC  0E00               	movlw	0
  3308  0017EE  6E0A               	movwf	___awdiv@divisor+1,c
  3309  0017F0  0E0A               	movlw	10
  3310  0017F2  6E09               	movwf	___awdiv@divisor,c
  3311  0017F4  0E00               	movlw	0
  3312  0017F6  6E04               	movwf	___awmod@divisor+1,c
  3313  0017F8  0E64               	movlw	100
  3314  0017FA  6E03               	movwf	___awmod@divisor,c
  3315  0017FC  502A               	movf	scale@scl,w,c
  3316  0017FE  6E01               	movwf	___awmod@dividend,c
  3317  001800  6A02               	clrf	___awmod@dividend+1,c
  3318  001802  BE01               	btfsc	___awmod@dividend,7,c
  3319  001804  0602               	decf	___awmod@dividend+1,f,c
  3320  001806  ECEB  F018         	call	___awmod	;wreg free
  3321  00180A  C001  F007         	movff	?___awmod,___awdiv@dividend
  3322  00180E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3323  001812  ECF5  F017         	call	___awdiv	;wreg free
  3324  001816  0E09               	movlw	9
  3325  001818  2407               	addwf	?___awdiv,w,c
  3326  00181A  6E0F               	movwf	___wmul@multiplier,c
  3327  00181C  0E00               	movlw	0
  3328  00181E  2008               	addwfc	?___awdiv+1,w,c
  3329  001820  6E10               	movwf	___wmul@multiplier+1,c
  3330  001822  ECD6  F01A         	call	___wmul	;wreg free
  3331  001826  0E50               	movlw	low __powers_
  3332  001828  240F               	addwf	?___wmul,w,c
  3333  00182A  6EF6               	movwf	tblptrl,c
  3334  00182C  0E08               	movlw	high __powers_
  3335  00182E  2010               	addwfc	?___wmul+1,w,c
  3336  001830  6EF7               	movwf	tblptrh,c
  3337  001832                     	if	0	;There are less than 3 active tblptr bytes
  3338  001832                     	endif
  3339  001832  0009               	tblrd		*+
  3340  001834  CFF5 F018          	movff	tablat,___ftmul@f2
  3341  001838  0009               	tblrd		*+
  3342  00183A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3343  00183E  000A               	tblrd		*-
  3344  001840  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3345  001844  0E00               	movlw	0
  3346  001846  6E0A               	movwf	___awdiv@divisor+1,c
  3347  001848  0E64               	movlw	100
  3348  00184A  6E09               	movwf	___awdiv@divisor,c
  3349  00184C  502A               	movf	scale@scl,w,c
  3350  00184E  6E07               	movwf	___awdiv@dividend,c
  3351  001850  6A08               	clrf	___awdiv@dividend+1,c
  3352  001852  BE07               	btfsc	___awdiv@dividend,7,c
  3353  001854  0608               	decf	___awdiv@dividend+1,f,c
  3354  001856  ECF5  F017         	call	___awdiv	;wreg free
  3355  00185A  0E12               	movlw	18
  3356  00185C  2407               	addwf	?___awdiv,w,c
  3357  00185E  6E0F               	movwf	___wmul@multiplier,c
  3358  001860  0E00               	movlw	0
  3359  001862  2008               	addwfc	?___awdiv+1,w,c
  3360  001864  6E10               	movwf	___wmul@multiplier+1,c
  3361  001866  0E00               	movlw	0
  3362  001868  6E12               	movwf	___wmul@multiplicand+1,c
  3363  00186A  0E03               	movlw	3
  3364  00186C  6E11               	movwf	___wmul@multiplicand,c
  3365  00186E  ECD6  F01A         	call	___wmul	;wreg free
  3366  001872  0E50               	movlw	low __powers_
  3367  001874  240F               	addwf	?___wmul,w,c
  3368  001876  6EF6               	movwf	tblptrl,c
  3369  001878  0E08               	movlw	high __powers_
  3370  00187A  2010               	addwfc	?___wmul+1,w,c
  3371  00187C  6EF7               	movwf	tblptrh,c
  3372  00187E                     	if	0	;There are less than 3 active tblptr bytes
  3373  00187E                     	endif
  3374  00187E  0009               	tblrd		*+
  3375  001880  CFF5 F015          	movff	tablat,___ftmul@f1
  3376  001884  0009               	tblrd		*+
  3377  001886  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3378  00188A  000A               	tblrd		*-
  3379  00188C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3380  001890  EC39  F015         	call	___ftmul	;wreg free
  3381  001894  C015  F027         	movff	?___ftmul,_scale$1525
  3382  001898  C016  F028         	movff	?___ftmul+1,_scale$1525+1
  3383  00189C  C017  F029         	movff	?___ftmul+2,_scale$1525+2
  3384                           
  3385                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3386  0018A0  C027  F015         	movff	_scale$1525,___ftmul@f1
  3387  0018A4  C028  F016         	movff	_scale$1525+1,___ftmul@f1+1
  3388  0018A8  C029  F017         	movff	_scale$1525+2,___ftmul@f1+2
  3389  0018AC  0E00               	movlw	0
  3390  0018AE  6E12               	movwf	___wmul@multiplicand+1,c
  3391  0018B0  0E03               	movlw	3
  3392  0018B2  6E11               	movwf	___wmul@multiplicand,c
  3393  0018B4  0E00               	movlw	0
  3394  0018B6  6E04               	movwf	___awmod@divisor+1,c
  3395  0018B8  0E0A               	movlw	10
  3396  0018BA  6E03               	movwf	___awmod@divisor,c
  3397  0018BC  502A               	movf	scale@scl,w,c
  3398  0018BE  6E01               	movwf	___awmod@dividend,c
  3399  0018C0  6A02               	clrf	___awmod@dividend+1,c
  3400  0018C2  BE01               	btfsc	___awmod@dividend,7,c
  3401  0018C4  0602               	decf	___awmod@dividend+1,f,c
  3402  0018C6  ECEB  F018         	call	___awmod	;wreg free
  3403  0018CA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3404  0018CE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3405  0018D2  ECD6  F01A         	call	___wmul	;wreg free
  3406  0018D6  0E50               	movlw	low __powers_
  3407  0018D8  240F               	addwf	?___wmul,w,c
  3408  0018DA  6EF6               	movwf	tblptrl,c
  3409  0018DC  0E08               	movlw	high __powers_
  3410  0018DE  2010               	addwfc	?___wmul+1,w,c
  3411  0018E0  6EF7               	movwf	tblptrh,c
  3412  0018E2                     	if	0	;There are less than 3 active tblptr bytes
  3413  0018E2                     	endif
  3414  0018E2  0009               	tblrd		*+
  3415  0018E4  CFF5 F018          	movff	tablat,___ftmul@f2
  3416  0018E8  0009               	tblrd		*+
  3417  0018EA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3418  0018EE  000A               	tblrd		*-
  3419  0018F0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3420  0018F4  EC39  F015         	call	___ftmul	;wreg free
  3421  0018F8  C015  F024         	movff	?___ftmul,?_scale
  3422  0018FC  C016  F025         	movff	?___ftmul+1,?_scale+1
  3423  001900  C017  F026         	movff	?___ftmul+2,?_scale+2
  3424  001904  0012               	return	
  3425  001906                     l2796:
  3426                           
  3427                           ;doprnt.c: 438: else if(scl > 10)
  3428  001906  502A               	movf	scale@scl,w,c
  3429  001908  0A80               	xorlw	128
  3430  00190A  0F75               	addlw	-139
  3431  00190C  A0D8               	btfss	status,0,c
  3432  00190E  D04D               	goto	l2802
  3433                           
  3434                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3435  001910  0E00               	movlw	0
  3436  001912  6E0A               	movwf	___awdiv@divisor+1,c
  3437  001914  0E0A               	movlw	10
  3438  001916  6E09               	movwf	___awdiv@divisor,c
  3439  001918  502A               	movf	scale@scl,w,c
  3440  00191A  6E07               	movwf	___awdiv@dividend,c
  3441  00191C  6A08               	clrf	___awdiv@dividend+1,c
  3442  00191E  BE07               	btfsc	___awdiv@dividend,7,c
  3443  001920  0608               	decf	___awdiv@dividend+1,f,c
  3444  001922  ECF5  F017         	call	___awdiv	;wreg free
  3445  001926  0E09               	movlw	9
  3446  001928  2407               	addwf	?___awdiv,w,c
  3447  00192A  6E0F               	movwf	___wmul@multiplier,c
  3448  00192C  0E00               	movlw	0
  3449  00192E  2008               	addwfc	?___awdiv+1,w,c
  3450  001930  6E10               	movwf	___wmul@multiplier+1,c
  3451  001932  0E00               	movlw	0
  3452  001934  6E12               	movwf	___wmul@multiplicand+1,c
  3453  001936  0E03               	movlw	3
  3454  001938  6E11               	movwf	___wmul@multiplicand,c
  3455  00193A  ECD6  F01A         	call	___wmul	;wreg free
  3456  00193E  0E50               	movlw	low __powers_
  3457  001940  240F               	addwf	?___wmul,w,c
  3458  001942  6EF6               	movwf	tblptrl,c
  3459  001944  0E08               	movlw	high __powers_
  3460  001946  2010               	addwfc	?___wmul+1,w,c
  3461  001948  6EF7               	movwf	tblptrh,c
  3462  00194A                     	if	0	;There are less than 3 active tblptr bytes
  3463  00194A                     	endif
  3464  00194A  0009               	tblrd		*+
  3465  00194C  CFF5 F015          	movff	tablat,___ftmul@f1
  3466  001950  0009               	tblrd		*+
  3467  001952  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3468  001956  000A               	tblrd		*-
  3469  001958  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3470  00195C  0E00               	movlw	0
  3471  00195E  6E12               	movwf	___wmul@multiplicand+1,c
  3472  001960  0E03               	movlw	3
  3473  001962  6E11               	movwf	___wmul@multiplicand,c
  3474  001964  0E00               	movlw	0
  3475  001966  6E04               	movwf	___awmod@divisor+1,c
  3476  001968  0E0A               	movlw	10
  3477  00196A  6E03               	movwf	___awmod@divisor,c
  3478  00196C  502A               	movf	scale@scl,w,c
  3479  00196E  6E01               	movwf	___awmod@dividend,c
  3480  001970  6A02               	clrf	___awmod@dividend+1,c
  3481  001972  BE01               	btfsc	___awmod@dividend,7,c
  3482  001974  0602               	decf	___awmod@dividend+1,f,c
  3483  001976  ECEB  F018         	call	___awmod	;wreg free
  3484  00197A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3485  00197E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3486  001982  ECD6  F01A         	call	___wmul	;wreg free
  3487  001986  0E50               	movlw	low __powers_
  3488  001988  240F               	addwf	?___wmul,w,c
  3489  00198A  6EF6               	movwf	tblptrl,c
  3490  00198C  0E08               	movlw	high __powers_
  3491  00198E  2010               	addwfc	?___wmul+1,w,c
  3492  001990  6EF7               	movwf	tblptrh,c
  3493  001992                     	if	0	;There are less than 3 active tblptr bytes
  3494  001992                     	endif
  3495  001992  0009               	tblrd		*+
  3496  001994  CFF5 F018          	movff	tablat,___ftmul@f2
  3497  001998  0009               	tblrd		*+
  3498  00199A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3499  00199E  000A               	tblrd		*-
  3500  0019A0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3501  0019A4  EC39  F015         	call	___ftmul	;wreg free
  3502  0019A8  D7A7               	goto	L5
  3503  0019AA                     l2802:
  3504                           
  3505                           ;doprnt.c: 440: return _powers_[scl];
  3506  0019AA  502A               	movf	scale@scl,w,c
  3507  0019AC  0D03               	mullw	3
  3508  0019AE  0E50               	movlw	low __powers_
  3509  0019B0  24F3               	addwf	prodl,w,c
  3510  0019B2  6EF6               	movwf	tblptrl,c
  3511  0019B4  0E08               	movlw	high __powers_
  3512  0019B6  20F4               	addwfc	prodh,w,c
  3513  0019B8  6EF7               	movwf	tblptrh,c
  3514  0019BA                     	if	0	;There are less than 3 active tblptr bytes
  3515  0019BA                     	endif
  3516  0019BA  0009               	tblrd		*+
  3517  0019BC  CFF5 F024          	movff	tablat,?_scale
  3518  0019C0  0009               	tblrd		*+
  3519  0019C2  CFF5 F025          	movff	tablat,?_scale+1
  3520  0019C6  000A               	tblrd		*-
  3521  0019C8  CFF5 F026          	movff	tablat,?_scale+2
  3522  0019CC  0012               	return	
  3523  0019CE                     __end_of_scale:
  3524                           	opt stack 0
  3525                           tblptru	equ	0xFF8
  3526                           tblptrh	equ	0xFF7
  3527                           tblptrl	equ	0xFF6
  3528                           tablat	equ	0xFF5
  3529                           prodh	equ	0xFF4
  3530                           prodl	equ	0xFF3
  3531                           wreg	equ	0xFE8
  3532                           indf2	equ	0xFDF
  3533                           postinc2	equ	0xFDE
  3534                           postdec2	equ	0xFDD
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _isdigit *****************
  3540 ;; Defined at:
  3541 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\isdigit.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  c               1    wreg     unsigned char 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  c               1    2[COMRAM] unsigned char 
  3546 ;; Return value:  Size  Location     Type
  3547 ;;		None               void
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3555 ;;      Params:         0       0       0       0       0       0       0       0       0
  3556 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3557 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3558 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3559 ;;Total ram usage:        3 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; This function calls:
  3562 ;;		Nothing
  3563 ;; This function is called by:
  3564 ;;		_sprintf
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           	psect	text6
  3569  00363A                     __ptext6:
  3570                           	opt stack 0
  3571  00363A                     _isdigit:
  3572                           	opt stack 27
  3573                           
  3574                           ;incstack = 0
  3575                           ;isdigit@c stored from wreg
  3576  00363A  6E03               	movwf	isdigit@c,c
  3577  00363C  0E00               	movlw	0
  3578  00363E  6E02               	movwf	_isdigit$1148,c
  3579  003640  0E3A               	movlw	58
  3580  003642  6003               	cpfslt	isdigit@c,c
  3581  003644  D005               	goto	l2814
  3582  003646  0E2F               	movlw	47
  3583  003648  6403               	cpfsgt	isdigit@c,c
  3584  00364A  D002               	goto	l2814
  3585  00364C  0E01               	movlw	1
  3586  00364E  6E02               	movwf	_isdigit$1148,c
  3587  003650                     l2814:
  3588  003650  C002  F001         	movff	_isdigit$1148,??_isdigit
  3589  003654  3001               	rrcf	??_isdigit,w,c
  3590  003656  0012               	return	
  3591  003658                     __end_of_isdigit:
  3592                           	opt stack 0
  3593                           tblptru	equ	0xFF8
  3594                           tblptrh	equ	0xFF7
  3595                           tblptrl	equ	0xFF6
  3596                           tablat	equ	0xFF5
  3597                           prodh	equ	0xFF4
  3598                           prodl	equ	0xFF3
  3599                           wreg	equ	0xFE8
  3600                           indf2	equ	0xFDF
  3601                           postinc2	equ	0xFDE
  3602                           postdec2	equ	0xFDD
  3603                           fsr2h	equ	0xFDA
  3604                           fsr2l	equ	0xFD9
  3605                           status	equ	0xFD8
  3606                           
  3607 ;; *************** function _fround *****************
  3608 ;; Defined at:
  3609 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  3610 ;; Parameters:    Size  Location     Type
  3611 ;;  prec            1    wreg     unsigned char 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  prec            1   44[COMRAM] unsigned char 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  3   35[COMRAM] unsigned char 
  3616 ;; Registers used:
  3617 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3623 ;;      Params:         3       0       0       0       0       0       0       0       0
  3624 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3625 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3626 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3627 ;;Total ram usage:       10 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    2
  3630 ;; This function calls:
  3631 ;;		___awdiv
  3632 ;;		___awmod
  3633 ;;		___ftmul
  3634 ;;		___wmul
  3635 ;; This function is called by:
  3636 ;;		_sprintf
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	text7
  3641  001C32                     __ptext7:
  3642                           	opt stack 0
  3643  001C32                     _fround:
  3644                           	opt stack 25
  3645                           
  3646                           ;incstack = 0
  3647                           ;fround@prec stored from wreg
  3648  001C32  6E2D               	movwf	fround@prec,c
  3649                           
  3650                           ;doprnt.c: 413: if(prec>=110)
  3651  001C34  0E6D               	movlw	109
  3652  001C36  642D               	cpfsgt	fround@prec,c
  3653  001C38  D09F               	goto	l2756
  3654                           
  3655                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3656  001C3A  0E00               	movlw	0
  3657  001C3C  6E12               	movwf	___wmul@multiplicand+1,c
  3658  001C3E  0E03               	movlw	3
  3659  001C40  6E11               	movwf	___wmul@multiplicand,c
  3660  001C42  0E00               	movlw	0
  3661  001C44  6E0A               	movwf	___awdiv@divisor+1,c
  3662  001C46  0E0A               	movlw	10
  3663  001C48  6E09               	movwf	___awdiv@divisor,c
  3664  001C4A  0E00               	movlw	0
  3665  001C4C  6E04               	movwf	___awmod@divisor+1,c
  3666  001C4E  0E64               	movlw	100
  3667  001C50  6E03               	movwf	___awmod@divisor,c
  3668  001C52  C02D  F001         	movff	fround@prec,___awmod@dividend
  3669  001C56  6A02               	clrf	___awmod@dividend+1,c
  3670  001C58  ECEB  F018         	call	___awmod	;wreg free
  3671  001C5C  C001  F007         	movff	?___awmod,___awdiv@dividend
  3672  001C60  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3673  001C64  ECF5  F017         	call	___awdiv	;wreg free
  3674  001C68  0E09               	movlw	9
  3675  001C6A  2407               	addwf	?___awdiv,w,c
  3676  001C6C  6E0F               	movwf	___wmul@multiplier,c
  3677  001C6E  0E00               	movlw	0
  3678  001C70  2008               	addwfc	?___awdiv+1,w,c
  3679  001C72  6E10               	movwf	___wmul@multiplier+1,c
  3680  001C74  ECD6  F01A         	call	___wmul	;wreg free
  3681  001C78  0E29               	movlw	low __npowers_
  3682  001C7A  240F               	addwf	?___wmul,w,c
  3683  001C7C  6EF6               	movwf	tblptrl,c
  3684  001C7E  0E08               	movlw	high __npowers_
  3685  001C80  2010               	addwfc	?___wmul+1,w,c
  3686  001C82  6EF7               	movwf	tblptrh,c
  3687  001C84                     	if	0	;There are less than 3 active tblptr bytes
  3688  001C84                     	endif
  3689  001C84  0009               	tblrd		*+
  3690  001C86  CFF5 F018          	movff	tablat,___ftmul@f2
  3691  001C8A  0009               	tblrd		*+
  3692  001C8C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3693  001C90  000A               	tblrd		*-
  3694  001C92  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3695  001C96  0E00               	movlw	0
  3696  001C98  6E0A               	movwf	___awdiv@divisor+1,c
  3697  001C9A  0E64               	movlw	100
  3698  001C9C  6E09               	movwf	___awdiv@divisor,c
  3699  001C9E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3700  001CA2  6A08               	clrf	___awdiv@dividend+1,c
  3701  001CA4  ECF5  F017         	call	___awdiv	;wreg free
  3702  001CA8  0E12               	movlw	18
  3703  001CAA  2407               	addwf	?___awdiv,w,c
  3704  001CAC  6E0F               	movwf	___wmul@multiplier,c
  3705  001CAE  0E00               	movlw	0
  3706  001CB0  2008               	addwfc	?___awdiv+1,w,c
  3707  001CB2  6E10               	movwf	___wmul@multiplier+1,c
  3708  001CB4  0E00               	movlw	0
  3709  001CB6  6E12               	movwf	___wmul@multiplicand+1,c
  3710  001CB8  0E03               	movlw	3
  3711  001CBA  6E11               	movwf	___wmul@multiplicand,c
  3712  001CBC  ECD6  F01A         	call	___wmul	;wreg free
  3713  001CC0  0E29               	movlw	low __npowers_
  3714  001CC2  240F               	addwf	?___wmul,w,c
  3715  001CC4  6EF6               	movwf	tblptrl,c
  3716  001CC6  0E08               	movlw	high __npowers_
  3717  001CC8  2010               	addwfc	?___wmul+1,w,c
  3718  001CCA  6EF7               	movwf	tblptrh,c
  3719  001CCC                     	if	0	;There are less than 3 active tblptr bytes
  3720  001CCC                     	endif
  3721  001CCC  0009               	tblrd		*+
  3722  001CCE  CFF5 F015          	movff	tablat,___ftmul@f1
  3723  001CD2  0009               	tblrd		*+
  3724  001CD4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3725  001CD8  000A               	tblrd		*-
  3726  001CDA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3727  001CDE  EC39  F015         	call	___ftmul	;wreg free
  3728  001CE2  C015  F02A         	movff	?___ftmul,_fround$1523
  3729  001CE6  C016  F02B         	movff	?___ftmul+1,_fround$1523+1
  3730  001CEA  C017  F02C         	movff	?___ftmul+2,_fround$1523+2
  3731                           
  3732                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3733  001CEE  0E00               	movlw	0
  3734  001CF0  6E12               	movwf	___wmul@multiplicand+1,c
  3735  001CF2  0E03               	movlw	3
  3736  001CF4  6E11               	movwf	___wmul@multiplicand,c
  3737  001CF6  0E00               	movlw	0
  3738  001CF8  6E04               	movwf	___awmod@divisor+1,c
  3739  001CFA  0E0A               	movlw	10
  3740  001CFC  6E03               	movwf	___awmod@divisor,c
  3741  001CFE  C02D  F001         	movff	fround@prec,___awmod@dividend
  3742  001D02  6A02               	clrf	___awmod@dividend+1,c
  3743  001D04  ECEB  F018         	call	___awmod	;wreg free
  3744  001D08  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3745  001D0C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3746  001D10  ECD6  F01A         	call	___wmul	;wreg free
  3747  001D14  0E29               	movlw	low __npowers_
  3748  001D16  240F               	addwf	?___wmul,w,c
  3749  001D18  6EF6               	movwf	tblptrl,c
  3750  001D1A  0E08               	movlw	high __npowers_
  3751  001D1C  2010               	addwfc	?___wmul+1,w,c
  3752  001D1E  6EF7               	movwf	tblptrh,c
  3753  001D20                     	if	0	;There are less than 3 active tblptr bytes
  3754  001D20                     	endif
  3755  001D20  0009               	tblrd		*+
  3756  001D22  CFF5 F018          	movff	tablat,___ftmul@f2
  3757  001D26  0009               	tblrd		*+
  3758  001D28  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3759  001D2C  000A               	tblrd		*-
  3760  001D2E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3761  001D32  C02A  F015         	movff	_fround$1523,___ftmul@f1
  3762  001D36  C02B  F016         	movff	_fround$1523+1,___ftmul@f1+1
  3763  001D3A  C02C  F017         	movff	_fround$1523+2,___ftmul@f1+2
  3764  001D3E  EC39  F015         	call	___ftmul	;wreg free
  3765  001D42  C015  F027         	movff	?___ftmul,_fround$1524
  3766  001D46  C016  F028         	movff	?___ftmul+1,_fround$1524+1
  3767  001D4A  C017  F029         	movff	?___ftmul+2,_fround$1524+2
  3768                           
  3769                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3770  001D4E  C027  F015         	movff	_fround$1524,___ftmul@f1
  3771  001D52  C028  F016         	movff	_fround$1524+1,___ftmul@f1+1
  3772  001D56  C029  F017         	movff	_fround$1524+2,___ftmul@f1+2
  3773  001D5A  0E00               	movlw	0
  3774  001D5C  6E18               	movwf	___ftmul@f2,c
  3775  001D5E  0E00               	movlw	0
  3776  001D60  6E19               	movwf	___ftmul@f2+1,c
  3777  001D62  0E3F               	movlw	63
  3778  001D64  6E1A               	movwf	___ftmul@f2+2,c
  3779  001D66  EC39  F015         	call	___ftmul	;wreg free
  3780  001D6A  C015  F024         	movff	?___ftmul,?_fround
  3781  001D6E  C016  F025         	movff	?___ftmul+1,?_fround+1
  3782  001D72  C017  F026         	movff	?___ftmul+2,?_fround+2
  3783  001D76  0012               	return	
  3784  001D78                     l2756:
  3785                           
  3786                           ;doprnt.c: 415: else if(prec > 10)
  3787  001D78  0E0A               	movlw	10
  3788  001D7A  642D               	cpfsgt	fround@prec,c
  3789  001D7C  D05D               	goto	l2764
  3790                           
  3791                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3792  001D7E  0E00               	movlw	0
  3793  001D80  6E12               	movwf	___wmul@multiplicand+1,c
  3794  001D82  0E03               	movlw	3
  3795  001D84  6E11               	movwf	___wmul@multiplicand,c
  3796  001D86  0E00               	movlw	0
  3797  001D88  6E04               	movwf	___awmod@divisor+1,c
  3798  001D8A  0E0A               	movlw	10
  3799  001D8C  6E03               	movwf	___awmod@divisor,c
  3800  001D8E  C02D  F001         	movff	fround@prec,___awmod@dividend
  3801  001D92  6A02               	clrf	___awmod@dividend+1,c
  3802  001D94  ECEB  F018         	call	___awmod	;wreg free
  3803  001D98  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3804  001D9C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3805  001DA0  ECD6  F01A         	call	___wmul	;wreg free
  3806  001DA4  0E29               	movlw	low __npowers_
  3807  001DA6  240F               	addwf	?___wmul,w,c
  3808  001DA8  6EF6               	movwf	tblptrl,c
  3809  001DAA  0E08               	movlw	high __npowers_
  3810  001DAC  2010               	addwfc	?___wmul+1,w,c
  3811  001DAE  6EF7               	movwf	tblptrh,c
  3812  001DB0                     	if	0	;There are less than 3 active tblptr bytes
  3813  001DB0                     	endif
  3814  001DB0  0009               	tblrd		*+
  3815  001DB2  CFF5 F018          	movff	tablat,___ftmul@f2
  3816  001DB6  0009               	tblrd		*+
  3817  001DB8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3818  001DBC  000A               	tblrd		*-
  3819  001DBE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3820  001DC2  0E00               	movlw	0
  3821  001DC4  6E0A               	movwf	___awdiv@divisor+1,c
  3822  001DC6  0E0A               	movlw	10
  3823  001DC8  6E09               	movwf	___awdiv@divisor,c
  3824  001DCA  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3825  001DCE  6A08               	clrf	___awdiv@dividend+1,c
  3826  001DD0  ECF5  F017         	call	___awdiv	;wreg free
  3827  001DD4  0E09               	movlw	9
  3828  001DD6  2407               	addwf	?___awdiv,w,c
  3829  001DD8  6E0F               	movwf	___wmul@multiplier,c
  3830  001DDA  0E00               	movlw	0
  3831  001DDC  2008               	addwfc	?___awdiv+1,w,c
  3832  001DDE  6E10               	movwf	___wmul@multiplier+1,c
  3833  001DE0  0E00               	movlw	0
  3834  001DE2  6E12               	movwf	___wmul@multiplicand+1,c
  3835  001DE4  0E03               	movlw	3
  3836  001DE6  6E11               	movwf	___wmul@multiplicand,c
  3837  001DE8  ECD6  F01A         	call	___wmul	;wreg free
  3838  001DEC  0E29               	movlw	low __npowers_
  3839  001DEE  240F               	addwf	?___wmul,w,c
  3840  001DF0  6EF6               	movwf	tblptrl,c
  3841  001DF2  0E08               	movlw	high __npowers_
  3842  001DF4  2010               	addwfc	?___wmul+1,w,c
  3843  001DF6  6EF7               	movwf	tblptrh,c
  3844  001DF8                     	if	0	;There are less than 3 active tblptr bytes
  3845  001DF8                     	endif
  3846  001DF8  0009               	tblrd		*+
  3847  001DFA  CFF5 F015          	movff	tablat,___ftmul@f1
  3848  001DFE  0009               	tblrd		*+
  3849  001E00  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3850  001E04  000A               	tblrd		*-
  3851  001E06  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3852  001E0A  EC39  F015         	call	___ftmul	;wreg free
  3853  001E0E  C015  F02A         	movff	?___ftmul,_fround$1523
  3854  001E12  C016  F02B         	movff	?___ftmul+1,_fround$1523+1
  3855  001E16  C017  F02C         	movff	?___ftmul+2,_fround$1523+2
  3856                           
  3857                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3858  001E1A  C02A  F015         	movff	_fround$1523,___ftmul@f1
  3859  001E1E  C02B  F016         	movff	_fround$1523+1,___ftmul@f1+1
  3860  001E22  C02C  F017         	movff	_fround$1523+2,___ftmul@f1+2
  3861  001E26  0E00               	movlw	0
  3862  001E28  6E18               	movwf	___ftmul@f2,c
  3863  001E2A  0E00               	movlw	0
  3864  001E2C  6E19               	movwf	___ftmul@f2+1,c
  3865  001E2E  0E3F               	movlw	63
  3866  001E30  6E1A               	movwf	___ftmul@f2+2,c
  3867  001E32  EC39  F015         	call	___ftmul	;wreg free
  3868  001E36  D799               	goto	L6
  3869  001E38                     l2764:
  3870                           
  3871                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3872  001E38  502D               	movf	fround@prec,w,c
  3873  001E3A  0D03               	mullw	3
  3874  001E3C  0E29               	movlw	low __npowers_
  3875  001E3E  24F3               	addwf	prodl,w,c
  3876  001E40  6EF6               	movwf	tblptrl,c
  3877  001E42  0E08               	movlw	high __npowers_
  3878  001E44  20F4               	addwfc	prodh,w,c
  3879  001E46  6EF7               	movwf	tblptrh,c
  3880  001E48                     	if	0	;There are less than 3 active tblptr bytes
  3881  001E48                     	endif
  3882  001E48  0009               	tblrd		*+
  3883  001E4A  CFF5 F015          	movff	tablat,___ftmul@f1
  3884  001E4E  0009               	tblrd		*+
  3885  001E50  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3886  001E54  000A               	tblrd		*-
  3887  001E56  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3888  001E5A  0E00               	movlw	0
  3889  001E5C  6E18               	movwf	___ftmul@f2,c
  3890  001E5E  0E00               	movlw	0
  3891  001E60  6E19               	movwf	___ftmul@f2+1,c
  3892  001E62  0E3F               	movlw	63
  3893  001E64  6E1A               	movwf	___ftmul@f2+2,c
  3894  001E66  EC39  F015         	call	___ftmul	;wreg free
  3895  001E6A  C015  F024         	movff	?___ftmul,?_fround
  3896  001E6E  C016  F025         	movff	?___ftmul+1,?_fround+1
  3897  001E72  C017  F026         	movff	?___ftmul+2,?_fround+2
  3898  001E76  0012               	return	
  3899  001E78                     __end_of_fround:
  3900                           	opt stack 0
  3901                           tblptru	equ	0xFF8
  3902                           tblptrh	equ	0xFF7
  3903                           tblptrl	equ	0xFF6
  3904                           tablat	equ	0xFF5
  3905                           prodh	equ	0xFF4
  3906                           prodl	equ	0xFF3
  3907                           wreg	equ	0xFE8
  3908                           indf2	equ	0xFDF
  3909                           postinc2	equ	0xFDE
  3910                           postdec2	equ	0xFDD
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function ___awmod *****************
  3916 ;; Defined at:
  3917 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\awmod.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  dividend        2    0[COMRAM] int 
  3920 ;;  divisor         2    2[COMRAM] int 
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;  sign            1    5[COMRAM] unsigned char 
  3923 ;;  counter         1    4[COMRAM] unsigned char 
  3924 ;; Return value:  Size  Location     Type
  3925 ;;                  2    0[COMRAM] int 
  3926 ;; Registers used:
  3927 ;;		wreg, status,2, status,0
  3928 ;; Tracked objects:
  3929 ;;		On entry : 0/0
  3930 ;;		On exit  : 0/0
  3931 ;;		Unchanged: 0/0
  3932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3933 ;;      Params:         4       0       0       0       0       0       0       0       0
  3934 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3935 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3936 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3937 ;;Total ram usage:        6 bytes
  3938 ;; Hardware stack levels used:    1
  3939 ;; This function calls:
  3940 ;;		Nothing
  3941 ;; This function is called by:
  3942 ;;		_fround
  3943 ;;		_scale
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text8
  3948  0031D6                     __ptext8:
  3949                           	opt stack 0
  3950  0031D6                     ___awmod:
  3951                           	opt stack 26
  3952                           
  3953                           ;incstack = 0
  3954  0031D6  0E00               	movlw	0
  3955  0031D8  6E06               	movwf	___awmod@sign,c
  3956  0031DA  AE02               	btfss	___awmod@dividend+1,7,c
  3957  0031DC  D006               	goto	l2698
  3958  0031DE  6C01               	negf	___awmod@dividend,c
  3959  0031E0  1E02               	comf	___awmod@dividend+1,f,c
  3960  0031E2  B0D8               	btfsc	status,0,c
  3961  0031E4  2A02               	incf	___awmod@dividend+1,f,c
  3962  0031E6  0E01               	movlw	1
  3963  0031E8  6E06               	movwf	___awmod@sign,c
  3964  0031EA                     l2698:
  3965  0031EA  AE04               	btfss	___awmod@divisor+1,7,c
  3966  0031EC  D004               	goto	l2702
  3967  0031EE  6C03               	negf	___awmod@divisor,c
  3968  0031F0  1E04               	comf	___awmod@divisor+1,f,c
  3969  0031F2  B0D8               	btfsc	status,0,c
  3970  0031F4  2A04               	incf	___awmod@divisor+1,f,c
  3971  0031F6                     l2702:
  3972  0031F6  5003               	movf	___awmod@divisor,w,c
  3973  0031F8  1004               	iorwf	___awmod@divisor+1,w,c
  3974  0031FA  B4D8               	btfsc	status,2,c
  3975  0031FC  D018               	goto	l2718
  3976  0031FE  0E01               	movlw	1
  3977  003200  6E05               	movwf	___awmod@counter,c
  3978  003202  D004               	goto	l2708
  3979  003204                     l2706:
  3980  003204  90D8               	bcf	status,0,c
  3981  003206  3603               	rlcf	___awmod@divisor,f,c
  3982  003208  3604               	rlcf	___awmod@divisor+1,f,c
  3983  00320A  2A05               	incf	___awmod@counter,f,c
  3984  00320C                     l2708:
  3985  00320C  AE04               	btfss	___awmod@divisor+1,7,c
  3986  00320E  D7FA               	goto	l2706
  3987  003210                     l2710:
  3988  003210  5003               	movf	___awmod@divisor,w,c
  3989  003212  5C01               	subwf	___awmod@dividend,w,c
  3990  003214  5004               	movf	___awmod@divisor+1,w,c
  3991  003216  5802               	subwfb	___awmod@dividend+1,w,c
  3992  003218  A0D8               	btfss	status,0,c
  3993  00321A  D004               	goto	l2714
  3994  00321C  5003               	movf	___awmod@divisor,w,c
  3995  00321E  5E01               	subwf	___awmod@dividend,f,c
  3996  003220  5004               	movf	___awmod@divisor+1,w,c
  3997  003222  5A02               	subwfb	___awmod@dividend+1,f,c
  3998  003224                     l2714:
  3999  003224  90D8               	bcf	status,0,c
  4000  003226  3204               	rrcf	___awmod@divisor+1,f,c
  4001  003228  3203               	rrcf	___awmod@divisor,f,c
  4002  00322A  2E05               	decfsz	___awmod@counter,f,c
  4003  00322C  D7F1               	goto	l2710
  4004  00322E                     l2718:
  4005  00322E  5006               	movf	___awmod@sign,w,c
  4006  003230  B4D8               	btfsc	status,2,c
  4007  003232  D004               	goto	l2722
  4008  003234  6C01               	negf	___awmod@dividend,c
  4009  003236  1E02               	comf	___awmod@dividend+1,f,c
  4010  003238  B0D8               	btfsc	status,0,c
  4011  00323A  2A02               	incf	___awmod@dividend+1,f,c
  4012  00323C                     l2722:
  4013  00323C  C001  F001         	movff	___awmod@dividend,?___awmod
  4014  003240  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4015  003244  0012               	return	
  4016  003246                     __end_of___awmod:
  4017                           	opt stack 0
  4018                           tblptru	equ	0xFF8
  4019                           tblptrh	equ	0xFF7
  4020                           tblptrl	equ	0xFF6
  4021                           tablat	equ	0xFF5
  4022                           prodh	equ	0xFF4
  4023                           prodl	equ	0xFF3
  4024                           wreg	equ	0xFE8
  4025                           indf2	equ	0xFDF
  4026                           postinc2	equ	0xFDE
  4027                           postdec2	equ	0xFDD
  4028                           fsr2h	equ	0xFDA
  4029                           fsr2l	equ	0xFD9
  4030                           status	equ	0xFD8
  4031                           
  4032 ;; *************** function ___awdiv *****************
  4033 ;; Defined at:
  4034 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\awdiv.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  dividend        2    6[COMRAM] int 
  4037 ;;  divisor         2    8[COMRAM] int 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  quotient        2   12[COMRAM] int 
  4040 ;;  sign            1   11[COMRAM] unsigned char 
  4041 ;;  counter         1   10[COMRAM] unsigned char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  2    6[COMRAM] int 
  4044 ;; Registers used:
  4045 ;;		wreg, status,2, status,0
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4051 ;;      Params:         4       0       0       0       0       0       0       0       0
  4052 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4053 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4054 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4055 ;;Total ram usage:        8 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; This function calls:
  4058 ;;		Nothing
  4059 ;; This function is called by:
  4060 ;;		_fround
  4061 ;;		_scale
  4062 ;;		_sprintf
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           	psect	text9
  4067  002FEA                     __ptext9:
  4068                           	opt stack 0
  4069  002FEA                     ___awdiv:
  4070                           	opt stack 26
  4071                           
  4072                           ;incstack = 0
  4073  002FEA  0E00               	movlw	0
  4074  002FEC  6E0C               	movwf	___awdiv@sign,c
  4075  002FEE  AE0A               	btfss	___awdiv@divisor+1,7,c
  4076  002FF0  D006               	goto	l2654
  4077  002FF2  6C09               	negf	___awdiv@divisor,c
  4078  002FF4  1E0A               	comf	___awdiv@divisor+1,f,c
  4079  002FF6  B0D8               	btfsc	status,0,c
  4080  002FF8  2A0A               	incf	___awdiv@divisor+1,f,c
  4081  002FFA  0E01               	movlw	1
  4082  002FFC  6E0C               	movwf	___awdiv@sign,c
  4083  002FFE                     l2654:
  4084  002FFE  AE08               	btfss	___awdiv@dividend+1,7,c
  4085  003000  D006               	goto	l2660
  4086  003002  6C07               	negf	___awdiv@dividend,c
  4087  003004  1E08               	comf	___awdiv@dividend+1,f,c
  4088  003006  B0D8               	btfsc	status,0,c
  4089  003008  2A08               	incf	___awdiv@dividend+1,f,c
  4090  00300A  0E01               	movlw	1
  4091  00300C  1A0C               	xorwf	___awdiv@sign,f,c
  4092  00300E                     l2660:
  4093  00300E  0E00               	movlw	0
  4094  003010  6E0E               	movwf	___awdiv@quotient+1,c
  4095  003012  0E00               	movlw	0
  4096  003014  6E0D               	movwf	___awdiv@quotient,c
  4097  003016  5009               	movf	___awdiv@divisor,w,c
  4098  003018  100A               	iorwf	___awdiv@divisor+1,w,c
  4099  00301A  B4D8               	btfsc	status,2,c
  4100  00301C  D01C               	goto	l2682
  4101  00301E  0E01               	movlw	1
  4102  003020  6E0B               	movwf	___awdiv@counter,c
  4103  003022  D004               	goto	l2668
  4104  003024                     l2666:
  4105  003024  90D8               	bcf	status,0,c
  4106  003026  3609               	rlcf	___awdiv@divisor,f,c
  4107  003028  360A               	rlcf	___awdiv@divisor+1,f,c
  4108  00302A  2A0B               	incf	___awdiv@counter,f,c
  4109  00302C                     l2668:
  4110  00302C  AE0A               	btfss	___awdiv@divisor+1,7,c
  4111  00302E  D7FA               	goto	l2666
  4112  003030                     l2670:
  4113  003030  90D8               	bcf	status,0,c
  4114  003032  360D               	rlcf	___awdiv@quotient,f,c
  4115  003034  360E               	rlcf	___awdiv@quotient+1,f,c
  4116  003036  5009               	movf	___awdiv@divisor,w,c
  4117  003038  5C07               	subwf	___awdiv@dividend,w,c
  4118  00303A  500A               	movf	___awdiv@divisor+1,w,c
  4119  00303C  5808               	subwfb	___awdiv@dividend+1,w,c
  4120  00303E  A0D8               	btfss	status,0,c
  4121  003040  D005               	goto	l2678
  4122  003042  5009               	movf	___awdiv@divisor,w,c
  4123  003044  5E07               	subwf	___awdiv@dividend,f,c
  4124  003046  500A               	movf	___awdiv@divisor+1,w,c
  4125  003048  5A08               	subwfb	___awdiv@dividend+1,f,c
  4126  00304A  800D               	bsf	___awdiv@quotient,0,c
  4127  00304C                     l2678:
  4128  00304C  90D8               	bcf	status,0,c
  4129  00304E  320A               	rrcf	___awdiv@divisor+1,f,c
  4130  003050  3209               	rrcf	___awdiv@divisor,f,c
  4131  003052  2E0B               	decfsz	___awdiv@counter,f,c
  4132  003054  D7ED               	goto	l2670
  4133  003056                     l2682:
  4134  003056  500C               	movf	___awdiv@sign,w,c
  4135  003058  B4D8               	btfsc	status,2,c
  4136  00305A  D004               	goto	l2686
  4137  00305C  6C0D               	negf	___awdiv@quotient,c
  4138  00305E  1E0E               	comf	___awdiv@quotient+1,f,c
  4139  003060  B0D8               	btfsc	status,0,c
  4140  003062  2A0E               	incf	___awdiv@quotient+1,f,c
  4141  003064                     l2686:
  4142  003064  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4143  003068  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4144  00306C  0012               	return	
  4145  00306E                     __end_of___awdiv:
  4146                           	opt stack 0
  4147                           tblptru	equ	0xFF8
  4148                           tblptrh	equ	0xFF7
  4149                           tblptrl	equ	0xFF6
  4150                           tablat	equ	0xFF5
  4151                           prodh	equ	0xFF4
  4152                           prodl	equ	0xFF3
  4153                           wreg	equ	0xFE8
  4154                           indf2	equ	0xFDF
  4155                           postinc2	equ	0xFDE
  4156                           postdec2	equ	0xFDD
  4157                           fsr2h	equ	0xFDA
  4158                           fsr2l	equ	0xFD9
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function __tdiv_to_l_ *****************
  4162 ;; Defined at:
  4163 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  f1              3    0[COMRAM] float 
  4166 ;;  f2              3    3[COMRAM] float 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  quot            4    9[COMRAM] unsigned long 
  4169 ;;  exp1            1   14[COMRAM] unsigned char 
  4170 ;;  cntr            1   13[COMRAM] unsigned char 
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  4    0[COMRAM] unsigned long 
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4180 ;;      Params:         6       0       0       0       0       0       0       0       0
  4181 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4182 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4183 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4184 ;;Total ram usage:       15 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; This function calls:
  4187 ;;		Nothing
  4188 ;; This function is called by:
  4189 ;;		_sprintf
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           	psect	text10
  4194  0024FA                     __ptext10:
  4195                           	opt stack 0
  4196  0024FA                     __tdiv_to_l_:
  4197                           	opt stack 27
  4198                           
  4199                           ;incstack = 0
  4200  0024FA  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4201  0024FE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4202  002500  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4203  002502  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4204  002504  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4205  002506  E301               	bnc	u2551
  4206  002508  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4207  00250A                     u2551:
  4208  00250A  5007               	movf	??__tdiv_to_l_,w,c
  4209  00250C  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4210  00250E  500F               	movf	__tdiv_to_l_@exp1,w,c
  4211  002510  A4D8               	btfss	status,2,c
  4212  002512  D009               	goto	l2824
  4213  002514  0E00               	movlw	0
  4214  002516  6E01               	movwf	?__tdiv_to_l_,c
  4215  002518  0E00               	movlw	0
  4216  00251A  6E02               	movwf	?__tdiv_to_l_+1,c
  4217  00251C  0E00               	movlw	0
  4218  00251E  6E03               	movwf	?__tdiv_to_l_+2,c
  4219  002520  0E00               	movlw	0
  4220  002522  6E04               	movwf	?__tdiv_to_l_+3,c
  4221  002524  0012               	return	
  4222  002526                     l2824:
  4223  002526  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4224  00252A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4225  00252C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4226  00252E  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4227  002530  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4228  002532  E301               	bnc	u2571
  4229  002534  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4230  002536                     u2571:
  4231  002536  5007               	movf	??__tdiv_to_l_,w,c
  4232  002538  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4233  00253A  500E               	movf	__tdiv_to_l_@cntr,w,c
  4234  00253C  A4D8               	btfss	status,2,c
  4235  00253E  D009               	goto	l2830
  4236  002540  0E00               	movlw	0
  4237  002542  6E01               	movwf	?__tdiv_to_l_,c
  4238  002544  0E00               	movlw	0
  4239  002546  6E02               	movwf	?__tdiv_to_l_+1,c
  4240  002548  0E00               	movlw	0
  4241  00254A  6E03               	movwf	?__tdiv_to_l_+2,c
  4242  00254C  0E00               	movlw	0
  4243  00254E  6E04               	movwf	?__tdiv_to_l_+3,c
  4244  002550  0012               	return	
  4245  002552                     l2830:
  4246  002552  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4247  002554  0EFF               	movlw	255
  4248  002556  1601               	andwf	__tdiv_to_l_@f1,f,c
  4249  002558  0EFF               	movlw	255
  4250  00255A  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4251  00255C  0E00               	movlw	0
  4252  00255E  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4253  002560  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4254  002562  0EFF               	movlw	255
  4255  002564  1604               	andwf	__tdiv_to_l_@f2,f,c
  4256  002566  0EFF               	movlw	255
  4257  002568  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4258  00256A  0E00               	movlw	0
  4259  00256C  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4260  00256E  0E00               	movlw	0
  4261  002570  6E0A               	movwf	__tdiv_to_l_@quot,c
  4262  002572  0E00               	movlw	0
  4263  002574  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4264  002576  0E00               	movlw	0
  4265  002578  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4266  00257A  0E00               	movlw	0
  4267  00257C  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4268  00257E  0E7F               	movlw	127
  4269  002580  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4270  002582  500E               	movf	__tdiv_to_l_@cntr,w,c
  4271  002584  0F98               	addlw	152
  4272  002586  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4273  002588  0E18               	movlw	24
  4274  00258A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4275  00258C                     l706:
  4276  00258C  90D8               	bcf	status,0,c
  4277  00258E  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4278  002590  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4279  002592  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4280  002594  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4281  002596  5004               	movf	__tdiv_to_l_@f2,w,c
  4282  002598  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4283  00259A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4284  00259C  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4285  00259E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4286  0025A0  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4287  0025A2  A0D8               	btfss	status,0,c
  4288  0025A4  D007               	goto	l707
  4289  0025A6  5004               	movf	__tdiv_to_l_@f2,w,c
  4290  0025A8  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4291  0025AA  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4292  0025AC  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4293  0025AE  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4294  0025B0  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4295  0025B2  800A               	bsf	__tdiv_to_l_@quot,0,c
  4296  0025B4                     l707:
  4297  0025B4  90D8               	bcf	status,0,c
  4298  0025B6  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4299  0025B8  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4300  0025BA  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4301  0025BC  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4302  0025BE  D7E6               	goto	l706
  4303  0025C0  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4304  0025C2  D016               	goto	l2864
  4305  0025C4  500F               	movf	__tdiv_to_l_@exp1,w,c
  4306  0025C6  0A80               	xorlw	128
  4307  0025C8  0F97               	addlw	151
  4308  0025CA  B0D8               	btfsc	status,0,c
  4309  0025CC  D009               	goto	l2860
  4310  0025CE  0E00               	movlw	0
  4311  0025D0  6E01               	movwf	?__tdiv_to_l_,c
  4312  0025D2  0E00               	movlw	0
  4313  0025D4  6E02               	movwf	?__tdiv_to_l_+1,c
  4314  0025D6  0E00               	movlw	0
  4315  0025D8  6E03               	movwf	?__tdiv_to_l_+2,c
  4316  0025DA  0E00               	movlw	0
  4317  0025DC  6E04               	movwf	?__tdiv_to_l_+3,c
  4318  0025DE  0012               	return	
  4319  0025E0                     l2860:
  4320  0025E0  90D8               	bcf	status,0,c
  4321  0025E2  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4322  0025E4  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4323  0025E6  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4324  0025E8  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4325  0025EA  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4326  0025EC  D7F9               	goto	l2860
  4327  0025EE  D015               	goto	l713
  4328  0025F0                     l2864:
  4329  0025F0  0E17               	movlw	23
  4330  0025F2  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4331  0025F4  D00F               	goto	l2872
  4332  0025F6  0E00               	movlw	0
  4333  0025F8  6E01               	movwf	?__tdiv_to_l_,c
  4334  0025FA  0E00               	movlw	0
  4335  0025FC  6E02               	movwf	?__tdiv_to_l_+1,c
  4336  0025FE  0E00               	movlw	0
  4337  002600  6E03               	movwf	?__tdiv_to_l_+2,c
  4338  002602  0E00               	movlw	0
  4339  002604  6E04               	movwf	?__tdiv_to_l_+3,c
  4340  002606  0012               	return	
  4341  002608                     l2870:
  4342  002608  90D8               	bcf	status,0,c
  4343  00260A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4344  00260C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4345  00260E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4346  002610  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4347  002612  060F               	decf	__tdiv_to_l_@exp1,f,c
  4348  002614                     l2872:
  4349  002614  500F               	movf	__tdiv_to_l_@exp1,w,c
  4350  002616  A4D8               	btfss	status,2,c
  4351  002618  D7F7               	goto	l2870
  4352  00261A                     l713:
  4353  00261A  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4354  00261E  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4355  002622  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4356  002626  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4357  00262A  0012               	return		;funcret
  4358  00262C                     __end_of__tdiv_to_l_:
  4359                           	opt stack 0
  4360                           tblptru	equ	0xFF8
  4361                           tblptrh	equ	0xFF7
  4362                           tblptrl	equ	0xFF6
  4363                           tablat	equ	0xFF5
  4364                           prodh	equ	0xFF4
  4365                           prodl	equ	0xFF3
  4366                           wreg	equ	0xFE8
  4367                           indf2	equ	0xFDF
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           fsr2h	equ	0xFDA
  4371                           fsr2l	equ	0xFD9
  4372                           status	equ	0xFD8
  4373                           
  4374 ;; *************** function __div_to_l_ *****************
  4375 ;; Defined at:
  4376 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\fldivl.c"
  4377 ;; Parameters:    Size  Location     Type
  4378 ;;  f1              3    0[COMRAM] unsigned long 
  4379 ;;  f2              3    3[COMRAM] unsigned long 
  4380 ;; Auto vars:     Size  Location     Type
  4381 ;;  quot            4    6[COMRAM] unsigned long 
  4382 ;;  exp1            1   11[COMRAM] unsigned char 
  4383 ;;  cntr            1   10[COMRAM] unsigned char 
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  4    0[COMRAM] unsigned long 
  4386 ;; Registers used:
  4387 ;;		wreg, status,2, status,0
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4393 ;;      Params:         6       0       0       0       0       0       0       0       0
  4394 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4395 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4396 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4397 ;;Total ram usage:       12 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; This function calls:
  4400 ;;		Nothing
  4401 ;; This function is called by:
  4402 ;;		_sprintf
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text11
  4407  002756                     __ptext11:
  4408                           	opt stack 0
  4409  002756                     __div_to_l_:
  4410                           	opt stack 27
  4411                           
  4412                           ;incstack = 0
  4413  002756  3403               	rlcf	__div_to_l_@f1+2,w,c
  4414  002758  3404               	rlcf	__div_to_l_@f1+3,w,c
  4415  00275A  6E0C               	movwf	__div_to_l_@exp1,c
  4416  00275C  500C               	movf	__div_to_l_@exp1,w,c
  4417  00275E  A4D8               	btfss	status,2,c
  4418  002760  D009               	goto	l2880
  4419  002762  0E00               	movlw	0
  4420  002764  6E01               	movwf	?__div_to_l_,c
  4421  002766  0E00               	movlw	0
  4422  002768  6E02               	movwf	?__div_to_l_+1,c
  4423  00276A  0E00               	movlw	0
  4424  00276C  6E03               	movwf	?__div_to_l_+2,c
  4425  00276E  0E00               	movlw	0
  4426  002770  6E04               	movwf	?__div_to_l_+3,c
  4427  002772  0012               	return	
  4428  002774                     l2880:
  4429  002774  3406               	rlcf	__div_to_l_@f2+2,w,c
  4430  002776  3407               	rlcf	__div_to_l_@f2+3,w,c
  4431  002778  6E0B               	movwf	__div_to_l_@cntr,c
  4432  00277A  500B               	movf	__div_to_l_@cntr,w,c
  4433  00277C  A4D8               	btfss	status,2,c
  4434  00277E  D009               	goto	l2886
  4435  002780  0E00               	movlw	0
  4436  002782  6E01               	movwf	?__div_to_l_,c
  4437  002784  0E00               	movlw	0
  4438  002786  6E02               	movwf	?__div_to_l_+1,c
  4439  002788  0E00               	movlw	0
  4440  00278A  6E03               	movwf	?__div_to_l_+2,c
  4441  00278C  0E00               	movlw	0
  4442  00278E  6E04               	movwf	?__div_to_l_+3,c
  4443  002790  0012               	return	
  4444  002792                     l2886:
  4445  002792  8E03               	bsf	__div_to_l_@f1+2,7,c
  4446  002794  0EFF               	movlw	255
  4447  002796  1601               	andwf	__div_to_l_@f1,f,c
  4448  002798  0EFF               	movlw	255
  4449  00279A  1602               	andwf	__div_to_l_@f1+1,f,c
  4450  00279C  0EFF               	movlw	255
  4451  00279E  1603               	andwf	__div_to_l_@f1+2,f,c
  4452  0027A0  0E00               	movlw	0
  4453  0027A2  1604               	andwf	__div_to_l_@f1+3,f,c
  4454  0027A4  8E06               	bsf	__div_to_l_@f2+2,7,c
  4455  0027A6  0EFF               	movlw	255
  4456  0027A8  1604               	andwf	__div_to_l_@f2,f,c
  4457  0027AA  0EFF               	movlw	255
  4458  0027AC  1605               	andwf	__div_to_l_@f2+1,f,c
  4459  0027AE  0EFF               	movlw	255
  4460  0027B0  1606               	andwf	__div_to_l_@f2+2,f,c
  4461  0027B2  0E00               	movlw	0
  4462  0027B4  1607               	andwf	__div_to_l_@f2+3,f,c
  4463  0027B6  0E00               	movlw	0
  4464  0027B8  6E07               	movwf	__div_to_l_@quot,c
  4465  0027BA  0E00               	movlw	0
  4466  0027BC  6E08               	movwf	__div_to_l_@quot+1,c
  4467  0027BE  0E00               	movlw	0
  4468  0027C0  6E09               	movwf	__div_to_l_@quot+2,c
  4469  0027C2  0E00               	movlw	0
  4470  0027C4  6E0A               	movwf	__div_to_l_@quot+3,c
  4471  0027C6  0E7F               	movlw	127
  4472  0027C8  5E0C               	subwf	__div_to_l_@exp1,f,c
  4473  0027CA  500B               	movf	__div_to_l_@cntr,w,c
  4474  0027CC  0FA0               	addlw	160
  4475  0027CE  5E0C               	subwf	__div_to_l_@exp1,f,c
  4476  0027D0  0E20               	movlw	32
  4477  0027D2  6E0B               	movwf	__div_to_l_@cntr,c
  4478  0027D4                     l2900:
  4479  0027D4  90D8               	bcf	status,0,c
  4480  0027D6  3607               	rlcf	__div_to_l_@quot,f,c
  4481  0027D8  3608               	rlcf	__div_to_l_@quot+1,f,c
  4482  0027DA  3609               	rlcf	__div_to_l_@quot+2,f,c
  4483  0027DC  360A               	rlcf	__div_to_l_@quot+3,f,c
  4484  0027DE  5004               	movf	__div_to_l_@f2,w,c
  4485  0027E0  5C01               	subwf	__div_to_l_@f1,w,c
  4486  0027E2  5005               	movf	__div_to_l_@f2+1,w,c
  4487  0027E4  5802               	subwfb	__div_to_l_@f1+1,w,c
  4488  0027E6  5006               	movf	__div_to_l_@f2+2,w,c
  4489  0027E8  5803               	subwfb	__div_to_l_@f1+2,w,c
  4490  0027EA  5007               	movf	__div_to_l_@f2+3,w,c
  4491  0027EC  5804               	subwfb	__div_to_l_@f1+3,w,c
  4492  0027EE  A0D8               	btfss	status,0,c
  4493  0027F0  D009               	goto	l2908
  4494  0027F2  5004               	movf	__div_to_l_@f2,w,c
  4495  0027F4  5E01               	subwf	__div_to_l_@f1,f,c
  4496  0027F6  5005               	movf	__div_to_l_@f2+1,w,c
  4497  0027F8  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4498  0027FA  5006               	movf	__div_to_l_@f2+2,w,c
  4499  0027FC  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4500  0027FE  5007               	movf	__div_to_l_@f2+3,w,c
  4501  002800  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4502  002802  8007               	bsf	__div_to_l_@quot,0,c
  4503  002804                     l2908:
  4504  002804  90D8               	bcf	status,0,c
  4505  002806  3601               	rlcf	__div_to_l_@f1,f,c
  4506  002808  3602               	rlcf	__div_to_l_@f1+1,f,c
  4507  00280A  3603               	rlcf	__div_to_l_@f1+2,f,c
  4508  00280C  3604               	rlcf	__div_to_l_@f1+3,f,c
  4509  00280E  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4510  002810  D7E1               	goto	l2900
  4511  002812  AE0C               	btfss	__div_to_l_@exp1,7,c
  4512  002814  D016               	goto	l2924
  4513  002816  500C               	movf	__div_to_l_@exp1,w,c
  4514  002818  0A80               	xorlw	128
  4515  00281A  0F9F               	addlw	159
  4516  00281C  B0D8               	btfsc	status,0,c
  4517  00281E  D009               	goto	l2920
  4518  002820  0E00               	movlw	0
  4519  002822  6E01               	movwf	?__div_to_l_,c
  4520  002824  0E00               	movlw	0
  4521  002826  6E02               	movwf	?__div_to_l_+1,c
  4522  002828  0E00               	movlw	0
  4523  00282A  6E03               	movwf	?__div_to_l_+2,c
  4524  00282C  0E00               	movlw	0
  4525  00282E  6E04               	movwf	?__div_to_l_+3,c
  4526  002830  0012               	return	
  4527  002832                     l2920:
  4528  002832  90D8               	bcf	status,0,c
  4529  002834  320A               	rrcf	__div_to_l_@quot+3,f,c
  4530  002836  3209               	rrcf	__div_to_l_@quot+2,f,c
  4531  002838  3208               	rrcf	__div_to_l_@quot+1,f,c
  4532  00283A  3207               	rrcf	__div_to_l_@quot,f,c
  4533  00283C  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4534  00283E  D7F9               	goto	l2920
  4535  002840  D015               	goto	l609
  4536  002842                     l2924:
  4537  002842  0E1F               	movlw	31
  4538  002844  640C               	cpfsgt	__div_to_l_@exp1,c
  4539  002846  D00F               	goto	l2932
  4540  002848  0E00               	movlw	0
  4541  00284A  6E01               	movwf	?__div_to_l_,c
  4542  00284C  0E00               	movlw	0
  4543  00284E  6E02               	movwf	?__div_to_l_+1,c
  4544  002850  0E00               	movlw	0
  4545  002852  6E03               	movwf	?__div_to_l_+2,c
  4546  002854  0E00               	movlw	0
  4547  002856  6E04               	movwf	?__div_to_l_+3,c
  4548  002858  0012               	return	
  4549  00285A                     l2930:
  4550  00285A  90D8               	bcf	status,0,c
  4551  00285C  3607               	rlcf	__div_to_l_@quot,f,c
  4552  00285E  3608               	rlcf	__div_to_l_@quot+1,f,c
  4553  002860  3609               	rlcf	__div_to_l_@quot+2,f,c
  4554  002862  360A               	rlcf	__div_to_l_@quot+3,f,c
  4555  002864  060C               	decf	__div_to_l_@exp1,f,c
  4556  002866                     l2932:
  4557  002866  500C               	movf	__div_to_l_@exp1,w,c
  4558  002868  A4D8               	btfss	status,2,c
  4559  00286A  D7F7               	goto	l2930
  4560  00286C                     l609:
  4561  00286C  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4562  002870  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4563  002874  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4564  002878  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4565  00287C  0012               	return		;funcret
  4566  00287E                     __end_of__div_to_l_:
  4567                           	opt stack 0
  4568                           tblptru	equ	0xFF8
  4569                           tblptrh	equ	0xFF7
  4570                           tblptrl	equ	0xFF6
  4571                           tablat	equ	0xFF5
  4572                           prodh	equ	0xFF4
  4573                           prodl	equ	0xFF3
  4574                           wreg	equ	0xFE8
  4575                           indf2	equ	0xFDF
  4576                           postinc2	equ	0xFDE
  4577                           postdec2	equ	0xFDD
  4578                           fsr2h	equ	0xFDA
  4579                           fsr2l	equ	0xFD9
  4580                           status	equ	0xFD8
  4581                           
  4582 ;; *************** function ___lltoft *****************
  4583 ;; Defined at:
  4584 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\lltoft.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  c               4    8[COMRAM] unsigned long 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  exp             1   16[COMRAM] unsigned char 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  3    8[COMRAM] float 
  4591 ;; Registers used:
  4592 ;;		wreg, status,2, status,0, cstack
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4598 ;;      Params:         4       0       0       0       0       0       0       0       0
  4599 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4600 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4601 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4602 ;;Total ram usage:        9 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; Hardware stack levels required when called:    1
  4605 ;; This function calls:
  4606 ;;		___ftpack
  4607 ;; This function is called by:
  4608 ;;		_sprintf
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           	psect	text12
  4613  0032AC                     __ptext12:
  4614                           	opt stack 0
  4615  0032AC                     ___lltoft:
  4616                           	opt stack 26
  4617                           
  4618                           ;incstack = 0
  4619  0032AC  0E8E               	movlw	142
  4620  0032AE  6E11               	movwf	___lltoft@exp,c
  4621  0032B0  D006               	goto	l3098
  4622  0032B2                     l3096:
  4623  0032B2  90D8               	bcf	status,0,c
  4624  0032B4  320C               	rrcf	___lltoft@c+3,f,c
  4625  0032B6  320B               	rrcf	___lltoft@c+2,f,c
  4626  0032B8  320A               	rrcf	___lltoft@c+1,f,c
  4627  0032BA  3209               	rrcf	___lltoft@c,f,c
  4628  0032BC  2A11               	incf	___lltoft@exp,f,c
  4629  0032BE                     l3098:
  4630  0032BE  0E00               	movlw	0
  4631  0032C0  1409               	andwf	___lltoft@c,w,c
  4632  0032C2  6E0D               	movwf	??___lltoft& (0+255),c
  4633  0032C4  0E00               	movlw	0
  4634  0032C6  140A               	andwf	___lltoft@c+1,w,c
  4635  0032C8  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4636  0032CA  0E00               	movlw	0
  4637  0032CC  140B               	andwf	___lltoft@c+2,w,c
  4638  0032CE  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4639  0032D0  0EFF               	movlw	255
  4640  0032D2  140C               	andwf	___lltoft@c+3,w,c
  4641  0032D4  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4642  0032D6  500D               	movf	??___lltoft,w,c
  4643  0032D8  100E               	iorwf	??___lltoft+1,w,c
  4644  0032DA  100F               	iorwf	??___lltoft+2,w,c
  4645  0032DC  1010               	iorwf	??___lltoft+3,w,c
  4646  0032DE  A4D8               	btfss	status,2,c
  4647  0032E0  D7E8               	goto	l3096
  4648  0032E2  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4649  0032E6  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4650  0032EA  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4651  0032EE  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4652  0032F2  0E00               	movlw	0
  4653  0032F4  6E05               	movwf	___ftpack@sign,c
  4654  0032F6  EC0A  F017         	call	___ftpack	;wreg free
  4655  0032FA  C001  F009         	movff	?___ftpack,?___lltoft
  4656  0032FE  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4657  003302  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4658  003306  0012               	return	
  4659  003308                     __end_of___lltoft:
  4660                           	opt stack 0
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           prodh	equ	0xFF4
  4666                           prodl	equ	0xFF3
  4667                           wreg	equ	0xFE8
  4668                           indf2	equ	0xFDF
  4669                           postinc2	equ	0xFDE
  4670                           postdec2	equ	0xFDD
  4671                           fsr2h	equ	0xFDA
  4672                           fsr2l	equ	0xFD9
  4673                           status	equ	0xFD8
  4674                           
  4675 ;; *************** function ___llmod *****************
  4676 ;; Defined at:
  4677 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\llmod.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;  dividend        4   13[COMRAM] unsigned long 
  4680 ;;  divisor         4   17[COMRAM] unsigned long 
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;  counter         1   21[COMRAM] unsigned char 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  4   13[COMRAM] unsigned long 
  4685 ;; Registers used:
  4686 ;;		wreg, status,2, status,0
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4692 ;;      Params:         8       0       0       0       0       0       0       0       0
  4693 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4694 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4695 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4696 ;;Total ram usage:        9 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; This function calls:
  4699 ;;		Nothing
  4700 ;; This function is called by:
  4701 ;;		_sprintf
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	text13
  4706  003246                     __ptext13:
  4707                           	opt stack 0
  4708  003246                     ___llmod:
  4709                           	opt stack 27
  4710                           
  4711                           ;incstack = 0
  4712  003246  5012               	movf	___llmod@divisor,w,c
  4713  003248  1013               	iorwf	___llmod@divisor+1,w,c
  4714  00324A  1014               	iorwf	___llmod@divisor+2,w,c
  4715  00324C  1015               	iorwf	___llmod@divisor+3,w,c
  4716  00324E  B4D8               	btfsc	status,2,c
  4717  003250  D024               	goto	l798
  4718  003252  0E01               	movlw	1
  4719  003254  6E16               	movwf	___llmod@counter,c
  4720  003256  D006               	goto	l3084
  4721  003258                     l3082:
  4722  003258  90D8               	bcf	status,0,c
  4723  00325A  3612               	rlcf	___llmod@divisor,f,c
  4724  00325C  3613               	rlcf	___llmod@divisor+1,f,c
  4725  00325E  3614               	rlcf	___llmod@divisor+2,f,c
  4726  003260  3615               	rlcf	___llmod@divisor+3,f,c
  4727  003262  2A16               	incf	___llmod@counter,f,c
  4728  003264                     l3084:
  4729  003264  AE15               	btfss	___llmod@divisor+3,7,c
  4730  003266  D7F8               	goto	l3082
  4731  003268                     l3086:
  4732  003268  5012               	movf	___llmod@divisor,w,c
  4733  00326A  5C0E               	subwf	___llmod@dividend,w,c
  4734  00326C  5013               	movf	___llmod@divisor+1,w,c
  4735  00326E  580F               	subwfb	___llmod@dividend+1,w,c
  4736  003270  5014               	movf	___llmod@divisor+2,w,c
  4737  003272  5810               	subwfb	___llmod@dividend+2,w,c
  4738  003274  5015               	movf	___llmod@divisor+3,w,c
  4739  003276  5811               	subwfb	___llmod@dividend+3,w,c
  4740  003278  A0D8               	btfss	status,0,c
  4741  00327A  D008               	goto	l3090
  4742  00327C  5012               	movf	___llmod@divisor,w,c
  4743  00327E  5E0E               	subwf	___llmod@dividend,f,c
  4744  003280  5013               	movf	___llmod@divisor+1,w,c
  4745  003282  5A0F               	subwfb	___llmod@dividend+1,f,c
  4746  003284  5014               	movf	___llmod@divisor+2,w,c
  4747  003286  5A10               	subwfb	___llmod@dividend+2,f,c
  4748  003288  5015               	movf	___llmod@divisor+3,w,c
  4749  00328A  5A11               	subwfb	___llmod@dividend+3,f,c
  4750  00328C                     l3090:
  4751  00328C  90D8               	bcf	status,0,c
  4752  00328E  3215               	rrcf	___llmod@divisor+3,f,c
  4753  003290  3214               	rrcf	___llmod@divisor+2,f,c
  4754  003292  3213               	rrcf	___llmod@divisor+1,f,c
  4755  003294  3212               	rrcf	___llmod@divisor,f,c
  4756  003296  2E16               	decfsz	___llmod@counter,f,c
  4757  003298  D7E7               	goto	l3086
  4758  00329A                     l798:
  4759  00329A  C00E  F00E         	movff	___llmod@dividend,?___llmod
  4760  00329E  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  4761  0032A2  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  4762  0032A6  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  4763  0032AA  0012               	return		;funcret
  4764  0032AC                     __end_of___llmod:
  4765                           	opt stack 0
  4766                           tblptru	equ	0xFF8
  4767                           tblptrh	equ	0xFF7
  4768                           tblptrl	equ	0xFF6
  4769                           tablat	equ	0xFF5
  4770                           prodh	equ	0xFF4
  4771                           prodl	equ	0xFF3
  4772                           wreg	equ	0xFE8
  4773                           indf2	equ	0xFDF
  4774                           postinc2	equ	0xFDE
  4775                           postdec2	equ	0xFDD
  4776                           fsr2h	equ	0xFDA
  4777                           fsr2l	equ	0xFD9
  4778                           status	equ	0xFD8
  4779                           
  4780 ;; *************** function ___lldiv *****************
  4781 ;; Defined at:
  4782 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\lldiv.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;  dividend        4    0[COMRAM] unsigned long 
  4785 ;;  divisor         4    4[COMRAM] unsigned long 
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;  quotient        4    8[COMRAM] unsigned long 
  4788 ;;  counter         1   12[COMRAM] unsigned char 
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  4    0[COMRAM] unsigned long 
  4791 ;; Registers used:
  4792 ;;		wreg, status,2, status,0
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4798 ;;      Params:         8       0       0       0       0       0       0       0       0
  4799 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4800 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4801 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4802 ;;Total ram usage:       13 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; This function calls:
  4805 ;;		Nothing
  4806 ;; This function is called by:
  4807 ;;		_sprintf
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           	psect	text14
  4812  00306E                     __ptext14:
  4813                           	opt stack 0
  4814  00306E                     ___lldiv:
  4815                           	opt stack 27
  4816                           
  4817                           ;incstack = 0
  4818  00306E  0E00               	movlw	0
  4819  003070  6E09               	movwf	___lldiv@quotient,c
  4820  003072  0E00               	movlw	0
  4821  003074  6E0A               	movwf	___lldiv@quotient+1,c
  4822  003076  0E00               	movlw	0
  4823  003078  6E0B               	movwf	___lldiv@quotient+2,c
  4824  00307A  0E00               	movlw	0
  4825  00307C  6E0C               	movwf	___lldiv@quotient+3,c
  4826  00307E  5005               	movf	___lldiv@divisor,w,c
  4827  003080  1006               	iorwf	___lldiv@divisor+1,w,c
  4828  003082  1007               	iorwf	___lldiv@divisor+2,w,c
  4829  003084  1008               	iorwf	___lldiv@divisor+3,w,c
  4830  003086  B4D8               	btfsc	status,2,c
  4831  003088  D02A               	goto	l788
  4832  00308A  0E01               	movlw	1
  4833  00308C  6E0D               	movwf	___lldiv@counter,c
  4834  00308E  D006               	goto	l3064
  4835  003090                     l3062:
  4836  003090  90D8               	bcf	status,0,c
  4837  003092  3605               	rlcf	___lldiv@divisor,f,c
  4838  003094  3606               	rlcf	___lldiv@divisor+1,f,c
  4839  003096  3607               	rlcf	___lldiv@divisor+2,f,c
  4840  003098  3608               	rlcf	___lldiv@divisor+3,f,c
  4841  00309A  2A0D               	incf	___lldiv@counter,f,c
  4842  00309C                     l3064:
  4843  00309C  AE08               	btfss	___lldiv@divisor+3,7,c
  4844  00309E  D7F8               	goto	l3062
  4845  0030A0                     l3066:
  4846  0030A0  90D8               	bcf	status,0,c
  4847  0030A2  3609               	rlcf	___lldiv@quotient,f,c
  4848  0030A4  360A               	rlcf	___lldiv@quotient+1,f,c
  4849  0030A6  360B               	rlcf	___lldiv@quotient+2,f,c
  4850  0030A8  360C               	rlcf	___lldiv@quotient+3,f,c
  4851  0030AA  5005               	movf	___lldiv@divisor,w,c
  4852  0030AC  5C01               	subwf	___lldiv@dividend,w,c
  4853  0030AE  5006               	movf	___lldiv@divisor+1,w,c
  4854  0030B0  5802               	subwfb	___lldiv@dividend+1,w,c
  4855  0030B2  5007               	movf	___lldiv@divisor+2,w,c
  4856  0030B4  5803               	subwfb	___lldiv@dividend+2,w,c
  4857  0030B6  5008               	movf	___lldiv@divisor+3,w,c
  4858  0030B8  5804               	subwfb	___lldiv@dividend+3,w,c
  4859  0030BA  A0D8               	btfss	status,0,c
  4860  0030BC  D009               	goto	l3074
  4861  0030BE  5005               	movf	___lldiv@divisor,w,c
  4862  0030C0  5E01               	subwf	___lldiv@dividend,f,c
  4863  0030C2  5006               	movf	___lldiv@divisor+1,w,c
  4864  0030C4  5A02               	subwfb	___lldiv@dividend+1,f,c
  4865  0030C6  5007               	movf	___lldiv@divisor+2,w,c
  4866  0030C8  5A03               	subwfb	___lldiv@dividend+2,f,c
  4867  0030CA  5008               	movf	___lldiv@divisor+3,w,c
  4868  0030CC  5A04               	subwfb	___lldiv@dividend+3,f,c
  4869  0030CE  8009               	bsf	___lldiv@quotient,0,c
  4870  0030D0                     l3074:
  4871  0030D0  90D8               	bcf	status,0,c
  4872  0030D2  3208               	rrcf	___lldiv@divisor+3,f,c
  4873  0030D4  3207               	rrcf	___lldiv@divisor+2,f,c
  4874  0030D6  3206               	rrcf	___lldiv@divisor+1,f,c
  4875  0030D8  3205               	rrcf	___lldiv@divisor,f,c
  4876  0030DA  2E0D               	decfsz	___lldiv@counter,f,c
  4877  0030DC  D7E1               	goto	l3066
  4878  0030DE                     l788:
  4879  0030DE  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4880  0030E2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4881  0030E6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4882  0030EA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4883  0030EE  0012               	return		;funcret
  4884  0030F0                     __end_of___lldiv:
  4885                           	opt stack 0
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           wreg	equ	0xFE8
  4893                           indf2	equ	0xFDF
  4894                           postinc2	equ	0xFDE
  4895                           postdec2	equ	0xFDD
  4896                           fsr2h	equ	0xFDA
  4897                           fsr2l	equ	0xFD9
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function ___ftsub *****************
  4901 ;; Defined at:
  4902 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftsub.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  f1              3   57[COMRAM] float 
  4905 ;;  f2              3   60[COMRAM] float 
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;		None
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  3   57[COMRAM] float 
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4917 ;;      Params:         6       0       0       0       0       0       0       0       0
  4918 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4920 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4921 ;;Total ram usage:        6 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    2
  4924 ;; This function calls:
  4925 ;;		___ftadd
  4926 ;; This function is called by:
  4927 ;;		_sprintf
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           	psect	text15
  4932  0033B2                     __ptext15:
  4933                           	opt stack 0
  4934  0033B2                     ___ftsub:
  4935                           	opt stack 25
  4936                           
  4937                           ;incstack = 0
  4938  0033B2  503D               	movf	___ftsub@f2,w,c
  4939  0033B4  103E               	iorwf	___ftsub@f2+1,w,c
  4940  0033B6  103F               	iorwf	___ftsub@f2+2,w,c
  4941  0033B8  B4D8               	btfsc	status,2,c
  4942  0033BA  D006               	goto	l2984
  4943  0033BC  0E00               	movlw	0
  4944  0033BE  1A3D               	xorwf	___ftsub@f2,f,c
  4945  0033C0  0E00               	movlw	0
  4946  0033C2  1A3E               	xorwf	___ftsub@f2+1,f,c
  4947  0033C4  0E80               	movlw	128
  4948  0033C6  1A3F               	xorwf	___ftsub@f2+2,f,c
  4949  0033C8                     l2984:
  4950  0033C8  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4951  0033CC  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4952  0033D0  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4953  0033D4  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4954  0033D8  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4955  0033DC  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4956  0033E0  EC5B  F010         	call	___ftadd	;wreg free
  4957  0033E4  C02E  F03A         	movff	?___ftadd,?___ftsub
  4958  0033E8  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4959  0033EC  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4960  0033F0  0012               	return	
  4961  0033F2                     __end_of___ftsub:
  4962                           	opt stack 0
  4963                           tblptru	equ	0xFF8
  4964                           tblptrh	equ	0xFF7
  4965                           tblptrl	equ	0xFF6
  4966                           tablat	equ	0xFF5
  4967                           prodh	equ	0xFF4
  4968                           prodl	equ	0xFF3
  4969                           wreg	equ	0xFE8
  4970                           indf2	equ	0xFDF
  4971                           postinc2	equ	0xFDE
  4972                           postdec2	equ	0xFDD
  4973                           fsr2h	equ	0xFDA
  4974                           fsr2l	equ	0xFD9
  4975                           status	equ	0xFD8
  4976                           
  4977 ;; *************** function _Lcd_Write_String *****************
  4978 ;; Defined at:
  4979 ;;		line 99 in file "lcd.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;  a               2    4[COMRAM] PTR unsigned char 
  4982 ;;		 -> STR_6(3), STR_5(7), STR_4(7), STR_3(7), 
  4983 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  i               2    8[COMRAM] int 
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  1    wreg      void 
  4988 ;; Registers used:
  4989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4995 ;;      Params:         2       0       0       0       0       0       0       0       0
  4996 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4997 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4998 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4999 ;;Total ram usage:        6 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    2
  5002 ;; This function calls:
  5003 ;;		_Lcd_Write_Char
  5004 ;; This function is called by:
  5005 ;;		_Lcd_Write_Float
  5006 ;;		_main
  5007 ;;		_temp_sense
  5008 ;;		_Lcd_Write_Integer
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           	psect	text16
  5013  003164                     __ptext16:
  5014                           	opt stack 0
  5015  003164                     _Lcd_Write_String:
  5016                           	opt stack 27
  5017                           
  5018                           ;lcd.c: 101: int i;
  5019                           ;lcd.c: 102: for(i=0;a[i]!='\0';i++)
  5020                           
  5021                           ;incstack = 0
  5022  003164  0E00               	movlw	0
  5023  003166  6E0A               	movwf	Lcd_Write_String@i+1,c
  5024  003168  0E00               	movlw	0
  5025  00316A  6E09               	movwf	Lcd_Write_String@i,c
  5026  00316C  D01A               	goto	l3120
  5027  00316E                     l3116:
  5028                           
  5029                           ;lcd.c: 103: Lcd_Write_Char(a[i]);
  5030  00316E  5009               	movf	Lcd_Write_String@i,w,c
  5031  003170  2405               	addwf	Lcd_Write_String@a,w,c
  5032  003172  6E07               	movwf	??_Lcd_Write_String& (0+255),c
  5033  003174  500A               	movf	Lcd_Write_String@i+1,w,c
  5034  003176  2006               	addwfc	Lcd_Write_String@a+1,w,c
  5035  003178  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5036  00317A  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5037  00317E  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5038  003182  6AF8               	clrf	tblptru,c
  5039  003184  0E07               	movlw	(high __ramtop+-1)
  5040  003186  64F7               	cpfsgt	tblptrh,c
  5041  003188  D003               	bra	u2967
  5042  00318A  0008               	tblrd		*
  5043  00318C  50F5               	movf	tablat,w,c
  5044  00318E  D005               	bra	u2960
  5045  003190                     u2967:
  5046  003190  CFF6 FFE9          	movff	tblptrl,fsr0l
  5047  003194  CFF7 FFEA          	movff	tblptrh,fsr0h
  5048  003198  50EF               	movf	indf0,w,c
  5049  00319A                     u2960:
  5050  00319A  EC16  F01A         	call	_Lcd_Write_Char
  5051  00319E  4A09               	infsnz	Lcd_Write_String@i,f,c
  5052  0031A0  2A0A               	incf	Lcd_Write_String@i+1,f,c
  5053  0031A2                     l3120:
  5054  0031A2  5009               	movf	Lcd_Write_String@i,w,c
  5055  0031A4  2405               	addwf	Lcd_Write_String@a,w,c
  5056  0031A6  6E07               	movwf	??_Lcd_Write_String& (0+255),c
  5057  0031A8  500A               	movf	Lcd_Write_String@i+1,w,c
  5058  0031AA  2006               	addwfc	Lcd_Write_String@a+1,w,c
  5059  0031AC  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  5060  0031AE  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5061  0031B2  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5062  0031B6  6AF8               	clrf	tblptru,c
  5063  0031B8  0E07               	movlw	(high __ramtop+-1)
  5064  0031BA  64F7               	cpfsgt	tblptrh,c
  5065  0031BC  D003               	bra	u2977
  5066  0031BE  0008               	tblrd		*
  5067  0031C0  50F5               	movf	tablat,w,c
  5068  0031C2  D005               	bra	u2970
  5069  0031C4                     u2977:
  5070  0031C4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5071  0031C8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5072  0031CC  50EF               	movf	indf0,w,c
  5073  0031CE                     u2970:
  5074  0031CE  0900               	iorlw	0
  5075  0031D0  B4D8               	btfsc	status,2,c
  5076  0031D2  0012               	return	
  5077  0031D4  D7CC               	goto	l3116
  5078  0031D6                     __end_of_Lcd_Write_String:
  5079                           	opt stack 0
  5080                           tblptru	equ	0xFF8
  5081                           tblptrh	equ	0xFF7
  5082                           tblptrl	equ	0xFF6
  5083                           tablat	equ	0xFF5
  5084                           prodh	equ	0xFF4
  5085                           prodl	equ	0xFF3
  5086                           indf0	equ	0xFEF
  5087                           fsr0h	equ	0xFEA
  5088                           fsr0l	equ	0xFE9
  5089                           wreg	equ	0xFE8
  5090                           indf2	equ	0xFDF
  5091                           postinc2	equ	0xFDE
  5092                           postdec2	equ	0xFDD
  5093                           fsr2h	equ	0xFDA
  5094                           fsr2l	equ	0xFD9
  5095                           status	equ	0xFD8
  5096                           
  5097 ;; *************** function _Lcd_Write_Char *****************
  5098 ;; Defined at:
  5099 ;;		line 83 in file "lcd.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;  a               1    wreg     unsigned char 
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  a               1    3[COMRAM] unsigned char 
  5104 ;;  y               1    2[COMRAM] unsigned char 
  5105 ;;  temp            1    1[COMRAM] unsigned char 
  5106 ;; Return value:  Size  Location     Type
  5107 ;;                  1    wreg      void 
  5108 ;; Registers used:
  5109 ;;		wreg, status,2, status,0, cstack
  5110 ;; Tracked objects:
  5111 ;;		On entry : 0/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5115 ;;      Params:         0       0       0       0       0       0       0       0       0
  5116 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5118 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5119 ;;Total ram usage:        3 bytes
  5120 ;; Hardware stack levels used:    1
  5121 ;; Hardware stack levels required when called:    1
  5122 ;; This function calls:
  5123 ;;		_Lcd_Port
  5124 ;; This function is called by:
  5125 ;;		_Lcd_Write_String
  5126 ;; This function uses a non-reentrant model
  5127 ;;
  5128                           
  5129                           	psect	text17
  5130  00342C                     __ptext17:
  5131                           	opt stack 0
  5132  00342C                     _Lcd_Write_Char:
  5133                           	opt stack 27
  5134                           
  5135                           ;incstack = 0
  5136                           ;Lcd_Write_Char@a stored from wreg
  5137  00342C  6E04               	movwf	Lcd_Write_Char@a,c
  5138                           
  5139                           ;lcd.c: 85: char temp,y;
  5140                           ;lcd.c: 86: temp = a&0x0F;
  5141  00342E  5004               	movf	Lcd_Write_Char@a,w,c
  5142  003430  0B0F               	andlw	15
  5143  003432  6E02               	movwf	Lcd_Write_Char@temp,c
  5144                           
  5145                           ;lcd.c: 87: y = a&0xF0;
  5146  003434  5004               	movf	Lcd_Write_Char@a,w,c
  5147  003436  0BF0               	andlw	240
  5148  003438  6E03               	movwf	Lcd_Write_Char@y,c
  5149                           
  5150                           ;lcd.c: 88: PORTEbits.RE0 = 1;
  5151  00343A  8084               	bsf	3972,0,c	;volatile
  5152                           
  5153                           ;lcd.c: 89: Lcd_Port(y>>4);
  5154  00343C  3803               	swapf	Lcd_Write_Char@y,w,c
  5155  00343E  0B0F               	andlw	15
  5156  003440  EC96  F01A         	call	_Lcd_Port
  5157                           
  5158                           ;lcd.c: 90: PORTEbits.RE2 = 1;
  5159  003444  8484               	bsf	3972,2,c	;volatile
  5160                           
  5161                           ;lcd.c: 91: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5162  003446  0E0D               	movlw	13
  5163  003448                     u3907:
  5164  003448  2EE8               	decfsz	wreg,f,c
  5165  00344A  D7FE               	goto	u3907
  5166  00344C  F000               	nop	
  5167                           
  5168                           ;lcd.c: 92: PORTEbits.RE2 = 0;
  5169  00344E  9484               	bcf	3972,2,c	;volatile
  5170                           
  5171                           ;lcd.c: 93: Lcd_Port(temp);
  5172  003450  5002               	movf	Lcd_Write_Char@temp,w,c
  5173  003452  EC96  F01A         	call	_Lcd_Port
  5174                           
  5175                           ;lcd.c: 94: PORTEbits.RE2 = 1;
  5176  003456  8484               	bsf	3972,2,c	;volatile
  5177                           
  5178                           ;lcd.c: 95: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5179  003458  0E0D               	movlw	13
  5180  00345A                     u3917:
  5181  00345A  2EE8               	decfsz	wreg,f,c
  5182  00345C  D7FE               	goto	u3917
  5183  00345E  F000               	nop	
  5184                           
  5185                           ;lcd.c: 96: PORTEbits.RE2 = 0;
  5186  003460  9484               	bcf	3972,2,c	;volatile
  5187  003462  0012               	return		;funcret
  5188  003464                     __end_of_Lcd_Write_Char:
  5189                           	opt stack 0
  5190                           tblptru	equ	0xFF8
  5191                           tblptrh	equ	0xFF7
  5192                           tblptrl	equ	0xFF6
  5193                           tablat	equ	0xFF5
  5194                           prodh	equ	0xFF4
  5195                           prodl	equ	0xFF3
  5196                           indf0	equ	0xFEF
  5197                           fsr0h	equ	0xFEA
  5198                           fsr0l	equ	0xFE9
  5199                           wreg	equ	0xFE8
  5200                           indf2	equ	0xFDF
  5201                           postinc2	equ	0xFDE
  5202                           postdec2	equ	0xFDD
  5203                           fsr2h	equ	0xFDA
  5204                           fsr2l	equ	0xFD9
  5205                           status	equ	0xFD8
  5206                           
  5207 ;; *************** function _Lcd_Set_Cursor *****************
  5208 ;; Defined at:
  5209 ;;		line 42 in file "lcd.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;  a               1    wreg     unsigned char 
  5212 ;;  b               1    3[COMRAM] unsigned char 
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  a               1    4[COMRAM] unsigned char 
  5215 ;;  temp            1    7[COMRAM] unsigned char 
  5216 ;;  y               1    6[COMRAM] unsigned char 
  5217 ;;  z               1    5[COMRAM] unsigned char 
  5218 ;; Return value:  Size  Location     Type
  5219 ;;                  1    wreg      void 
  5220 ;; Registers used:
  5221 ;;		wreg, status,2, status,0, cstack
  5222 ;; Tracked objects:
  5223 ;;		On entry : 0/0
  5224 ;;		On exit  : 0/0
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5227 ;;      Params:         1       0       0       0       0       0       0       0       0
  5228 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5229 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5230 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5231 ;;Total ram usage:        5 bytes
  5232 ;; Hardware stack levels used:    1
  5233 ;; Hardware stack levels required when called:    2
  5234 ;; This function calls:
  5235 ;;		_Lcd_Cmd
  5236 ;; This function is called by:
  5237 ;;		_main
  5238 ;;		_temp_sense
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242                           	psect	text18
  5243  003362                     __ptext18:
  5244                           	opt stack 0
  5245  003362                     _Lcd_Set_Cursor:
  5246                           	opt stack 27
  5247                           
  5248                           ;incstack = 0
  5249                           ;Lcd_Set_Cursor@a stored from wreg
  5250  003362  6E05               	movwf	Lcd_Set_Cursor@a,c
  5251                           
  5252                           ;lcd.c: 44: char temp,z,y;
  5253                           ;lcd.c: 45: if(a == 1)
  5254  003364  0405               	decf	Lcd_Set_Cursor@a,w,c
  5255  003366  A4D8               	btfss	status,2,c
  5256  003368  D010               	goto	l3408
  5257                           
  5258                           ;lcd.c: 46: {
  5259                           ;lcd.c: 47: temp = 0x80 + b - 1;
  5260  00336A  5004               	movf	Lcd_Set_Cursor@b,w,c
  5261  00336C  0F7F               	addlw	127
  5262  00336E  6E08               	movwf	Lcd_Set_Cursor@temp,c
  5263                           
  5264                           ;lcd.c: 48: z = temp>>4;
  5265  003370  3808               	swapf	Lcd_Set_Cursor@temp,w,c
  5266  003372  0B0F               	andlw	15
  5267  003374  6E06               	movwf	Lcd_Set_Cursor@z,c
  5268                           
  5269                           ;lcd.c: 49: y = temp & 0x0F;
  5270  003376  5008               	movf	Lcd_Set_Cursor@temp,w,c
  5271  003378  0B0F               	andlw	15
  5272  00337A  6E07               	movwf	Lcd_Set_Cursor@y,c
  5273                           
  5274                           ;lcd.c: 50: Lcd_Cmd(z);
  5275  00337C  5006               	movf	Lcd_Set_Cursor@z,w,c
  5276  00337E  EC0D  F01B         	call	_Lcd_Cmd
  5277                           
  5278                           ;lcd.c: 51: Lcd_Cmd(y);
  5279  003382  5007               	movf	Lcd_Set_Cursor@y,w,c
  5280  003384  EC0D  F01B         	call	_Lcd_Cmd
  5281                           
  5282                           ;lcd.c: 52: }
  5283  003388  0012               	return	
  5284  00338A                     l3408:
  5285                           
  5286                           ;lcd.c: 53: else if(a == 2)
  5287  00338A  0E02               	movlw	2
  5288  00338C  1805               	xorwf	Lcd_Set_Cursor@a,w,c
  5289  00338E  A4D8               	btfss	status,2,c
  5290  003390  0012               	return	
  5291                           
  5292                           ;lcd.c: 54: {
  5293                           ;lcd.c: 55: temp = 0xC0 + b - 1;
  5294  003392  5004               	movf	Lcd_Set_Cursor@b,w,c
  5295  003394  0FBF               	addlw	191
  5296  003396  6E08               	movwf	Lcd_Set_Cursor@temp,c
  5297                           
  5298                           ;lcd.c: 56: z = temp>>4;
  5299  003398  3808               	swapf	Lcd_Set_Cursor@temp,w,c
  5300  00339A  0B0F               	andlw	15
  5301  00339C  6E06               	movwf	Lcd_Set_Cursor@z,c
  5302                           
  5303                           ;lcd.c: 57: y = temp & 0x0F;
  5304  00339E  5008               	movf	Lcd_Set_Cursor@temp,w,c
  5305  0033A0  0B0F               	andlw	15
  5306  0033A2  6E07               	movwf	Lcd_Set_Cursor@y,c
  5307                           
  5308                           ;lcd.c: 58: Lcd_Cmd(z);
  5309  0033A4  5006               	movf	Lcd_Set_Cursor@z,w,c
  5310  0033A6  EC0D  F01B         	call	_Lcd_Cmd
  5311                           
  5312                           ;lcd.c: 59: Lcd_Cmd(y);
  5313  0033AA  5007               	movf	Lcd_Set_Cursor@y,w,c
  5314  0033AC  EC0D  F01B         	call	_Lcd_Cmd
  5315  0033B0  0012               	return	
  5316  0033B2                     __end_of_Lcd_Set_Cursor:
  5317                           	opt stack 0
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           indf0	equ	0xFEF
  5325                           fsr0h	equ	0xFEA
  5326                           fsr0l	equ	0xFE9
  5327                           wreg	equ	0xFE8
  5328                           indf2	equ	0xFDF
  5329                           postinc2	equ	0xFDE
  5330                           postdec2	equ	0xFDD
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _ADC_select_channel *****************
  5336 ;; Defined at:
  5337 ;;		line 35 in file "ADC.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  channel         1    wreg     unsigned char 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  channel         1    0[COMRAM] unsigned char 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  1    wreg      void 
  5344 ;; Registers used:
  5345 ;;		wreg, status,2, status,0
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5351 ;;      Params:         0       0       0       0       0       0       0       0       0
  5352 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5354 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5355 ;;Total ram usage:        1 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; This function calls:
  5358 ;;		Nothing
  5359 ;; This function is called by:
  5360 ;;		_temp_sense
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           	psect	text19
  5365  002D32                     __ptext19:
  5366                           	opt stack 0
  5367  002D32                     _ADC_select_channel:
  5368                           	opt stack 29
  5369                           
  5370                           ;incstack = 0
  5371                           ;ADC_select_channel@channel stored from wreg
  5372  002D32  6E01               	movwf	ADC_select_channel@channel,c
  5373                           
  5374                           ;ADC.c: 37: switch (channel){
  5375  002D34  D046               	goto	l3462
  5376  002D36                     l108:
  5377                           
  5378                           ;ADC.c: 39: ADCON0bits.CHS=0b0000;
  5379  002D36  94C2               	bcf	4034,2,c	;volatile
  5380  002D38  96C2               	bcf	4034,3,c	;volatile
  5381  002D3A  98C2               	bcf	4034,4,c	;volatile
  5382  002D3C  9AC2               	bcf	4034,5,c	;volatile
  5383                           
  5384                           ;ADC.c: 40: break;
  5385  002D3E  0012               	return	
  5386  002D40                     l3436:
  5387                           
  5388                           ;ADC.c: 42: ADCON0bits.CHS=0b0001;
  5389  002D40  50C2               	movf	4034,w,c	;volatile
  5390  002D42  0BC3               	andlw	-61
  5391  002D44  0904               	iorlw	4
  5392  002D46  6EC2               	movwf	4034,c	;volatile
  5393                           
  5394                           ;ADC.c: 43: break;
  5395  002D48  0012               	return	
  5396  002D4A                     l3438:
  5397                           
  5398                           ;ADC.c: 45: ADCON0bits.CHS=0b0010;
  5399  002D4A  50C2               	movf	4034,w,c	;volatile
  5400  002D4C  0BC3               	andlw	-61
  5401  002D4E  0908               	iorlw	8
  5402  002D50  6EC2               	movwf	4034,c	;volatile
  5403                           
  5404                           ;ADC.c: 46: break;
  5405  002D52  0012               	return	
  5406  002D54                     l3440:
  5407                           
  5408                           ;ADC.c: 48: ADCON0bits.CHS=0b0011;
  5409  002D54  50C2               	movf	4034,w,c	;volatile
  5410  002D56  0BC3               	andlw	-61
  5411  002D58  090C               	iorlw	12
  5412  002D5A  6EC2               	movwf	4034,c	;volatile
  5413                           
  5414                           ;ADC.c: 49: break;
  5415  002D5C  0012               	return	
  5416  002D5E                     l3442:
  5417                           
  5418                           ;ADC.c: 51: ADCON0bits.CHS=0b0100;
  5419  002D5E  50C2               	movf	4034,w,c	;volatile
  5420  002D60  0BC3               	andlw	-61
  5421  002D62  0910               	iorlw	16
  5422  002D64  6EC2               	movwf	4034,c	;volatile
  5423                           
  5424                           ;ADC.c: 52: break;
  5425  002D66  0012               	return	
  5426  002D68                     l3444:
  5427                           
  5428                           ;ADC.c: 54: ADCON0bits.CHS=5;
  5429  002D68  50C2               	movf	4034,w,c	;volatile
  5430  002D6A  0BC3               	andlw	-61
  5431  002D6C  0914               	iorlw	20
  5432  002D6E  6EC2               	movwf	4034,c	;volatile
  5433                           
  5434                           ;ADC.c: 55: break;
  5435  002D70  0012               	return	
  5436  002D72                     l3446:
  5437                           
  5438                           ;ADC.c: 57: ADCON0bits.CHS=0b0110;
  5439  002D72  50C2               	movf	4034,w,c	;volatile
  5440  002D74  0BC3               	andlw	-61
  5441  002D76  0918               	iorlw	24
  5442  002D78  6EC2               	movwf	4034,c	;volatile
  5443                           
  5444                           ;ADC.c: 58: break;
  5445  002D7A  0012               	return	
  5446  002D7C                     l3448:
  5447                           
  5448                           ;ADC.c: 60: ADCON0bits.CHS=0b00111;
  5449  002D7C  50C2               	movf	4034,w,c	;volatile
  5450  002D7E  0BC3               	andlw	-61
  5451  002D80  091C               	iorlw	28
  5452  002D82  6EC2               	movwf	4034,c	;volatile
  5453                           
  5454                           ;ADC.c: 61: break;
  5455  002D84  0012               	return	
  5456  002D86                     l3450:
  5457                           
  5458                           ;ADC.c: 63: ADCON0bits.CHS=8;
  5459  002D86  50C2               	movf	4034,w,c	;volatile
  5460  002D88  0BC3               	andlw	-61
  5461  002D8A  0920               	iorlw	32
  5462  002D8C  6EC2               	movwf	4034,c	;volatile
  5463                           
  5464                           ;ADC.c: 64: break;
  5465  002D8E  0012               	return	
  5466  002D90                     l3452:
  5467                           
  5468                           ;ADC.c: 66: ADCON0bits.CHS=9;
  5469  002D90  50C2               	movf	4034,w,c	;volatile
  5470  002D92  0BC3               	andlw	-61
  5471  002D94  0924               	iorlw	36
  5472  002D96  6EC2               	movwf	4034,c	;volatile
  5473                           
  5474                           ;ADC.c: 67: break;
  5475  002D98  0012               	return	
  5476  002D9A                     l3454:
  5477                           
  5478                           ;ADC.c: 69: ADCON0bits.CHS=10;
  5479  002D9A  50C2               	movf	4034,w,c	;volatile
  5480  002D9C  0BC3               	andlw	-61
  5481  002D9E  0928               	iorlw	40
  5482  002DA0  6EC2               	movwf	4034,c	;volatile
  5483                           
  5484                           ;ADC.c: 70: break;
  5485  002DA2  0012               	return	
  5486  002DA4                     l3456:
  5487                           
  5488                           ;ADC.c: 72: ADCON0bits.CHS=11;
  5489  002DA4  50C2               	movf	4034,w,c	;volatile
  5490  002DA6  0BC3               	andlw	-61
  5491  002DA8  092C               	iorlw	44
  5492  002DAA  6EC2               	movwf	4034,c	;volatile
  5493                           
  5494                           ;ADC.c: 73: break;
  5495  002DAC  0012               	return	
  5496  002DAE                     l3458:
  5497                           
  5498                           ;ADC.c: 75: ADCON0bits.CHS=12;
  5499  002DAE  50C2               	movf	4034,w,c	;volatile
  5500  002DB0  0BC3               	andlw	-61
  5501  002DB2  0930               	iorlw	48
  5502  002DB4  6EC2               	movwf	4034,c	;volatile
  5503                           
  5504                           ;ADC.c: 76: break;
  5505  002DB6  0012               	return	
  5506  002DB8                     l122:
  5507                           
  5508                           ;ADC.c: 78: ADCON0bits.CHS=0b0000;
  5509  002DB8  94C2               	bcf	4034,2,c	;volatile
  5510  002DBA  96C2               	bcf	4034,3,c	;volatile
  5511  002DBC  98C2               	bcf	4034,4,c	;volatile
  5512  002DBE  9AC2               	bcf	4034,5,c	;volatile
  5513                           
  5514                           ;ADC.c: 80: }
  5515                           
  5516                           ;ADC.c: 79: break;
  5517  002DC0  0012               	return	
  5518  002DC2                     l3462:
  5519  002DC2  5001               	movf	ADC_select_channel@channel,w,c
  5520                           
  5521                           ; Switch size 1, requested type "space"
  5522                           ; Number of cases is 13, Range of values is 0 to 12
  5523                           ; switch strategies available:
  5524                           ; Name         Instructions Cycles
  5525                           ; simple_byte           40    21 (average)
  5526                           ;	Chosen strategy is simple_byte
  5527  002DC4  0A00               	xorlw	0	; case 0
  5528  002DC6  B4D8               	btfsc	status,2,c
  5529  002DC8  D7B6               	goto	l108
  5530  002DCA  0A01               	xorlw	1	; case 1
  5531  002DCC  B4D8               	btfsc	status,2,c
  5532  002DCE  D7B8               	goto	l3436
  5533  002DD0  0A03               	xorlw	3	; case 2
  5534  002DD2  B4D8               	btfsc	status,2,c
  5535  002DD4  D7BA               	goto	l3438
  5536  002DD6  0A01               	xorlw	1	; case 3
  5537  002DD8  B4D8               	btfsc	status,2,c
  5538  002DDA  D7BC               	goto	l3440
  5539  002DDC  0A07               	xorlw	7	; case 4
  5540  002DDE  B4D8               	btfsc	status,2,c
  5541  002DE0  D7BE               	goto	l3442
  5542  002DE2  0A01               	xorlw	1	; case 5
  5543  002DE4  B4D8               	btfsc	status,2,c
  5544  002DE6  D7C0               	goto	l3444
  5545  002DE8  0A03               	xorlw	3	; case 6
  5546  002DEA  B4D8               	btfsc	status,2,c
  5547  002DEC  D7C2               	goto	l3446
  5548  002DEE  0A01               	xorlw	1	; case 7
  5549  002DF0  B4D8               	btfsc	status,2,c
  5550  002DF2  D7C4               	goto	l3448
  5551  002DF4  0A0F               	xorlw	15	; case 8
  5552  002DF6  B4D8               	btfsc	status,2,c
  5553  002DF8  D7C6               	goto	l3450
  5554  002DFA  0A01               	xorlw	1	; case 9
  5555  002DFC  B4D8               	btfsc	status,2,c
  5556  002DFE  D7C8               	goto	l3452
  5557  002E00  0A03               	xorlw	3	; case 10
  5558  002E02  B4D8               	btfsc	status,2,c
  5559  002E04  D7CA               	goto	l3454
  5560  002E06  0A01               	xorlw	1	; case 11
  5561  002E08  B4D8               	btfsc	status,2,c
  5562  002E0A  D7CC               	goto	l3456
  5563  002E0C  0A07               	xorlw	7	; case 12
  5564  002E0E  B4D8               	btfsc	status,2,c
  5565  002E10  D7CE               	goto	l3458
  5566  002E12  D7D2               	goto	l122
  5567  002E14                     __end_of_ADC_select_channel:
  5568                           	opt stack 0
  5569                           tblptru	equ	0xFF8
  5570                           tblptrh	equ	0xFF7
  5571                           tblptrl	equ	0xFF6
  5572                           tablat	equ	0xFF5
  5573                           prodh	equ	0xFF4
  5574                           prodl	equ	0xFF3
  5575                           indf0	equ	0xFEF
  5576                           fsr0h	equ	0xFEA
  5577                           fsr0l	equ	0xFE9
  5578                           wreg	equ	0xFE8
  5579                           indf2	equ	0xFDF
  5580                           postinc2	equ	0xFDE
  5581                           postdec2	equ	0xFDD
  5582                           fsr2h	equ	0xFDA
  5583                           fsr2l	equ	0xFD9
  5584                           status	equ	0xFD8
  5585                           
  5586 ;; *************** function _mcu_init *****************
  5587 ;; Defined at:
  5588 ;;		line 13 in file "funciones.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;		None
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;		None
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  2   57[None  ] int 
  5595 ;; Registers used:
  5596 ;;		wreg, status,2
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5602 ;;      Params:         0       0       0       0       0       0       0       0       0
  5603 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5604 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5605 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5606 ;;Total ram usage:        0 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; This function calls:
  5609 ;;		Nothing
  5610 ;; This function is called by:
  5611 ;;		_main
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           	psect	text20
  5616  003558                     __ptext20:
  5617                           	opt stack 0
  5618  003558                     _mcu_init:
  5619                           	opt stack 30
  5620                           
  5621                           ;funciones.c: 15: TRISA=TRISB=TRISC=TRISD=TRISE=0;
  5622                           
  5623                           ;incstack = 0
  5624  003558  0E00               	movlw	0
  5625  00355A  6E96               	movwf	3990,c	;volatile
  5626  00355C  CF96 FF95          	movff	3990,3989	;volatile
  5627  003560  CF95 FF94          	movff	3989,3988	;volatile
  5628  003564  CF94 FF93          	movff	3988,3987	;volatile
  5629  003568  CF93 FF92          	movff	3987,3986	;volatile
  5630                           
  5631                           ;funciones.c: 16: PORTA=PORTB=PORTC=PORTD=PORTE=0;
  5632  00356C  0E00               	movlw	0
  5633  00356E  6E84               	movwf	3972,c	;volatile
  5634  003570  CF84 FF83          	movff	3972,3971	;volatile
  5635  003574  CF83 FF82          	movff	3971,3970	;volatile
  5636  003578  CF82 FF81          	movff	3970,3969	;volatile
  5637  00357C  CF81 FF80          	movff	3969,3968	;volatile
  5638  003580  0012               	return	
  5639  003582                     __end_of_mcu_init:
  5640                           	opt stack 0
  5641                           tblptru	equ	0xFF8
  5642                           tblptrh	equ	0xFF7
  5643                           tblptrl	equ	0xFF6
  5644                           tablat	equ	0xFF5
  5645                           prodh	equ	0xFF4
  5646                           prodl	equ	0xFF3
  5647                           indf0	equ	0xFEF
  5648                           fsr0h	equ	0xFEA
  5649                           fsr0l	equ	0xFE9
  5650                           wreg	equ	0xFE8
  5651                           indf2	equ	0xFDF
  5652                           postinc2	equ	0xFDE
  5653                           postdec2	equ	0xFDD
  5654                           fsr2h	equ	0xFDA
  5655                           fsr2l	equ	0xFD9
  5656                           status	equ	0xFD8
  5657                           
  5658 ;; *************** function _fuzzy_system_single *****************
  5659 ;; Defined at:
  5660 ;;		line 196 in file "fuzzy.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  input           3   90[COMRAM] int 
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;  y             120  120[BANK6 ] [40]
  5665 ;;  x             120    0[BANK6 ] [40]
  5666 ;;  overall_out_  120  120[BANK5 ] [40]
  5667 ;;  qualified_co  120  120[BANK4 ] [40]
  5668 ;;  qualified_co  120    0[BANK4 ] [40]
  5669 ;;  qualified_co  120    0[BANK5 ] [40]
  5670 ;;  cons_mf3      120  120[BANK3 ] [40]
  5671 ;;  cons_mf2      120    0[BANK3 ] [40]
  5672 ;;  cons_mf1      120  120[BANK2 ] [40]
  5673 ;;  ante_mf3      120    0[BANK2 ] [40]
  5674 ;;  ante_mf2      120  120[BANK1 ] [40]
  5675 ;;  ante_mf1      120    0[BANK1 ] [40]
  5676 ;;  output          3  147[BANK0 ] [40]
  5677 ;;  w3              3  144[BANK0 ] [40]
  5678 ;;  w2              3  141[BANK0 ] [40]
  5679 ;;  w1              3  138[BANK0 ] [40]
  5680 ;;  i               2    0        int 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  3   90[COMRAM] int 
  5683 ;; Registers used:
  5684 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5690 ;;      Params:         3       0       0       0       0       0       0       0       0
  5691 ;;      Locals:         0      12     240     240     240     240     240     240       0
  5692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5693 ;;      Totals:         3      12     240     240     240     240     240     240       0
  5694 ;;Total ram usage:     1455 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    4
  5697 ;; This function calls:
  5698 ;;		_defuzzy
  5699 ;;		_linspace
  5700 ;;		_out_mf
  5701 ;;		_qualified
  5702 ;;		_trap_mf
  5703 ;;		_trapezoidal
  5704 ;; This function is called by:
  5705 ;;		_main
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text21
  5710  001198                     __ptext21:
  5711                           	opt stack 0
  5712  001198                     _fuzzy_system_single:
  5713                           	opt stack 26
  5714                           
  5715                           ;fuzzy.c: 198: double ante_mf1[40],cons_mf1[40];
  5716                           ;fuzzy.c: 199: double ante_mf2[40],cons_mf2[40];
  5717                           ;fuzzy.c: 200: double ante_mf3[40],cons_mf3[40];
  5718                           ;fuzzy.c: 201: double x[40],y[40];
  5719                           ;fuzzy.c: 202: double qualified_cons_mf1[40],qualified_cons_mf2[40],qualified_cons_mf3[4
      +                          0];
  5720                           ;fuzzy.c: 203: double overall_out_mf[40];
  5721                           ;fuzzy.c: 204: double w1,w2,w3;
  5722                           ;fuzzy.c: 205: double output;
  5723                           ;fuzzy.c: 206: int i;
  5724                           ;fuzzy.c: 207: linspace(x,0,100,40);
  5725                           
  5726                           ;incstack = 0
  5727  001198  0E00               	movlw	low fuzzy_system_single@x
  5728  00119A  6E49               	movwf	linspace@x,c
  5729  00119C  0E06               	movlw	high fuzzy_system_single@x
  5730  00119E  6E4A               	movwf	linspace@x+1,c
  5731  0011A0  0E00               	movlw	0
  5732  0011A2  6E4B               	movwf	linspace@start,c
  5733  0011A4  0E00               	movlw	0
  5734  0011A6  6E4C               	movwf	linspace@start+1,c
  5735  0011A8  0E00               	movlw	0
  5736  0011AA  6E4D               	movwf	linspace@start+2,c
  5737  0011AC  0E00               	movlw	0
  5738  0011AE  6E4E               	movwf	linspace@end,c
  5739  0011B0  0EC8               	movlw	200
  5740  0011B2  6E4F               	movwf	linspace@end+1,c
  5741  0011B4  0E42               	movlw	66
  5742  0011B6  6E50               	movwf	linspace@end+2,c
  5743  0011B8  0E00               	movlw	0
  5744  0011BA  6E52               	movwf	linspace@size+1,c
  5745  0011BC  0E28               	movlw	40
  5746  0011BE  6E51               	movwf	linspace@size,c
  5747  0011C0  EC3F  F014         	call	_linspace	;wreg free
  5748                           
  5749                           ;fuzzy.c: 208: linspace(y,0,100,40);
  5750  0011C4  0E78               	movlw	low fuzzy_system_single@y
  5751  0011C6  6E49               	movwf	linspace@x,c
  5752  0011C8  0E06               	movlw	high fuzzy_system_single@y
  5753  0011CA  6E4A               	movwf	linspace@x+1,c
  5754  0011CC  0E00               	movlw	0
  5755  0011CE  6E4B               	movwf	linspace@start,c
  5756  0011D0  0E00               	movlw	0
  5757  0011D2  6E4C               	movwf	linspace@start+1,c
  5758  0011D4  0E00               	movlw	0
  5759  0011D6  6E4D               	movwf	linspace@start+2,c
  5760  0011D8  0E00               	movlw	0
  5761  0011DA  6E4E               	movwf	linspace@end,c
  5762  0011DC  0EC8               	movlw	200
  5763  0011DE  6E4F               	movwf	linspace@end+1,c
  5764  0011E0  0E42               	movlw	66
  5765  0011E2  6E50               	movwf	linspace@end+2,c
  5766  0011E4  0E00               	movlw	0
  5767  0011E6  6E52               	movwf	linspace@size+1,c
  5768  0011E8  0E28               	movlw	40
  5769  0011EA  6E51               	movwf	linspace@size,c
  5770  0011EC  EC3F  F014         	call	_linspace	;wreg free
  5771                           
  5772                           ;fuzzy.c: 211: trap_mf(ante_mf1,x,-36,-4,14.68,36);
  5773  0011F0  0E00               	movlw	low fuzzy_system_single@ante_mf1
  5774  0011F2  0100               	movlb	0	; () banked
  5775  0011F4  6F60               	movwf	trap_mf@t_value& (0+255),b
  5776  0011F6  0E01               	movlw	high fuzzy_system_single@ante_mf1
  5777  0011F8  0100               	movlb	0	; () banked
  5778  0011FA  6F61               	movwf	(trap_mf@t_value+1)& (0+255),b
  5779  0011FC  0E00               	movlw	low fuzzy_system_single@x
  5780  0011FE  0100               	movlb	0	; () banked
  5781  001200  6F62               	movwf	trap_mf@x& (0+255),b
  5782  001202  0E06               	movlw	high fuzzy_system_single@x
  5783  001204  0100               	movlb	0	; () banked
  5784  001206  6F63               	movwf	(trap_mf@x+1)& (0+255),b
  5785  001208  0E00               	movlw	0
  5786  00120A  0100               	movlb	0	; () banked
  5787  00120C  6F64               	movwf	trap_mf@a& (0+255),b
  5788  00120E  0E10               	movlw	16
  5789  001210  0100               	movlb	0	; () banked
  5790  001212  6F65               	movwf	(trap_mf@a+1)& (0+255),b
  5791  001214  0EC2               	movlw	194
  5792  001216  0100               	movlb	0	; () banked
  5793  001218  6F66               	movwf	(trap_mf@a+2)& (0+255),b
  5794  00121A  0E00               	movlw	0
  5795  00121C  0100               	movlb	0	; () banked
  5796  00121E  6F67               	movwf	trap_mf@b& (0+255),b
  5797  001220  0E80               	movlw	128
  5798  001222  0100               	movlb	0	; () banked
  5799  001224  6F68               	movwf	(trap_mf@b+1)& (0+255),b
  5800  001226  0EC0               	movlw	192
  5801  001228  0100               	movlb	0	; () banked
  5802  00122A  6F69               	movwf	(trap_mf@b+2)& (0+255),b
  5803  00122C  0EE1               	movlw	225
  5804  00122E  0100               	movlb	0	; () banked
  5805  001230  6F6A               	movwf	trap_mf@c& (0+255),b
  5806  001232  0E6A               	movlw	106
  5807  001234  0100               	movlb	0	; () banked
  5808  001236  6F6B               	movwf	(trap_mf@c+1)& (0+255),b
  5809  001238  0E41               	movlw	65
  5810  00123A  0100               	movlb	0	; () banked
  5811  00123C  6F6C               	movwf	(trap_mf@c+2)& (0+255),b
  5812  00123E  0E00               	movlw	0
  5813  001240  0100               	movlb	0	; () banked
  5814  001242  6F6D               	movwf	trap_mf@d& (0+255),b
  5815  001244  0E10               	movlw	16
  5816  001246  0100               	movlb	0	; () banked
  5817  001248  6F6E               	movwf	(trap_mf@d+1)& (0+255),b
  5818  00124A  0E42               	movlw	66
  5819  00124C  0100               	movlb	0	; () banked
  5820  00124E  6F6F               	movwf	(trap_mf@d+2)& (0+255),b
  5821  001250  ECE2  F011         	call	_trap_mf	;wreg free
  5822                           
  5823                           ;fuzzy.c: 212: trap_mf(ante_mf2,x,15.6,33.47,60.7,87.6);
  5824  001254  0E78               	movlw	low fuzzy_system_single@ante_mf2
  5825  001256  0100               	movlb	0	; () banked
  5826  001258  6F60               	movwf	trap_mf@t_value& (0+255),b
  5827  00125A  0E01               	movlw	high fuzzy_system_single@ante_mf2
  5828  00125C  0100               	movlb	0	; () banked
  5829  00125E  6F61               	movwf	(trap_mf@t_value+1)& (0+255),b
  5830  001260  0E00               	movlw	low fuzzy_system_single@x
  5831  001262  0100               	movlb	0	; () banked
  5832  001264  6F62               	movwf	trap_mf@x& (0+255),b
  5833  001266  0E06               	movlw	high fuzzy_system_single@x
  5834  001268  0100               	movlb	0	; () banked
  5835  00126A  6F63               	movwf	(trap_mf@x+1)& (0+255),b
  5836  00126C  0E9A               	movlw	154
  5837  00126E  0100               	movlb	0	; () banked
  5838  001270  6F64               	movwf	trap_mf@a& (0+255),b
  5839  001272  0E79               	movlw	121
  5840  001274  0100               	movlb	0	; () banked
  5841  001276  6F65               	movwf	(trap_mf@a+1)& (0+255),b
  5842  001278  0E41               	movlw	65
  5843  00127A  0100               	movlb	0	; () banked
  5844  00127C  6F66               	movwf	(trap_mf@a+2)& (0+255),b
  5845  00127E  0EE1               	movlw	225
  5846  001280  0100               	movlb	0	; () banked
  5847  001282  6F67               	movwf	trap_mf@b& (0+255),b
  5848  001284  0E05               	movlw	5
  5849  001286  0100               	movlb	0	; () banked
  5850  001288  6F68               	movwf	(trap_mf@b+1)& (0+255),b
  5851  00128A  0E42               	movlw	66
  5852  00128C  0100               	movlb	0	; () banked
  5853  00128E  6F69               	movwf	(trap_mf@b+2)& (0+255),b
  5854  001290  0ECD               	movlw	205
  5855  001292  0100               	movlb	0	; () banked
  5856  001294  6F6A               	movwf	trap_mf@c& (0+255),b
  5857  001296  0E72               	movlw	114
  5858  001298  0100               	movlb	0	; () banked
  5859  00129A  6F6B               	movwf	(trap_mf@c+1)& (0+255),b
  5860  00129C  0E42               	movlw	66
  5861  00129E  0100               	movlb	0	; () banked
  5862  0012A0  6F6C               	movwf	(trap_mf@c+2)& (0+255),b
  5863  0012A2  0E33               	movlw	51
  5864  0012A4  0100               	movlb	0	; () banked
  5865  0012A6  6F6D               	movwf	trap_mf@d& (0+255),b
  5866  0012A8  0EAF               	movlw	175
  5867  0012AA  0100               	movlb	0	; () banked
  5868  0012AC  6F6E               	movwf	(trap_mf@d+1)& (0+255),b
  5869  0012AE  0E42               	movlw	66
  5870  0012B0  0100               	movlb	0	; () banked
  5871  0012B2  6F6F               	movwf	(trap_mf@d+2)& (0+255),b
  5872  0012B4  ECE2  F011         	call	_trap_mf	;wreg free
  5873                           
  5874                           ;fuzzy.c: 213: trap_mf(ante_mf3,x,64,79.76,104,136);
  5875  0012B8  0E00               	movlw	low fuzzy_system_single@ante_mf3
  5876  0012BA  0100               	movlb	0	; () banked
  5877  0012BC  6F60               	movwf	trap_mf@t_value& (0+255),b
  5878  0012BE  0E02               	movlw	high fuzzy_system_single@ante_mf3
  5879  0012C0  0100               	movlb	0	; () banked
  5880  0012C2  6F61               	movwf	(trap_mf@t_value+1)& (0+255),b
  5881  0012C4  0E00               	movlw	low fuzzy_system_single@x
  5882  0012C6  0100               	movlb	0	; () banked
  5883  0012C8  6F62               	movwf	trap_mf@x& (0+255),b
  5884  0012CA  0E06               	movlw	high fuzzy_system_single@x
  5885  0012CC  0100               	movlb	0	; () banked
  5886  0012CE  6F63               	movwf	(trap_mf@x+1)& (0+255),b
  5887  0012D0  0E00               	movlw	0
  5888  0012D2  0100               	movlb	0	; () banked
  5889  0012D4  6F64               	movwf	trap_mf@a& (0+255),b
  5890  0012D6  0E80               	movlw	128
  5891  0012D8  0100               	movlb	0	; () banked
  5892  0012DA  6F65               	movwf	(trap_mf@a+1)& (0+255),b
  5893  0012DC  0E42               	movlw	66
  5894  0012DE  0100               	movlb	0	; () banked
  5895  0012E0  6F66               	movwf	(trap_mf@a+2)& (0+255),b
  5896  0012E2  0E85               	movlw	133
  5897  0012E4  0100               	movlb	0	; () banked
  5898  0012E6  6F67               	movwf	trap_mf@b& (0+255),b
  5899  0012E8  0E9F               	movlw	159
  5900  0012EA  0100               	movlb	0	; () banked
  5901  0012EC  6F68               	movwf	(trap_mf@b+1)& (0+255),b
  5902  0012EE  0E42               	movlw	66
  5903  0012F0  0100               	movlb	0	; () banked
  5904  0012F2  6F69               	movwf	(trap_mf@b+2)& (0+255),b
  5905  0012F4  0E00               	movlw	0
  5906  0012F6  0100               	movlb	0	; () banked
  5907  0012F8  6F6A               	movwf	trap_mf@c& (0+255),b
  5908  0012FA  0ED0               	movlw	208
  5909  0012FC  0100               	movlb	0	; () banked
  5910  0012FE  6F6B               	movwf	(trap_mf@c+1)& (0+255),b
  5911  001300  0E42               	movlw	66
  5912  001302  0100               	movlb	0	; () banked
  5913  001304  6F6C               	movwf	(trap_mf@c+2)& (0+255),b
  5914  001306  0E00               	movlw	0
  5915  001308  0100               	movlb	0	; () banked
  5916  00130A  6F6D               	movwf	trap_mf@d& (0+255),b
  5917  00130C  0E08               	movlw	8
  5918  00130E  0100               	movlb	0	; () banked
  5919  001310  6F6E               	movwf	(trap_mf@d+1)& (0+255),b
  5920  001312  0E43               	movlw	67
  5921  001314  0100               	movlb	0	; () banked
  5922  001316  6F6F               	movwf	(trap_mf@d+2)& (0+255),b
  5923  001318  ECE2  F011         	call	_trap_mf	;wreg free
  5924                           
  5925                           ;fuzzy.c: 216: trap_mf(cons_mf1,y,-36,-4,17.59,36);
  5926  00131C  0E78               	movlw	low fuzzy_system_single@cons_mf1
  5927  00131E  0100               	movlb	0	; () banked
  5928  001320  6F60               	movwf	trap_mf@t_value& (0+255),b
  5929  001322  0E02               	movlw	high fuzzy_system_single@cons_mf1
  5930  001324  0100               	movlb	0	; () banked
  5931  001326  6F61               	movwf	(trap_mf@t_value+1)& (0+255),b
  5932  001328  0E78               	movlw	low fuzzy_system_single@y
  5933  00132A  0100               	movlb	0	; () banked
  5934  00132C  6F62               	movwf	trap_mf@x& (0+255),b
  5935  00132E  0E06               	movlw	high fuzzy_system_single@y
  5936  001330  0100               	movlb	0	; () banked
  5937  001332  6F63               	movwf	(trap_mf@x+1)& (0+255),b
  5938  001334  0E00               	movlw	0
  5939  001336  0100               	movlb	0	; () banked
  5940  001338  6F64               	movwf	trap_mf@a& (0+255),b
  5941  00133A  0E10               	movlw	16
  5942  00133C  0100               	movlb	0	; () banked
  5943  00133E  6F65               	movwf	(trap_mf@a+1)& (0+255),b
  5944  001340  0EC2               	movlw	194
  5945  001342  0100               	movlb	0	; () banked
  5946  001344  6F66               	movwf	(trap_mf@a+2)& (0+255),b
  5947  001346  0E00               	movlw	0
  5948  001348  0100               	movlb	0	; () banked
  5949  00134A  6F67               	movwf	trap_mf@b& (0+255),b
  5950  00134C  0E80               	movlw	128
  5951  00134E  0100               	movlb	0	; () banked
  5952  001350  6F68               	movwf	(trap_mf@b+1)& (0+255),b
  5953  001352  0EC0               	movlw	192
  5954  001354  0100               	movlb	0	; () banked
  5955  001356  6F69               	movwf	(trap_mf@b+2)& (0+255),b
  5956  001358  0EB8               	movlw	184
  5957  00135A  0100               	movlb	0	; () banked
  5958  00135C  6F6A               	movwf	trap_mf@c& (0+255),b
  5959  00135E  0E8C               	movlw	140
  5960  001360  0100               	movlb	0	; () banked
  5961  001362  6F6B               	movwf	(trap_mf@c+1)& (0+255),b
  5962  001364  0E41               	movlw	65
  5963  001366  0100               	movlb	0	; () banked
  5964  001368  6F6C               	movwf	(trap_mf@c+2)& (0+255),b
  5965  00136A  0E00               	movlw	0
  5966  00136C  0100               	movlb	0	; () banked
  5967  00136E  6F6D               	movwf	trap_mf@d& (0+255),b
  5968  001370  0E10               	movlw	16
  5969  001372  0100               	movlb	0	; () banked
  5970  001374  6F6E               	movwf	(trap_mf@d+1)& (0+255),b
  5971  001376  0E42               	movlw	66
  5972  001378  0100               	movlb	0	; () banked
  5973  00137A  6F6F               	movwf	(trap_mf@d+2)& (0+255),b
  5974  00137C  ECE2  F011         	call	_trap_mf	;wreg free
  5975                           
  5976                           ;fuzzy.c: 217: trap_mf(cons_mf2,y,14,46,54,86);
  5977  001380  0E00               	movlw	low fuzzy_system_single@cons_mf2
  5978  001382  0100               	movlb	0	; () banked
  5979  001384  6F60               	movwf	trap_mf@t_value& (0+255),b
  5980  001386  0E03               	movlw	high fuzzy_system_single@cons_mf2
  5981  001388  0100               	movlb	0	; () banked
  5982  00138A  6F61               	movwf	(trap_mf@t_value+1)& (0+255),b
  5983  00138C  0E78               	movlw	low fuzzy_system_single@y
  5984  00138E  0100               	movlb	0	; () banked
  5985  001390  6F62               	movwf	trap_mf@x& (0+255),b
  5986  001392  0E06               	movlw	high fuzzy_system_single@y
  5987  001394  0100               	movlb	0	; () banked
  5988  001396  6F63               	movwf	(trap_mf@x+1)& (0+255),b
  5989  001398  0E00               	movlw	0
  5990  00139A  0100               	movlb	0	; () banked
  5991  00139C  6F64               	movwf	trap_mf@a& (0+255),b
  5992  00139E  0E60               	movlw	96
  5993  0013A0  0100               	movlb	0	; () banked
  5994  0013A2  6F65               	movwf	(trap_mf@a+1)& (0+255),b
  5995  0013A4  0E41               	movlw	65
  5996  0013A6  0100               	movlb	0	; () banked
  5997  0013A8  6F66               	movwf	(trap_mf@a+2)& (0+255),b
  5998  0013AA  0E00               	movlw	0
  5999  0013AC  0100               	movlb	0	; () banked
  6000  0013AE  6F67               	movwf	trap_mf@b& (0+255),b
  6001  0013B0  0E38               	movlw	56
  6002  0013B2  0100               	movlb	0	; () banked
  6003  0013B4  6F68               	movwf	(trap_mf@b+1)& (0+255),b
  6004  0013B6  0E42               	movlw	66
  6005  0013B8  0100               	movlb	0	; () banked
  6006  0013BA  6F69               	movwf	(trap_mf@b+2)& (0+255),b
  6007  0013BC  0E00               	movlw	0
  6008  0013BE  0100               	movlb	0	; () banked
  6009  0013C0  6F6A               	movwf	trap_mf@c& (0+255),b
  6010  0013C2  0E58               	movlw	88
  6011  0013C4  0100               	movlb	0	; () banked
  6012  0013C6  6F6B               	movwf	(trap_mf@c+1)& (0+255),b
  6013  0013C8  0E42               	movlw	66
  6014  0013CA  0100               	movlb	0	; () banked
  6015  0013CC  6F6C               	movwf	(trap_mf@c+2)& (0+255),b
  6016  0013CE  0E00               	movlw	0
  6017  0013D0  0100               	movlb	0	; () banked
  6018  0013D2  6F6D               	movwf	trap_mf@d& (0+255),b
  6019  0013D4  0EAC               	movlw	172
  6020  0013D6  0100               	movlb	0	; () banked
  6021  0013D8  6F6E               	movwf	(trap_mf@d+1)& (0+255),b
  6022  0013DA  0E42               	movlw	66
  6023  0013DC  0100               	movlb	0	; () banked
  6024  0013DE  6F6F               	movwf	(trap_mf@d+2)& (0+255),b
  6025  0013E0  ECE2  F011         	call	_trap_mf	;wreg free
  6026                           
  6027                           ;fuzzy.c: 218: trap_mf(cons_mf3,y,64,85.32,104,136);
  6028  0013E4  0E78               	movlw	low fuzzy_system_single@cons_mf3
  6029  0013E6  0100               	movlb	0	; () banked
  6030  0013E8  6F60               	movwf	trap_mf@t_value& (0+255),b
  6031  0013EA  0E03               	movlw	high fuzzy_system_single@cons_mf3
  6032  0013EC  0100               	movlb	0	; () banked
  6033  0013EE  6F61               	movwf	(trap_mf@t_value+1)& (0+255),b
  6034  0013F0  0E78               	movlw	low fuzzy_system_single@y
  6035  0013F2  0100               	movlb	0	; () banked
  6036  0013F4  6F62               	movwf	trap_mf@x& (0+255),b
  6037  0013F6  0E06               	movlw	high fuzzy_system_single@y
  6038  0013F8  0100               	movlb	0	; () banked
  6039  0013FA  6F63               	movwf	(trap_mf@x+1)& (0+255),b
  6040  0013FC  0E00               	movlw	0
  6041  0013FE  0100               	movlb	0	; () banked
  6042  001400  6F64               	movwf	trap_mf@a& (0+255),b
  6043  001402  0E80               	movlw	128
  6044  001404  0100               	movlb	0	; () banked
  6045  001406  6F65               	movwf	(trap_mf@a+1)& (0+255),b
  6046  001408  0E42               	movlw	66
  6047  00140A  0100               	movlb	0	; () banked
  6048  00140C  6F66               	movwf	(trap_mf@a+2)& (0+255),b
  6049  00140E  0EA4               	movlw	164
  6050  001410  0100               	movlb	0	; () banked
  6051  001412  6F67               	movwf	trap_mf@b& (0+255),b
  6052  001414  0EAA               	movlw	170
  6053  001416  0100               	movlb	0	; () banked
  6054  001418  6F68               	movwf	(trap_mf@b+1)& (0+255),b
  6055  00141A  0E42               	movlw	66
  6056  00141C  0100               	movlb	0	; () banked
  6057  00141E  6F69               	movwf	(trap_mf@b+2)& (0+255),b
  6058  001420  0E00               	movlw	0
  6059  001422  0100               	movlb	0	; () banked
  6060  001424  6F6A               	movwf	trap_mf@c& (0+255),b
  6061  001426  0ED0               	movlw	208
  6062  001428  0100               	movlb	0	; () banked
  6063  00142A  6F6B               	movwf	(trap_mf@c+1)& (0+255),b
  6064  00142C  0E42               	movlw	66
  6065  00142E  0100               	movlb	0	; () banked
  6066  001430  6F6C               	movwf	(trap_mf@c+2)& (0+255),b
  6067  001432  0E00               	movlw	0
  6068  001434  0100               	movlb	0	; () banked
  6069  001436  6F6D               	movwf	trap_mf@d& (0+255),b
  6070  001438  0E08               	movlw	8
  6071  00143A  0100               	movlb	0	; () banked
  6072  00143C  6F6E               	movwf	(trap_mf@d+1)& (0+255),b
  6073  00143E  0E43               	movlw	67
  6074  001440  0100               	movlb	0	; () banked
  6075  001442  6F6F               	movwf	(trap_mf@d+2)& (0+255),b
  6076  001444  ECE2  F011         	call	_trap_mf	;wreg free
  6077                           
  6078                           ;fuzzy.c: 222: w1=trapezoidal(-36,-4,14.68,36,input);
  6079  001448  0E00               	movlw	0
  6080  00144A  6E49               	movwf	trapezoidal@a,c
  6081  00144C  0E10               	movlw	16
  6082  00144E  6E4A               	movwf	trapezoidal@a+1,c
  6083  001450  0EC2               	movlw	194
  6084  001452  6E4B               	movwf	trapezoidal@a+2,c
  6085  001454  0E00               	movlw	0
  6086  001456  6E4C               	movwf	trapezoidal@b,c
  6087  001458  0E80               	movlw	128
  6088  00145A  6E4D               	movwf	trapezoidal@b+1,c
  6089  00145C  0EC0               	movlw	192
  6090  00145E  6E4E               	movwf	trapezoidal@b+2,c
  6091  001460  0EE1               	movlw	225
  6092  001462  6E4F               	movwf	trapezoidal@c,c
  6093  001464  0E6A               	movlw	106
  6094  001466  6E50               	movwf	trapezoidal@c+1,c
  6095  001468  0E41               	movlw	65
  6096  00146A  6E51               	movwf	trapezoidal@c+2,c
  6097  00146C  0E00               	movlw	0
  6098  00146E  6E52               	movwf	trapezoidal@d,c
  6099  001470  0E10               	movlw	16
  6100  001472  6E53               	movwf	trapezoidal@d+1,c
  6101  001474  0E42               	movlw	66
  6102  001476  6E54               	movwf	trapezoidal@d+2,c
  6103  001478  C05B  F055         	movff	fuzzy_system_single@input,trapezoidal@x
  6104  00147C  C05C  F056         	movff	fuzzy_system_single@input+1,trapezoidal@x+1
  6105  001480  C05D  F057         	movff	fuzzy_system_single@input+2,trapezoidal@x+2
  6106  001484  EC3C  F00F         	call	_trapezoidal	;wreg free
  6107  001488  C049  F0EA         	movff	?_trapezoidal,fuzzy_system_single@w1
  6108  00148C  C04A  F0EB         	movff	?_trapezoidal+1,fuzzy_system_single@w1+1
  6109  001490  C04B  F0EC         	movff	?_trapezoidal+2,fuzzy_system_single@w1+2
  6110                           
  6111                           ;fuzzy.c: 223: w2=trapezoidal(15.6,33.47,60.7,87.6,input);
  6112  001494  0E9A               	movlw	154
  6113  001496  6E49               	movwf	trapezoidal@a,c
  6114  001498  0E79               	movlw	121
  6115  00149A  6E4A               	movwf	trapezoidal@a+1,c
  6116  00149C  0E41               	movlw	65
  6117  00149E  6E4B               	movwf	trapezoidal@a+2,c
  6118  0014A0  0EE1               	movlw	225
  6119  0014A2  6E4C               	movwf	trapezoidal@b,c
  6120  0014A4  0E05               	movlw	5
  6121  0014A6  6E4D               	movwf	trapezoidal@b+1,c
  6122  0014A8  0E42               	movlw	66
  6123  0014AA  6E4E               	movwf	trapezoidal@b+2,c
  6124  0014AC  0ECD               	movlw	205
  6125  0014AE  6E4F               	movwf	trapezoidal@c,c
  6126  0014B0  0E72               	movlw	114
  6127  0014B2  6E50               	movwf	trapezoidal@c+1,c
  6128  0014B4  0E42               	movlw	66
  6129  0014B6  6E51               	movwf	trapezoidal@c+2,c
  6130  0014B8  0E33               	movlw	51
  6131  0014BA  6E52               	movwf	trapezoidal@d,c
  6132  0014BC  0EAF               	movlw	175
  6133  0014BE  6E53               	movwf	trapezoidal@d+1,c
  6134  0014C0  0E42               	movlw	66
  6135  0014C2  6E54               	movwf	trapezoidal@d+2,c
  6136  0014C4  C05B  F055         	movff	fuzzy_system_single@input,trapezoidal@x
  6137  0014C8  C05C  F056         	movff	fuzzy_system_single@input+1,trapezoidal@x+1
  6138  0014CC  C05D  F057         	movff	fuzzy_system_single@input+2,trapezoidal@x+2
  6139  0014D0  EC3C  F00F         	call	_trapezoidal	;wreg free
  6140  0014D4  C049  F0ED         	movff	?_trapezoidal,fuzzy_system_single@w2
  6141  0014D8  C04A  F0EE         	movff	?_trapezoidal+1,fuzzy_system_single@w2+1
  6142  0014DC  C04B  F0EF         	movff	?_trapezoidal+2,fuzzy_system_single@w2+2
  6143                           
  6144                           ;fuzzy.c: 224: w3=trapezoidal(64,79.76,104,136,input);
  6145  0014E0  0E00               	movlw	0
  6146  0014E2  6E49               	movwf	trapezoidal@a,c
  6147  0014E4  0E80               	movlw	128
  6148  0014E6  6E4A               	movwf	trapezoidal@a+1,c
  6149  0014E8  0E42               	movlw	66
  6150  0014EA  6E4B               	movwf	trapezoidal@a+2,c
  6151  0014EC  0E85               	movlw	133
  6152  0014EE  6E4C               	movwf	trapezoidal@b,c
  6153  0014F0  0E9F               	movlw	159
  6154  0014F2  6E4D               	movwf	trapezoidal@b+1,c
  6155  0014F4  0E42               	movlw	66
  6156  0014F6  6E4E               	movwf	trapezoidal@b+2,c
  6157  0014F8  0E00               	movlw	0
  6158  0014FA  6E4F               	movwf	trapezoidal@c,c
  6159  0014FC  0ED0               	movlw	208
  6160  0014FE  6E50               	movwf	trapezoidal@c+1,c
  6161  001500  0E42               	movlw	66
  6162  001502  6E51               	movwf	trapezoidal@c+2,c
  6163  001504  0E00               	movlw	0
  6164  001506  6E52               	movwf	trapezoidal@d,c
  6165  001508  0E08               	movlw	8
  6166  00150A  6E53               	movwf	trapezoidal@d+1,c
  6167  00150C  0E43               	movlw	67
  6168  00150E  6E54               	movwf	trapezoidal@d+2,c
  6169  001510  C05B  F055         	movff	fuzzy_system_single@input,trapezoidal@x
  6170  001514  C05C  F056         	movff	fuzzy_system_single@input+1,trapezoidal@x+1
  6171  001518  C05D  F057         	movff	fuzzy_system_single@input+2,trapezoidal@x+2
  6172  00151C  EC3C  F00F         	call	_trapezoidal	;wreg free
  6173  001520  C049  F0F0         	movff	?_trapezoidal,fuzzy_system_single@w3
  6174  001524  C04A  F0F1         	movff	?_trapezoidal+1,fuzzy_system_single@w3+1
  6175  001528  C04B  F0F2         	movff	?_trapezoidal+2,fuzzy_system_single@w3+2
  6176                           
  6177                           ;fuzzy.c: 225: qualified(qualified_cons_mf1,cons_mf1,w1);
  6178  00152C  0E00               	movlw	low fuzzy_system_single@qualified_cons_mf1
  6179  00152E  6E1E               	movwf	qualified@y,c
  6180  001530  0E04               	movlw	high fuzzy_system_single@qualified_cons_mf1
  6181  001532  6E1F               	movwf	qualified@y+1,c
  6182  001534  0E78               	movlw	low fuzzy_system_single@cons_mf1
  6183  001536  6E20               	movwf	qualified@x,c
  6184  001538  0E02               	movlw	high fuzzy_system_single@cons_mf1
  6185  00153A  6E21               	movwf	qualified@x+1,c
  6186  00153C  C0EA  F022         	movff	fuzzy_system_single@w1,qualified@w
  6187  001540  C0EB  F023         	movff	fuzzy_system_single@w1+1,qualified@w+1
  6188  001544  C0EC  F024         	movff	fuzzy_system_single@w1+2,qualified@w+2
  6189  001548  ECB3  F015         	call	_qualified	;wreg free
  6190                           
  6191                           ;fuzzy.c: 226: qualified(qualified_cons_mf2,cons_mf2,w2);
  6192  00154C  0E78               	movlw	low fuzzy_system_single@qualified_cons_mf2
  6193  00154E  6E1E               	movwf	qualified@y,c
  6194  001550  0E04               	movlw	high fuzzy_system_single@qualified_cons_mf2
  6195  001552  6E1F               	movwf	qualified@y+1,c
  6196  001554  0E00               	movlw	low fuzzy_system_single@cons_mf2
  6197  001556  6E20               	movwf	qualified@x,c
  6198  001558  0E03               	movlw	high fuzzy_system_single@cons_mf2
  6199  00155A  6E21               	movwf	qualified@x+1,c
  6200  00155C  C0ED  F022         	movff	fuzzy_system_single@w2,qualified@w
  6201  001560  C0EE  F023         	movff	fuzzy_system_single@w2+1,qualified@w+1
  6202  001564  C0EF  F024         	movff	fuzzy_system_single@w2+2,qualified@w+2
  6203  001568  ECB3  F015         	call	_qualified	;wreg free
  6204                           
  6205                           ;fuzzy.c: 227: qualified(qualified_cons_mf3,cons_mf3,w3);
  6206  00156C  0E00               	movlw	low fuzzy_system_single@qualified_cons_mf3
  6207  00156E  6E1E               	movwf	qualified@y,c
  6208  001570  0E05               	movlw	high fuzzy_system_single@qualified_cons_mf3
  6209  001572  6E1F               	movwf	qualified@y+1,c
  6210  001574  0E78               	movlw	low fuzzy_system_single@cons_mf3
  6211  001576  6E20               	movwf	qualified@x,c
  6212  001578  0E03               	movlw	high fuzzy_system_single@cons_mf3
  6213  00157A  6E21               	movwf	qualified@x+1,c
  6214  00157C  C0F0  F022         	movff	fuzzy_system_single@w3,qualified@w
  6215  001580  C0F1  F023         	movff	fuzzy_system_single@w3+1,qualified@w+1
  6216  001584  C0F2  F024         	movff	fuzzy_system_single@w3+2,qualified@w+2
  6217  001588  ECB3  F015         	call	_qualified	;wreg free
  6218                           
  6219                           ;fuzzy.c: 228: out_mf(overall_out_mf,qualified_cons_mf1,qualified_cons_mf2,qualified_con
      +                          s_mf3);
  6220  00158C  0E78               	movlw	low fuzzy_system_single@overall_out_mf
  6221  00158E  6E1E               	movwf	out_mf@result,c
  6222  001590  0E05               	movlw	high fuzzy_system_single@overall_out_mf
  6223  001592  6E1F               	movwf	out_mf@result+1,c
  6224  001594  0E00               	movlw	low fuzzy_system_single@qualified_cons_mf1
  6225  001596  6E20               	movwf	out_mf@x,c
  6226  001598  0E04               	movlw	high fuzzy_system_single@qualified_cons_mf1
  6227  00159A  6E21               	movwf	out_mf@x+1,c
  6228  00159C  0E78               	movlw	low fuzzy_system_single@qualified_cons_mf2
  6229  00159E  6E22               	movwf	out_mf@y,c
  6230  0015A0  0E04               	movlw	high fuzzy_system_single@qualified_cons_mf2
  6231  0015A2  6E23               	movwf	out_mf@y+1,c
  6232  0015A4  0E00               	movlw	low fuzzy_system_single@qualified_cons_mf3
  6233  0015A6  6E24               	movwf	out_mf@z,c
  6234  0015A8  0E05               	movlw	high fuzzy_system_single@qualified_cons_mf3
  6235  0015AA  6E25               	movwf	out_mf@z+1,c
  6236  0015AC  ECE7  F00C         	call	_out_mf	;wreg free
  6237                           
  6238                           ;fuzzy.c: 229: output= defuzzy(y,overall_out_mf);
  6239  0015B0  0E78               	movlw	low fuzzy_system_single@y
  6240  0015B2  6E49               	movwf	defuzzy@x,c
  6241  0015B4  0E06               	movlw	high fuzzy_system_single@y
  6242  0015B6  6E4A               	movwf	defuzzy@x+1,c
  6243  0015B8  0E78               	movlw	low fuzzy_system_single@overall_out_mf
  6244  0015BA  6E4B               	movwf	defuzzy@mf,c
  6245  0015BC  0E05               	movlw	high fuzzy_system_single@overall_out_mf
  6246  0015BE  6E4C               	movwf	defuzzy@mf+1,c
  6247  0015C0  EC31  F011         	call	_defuzzy	;wreg free
  6248  0015C4  C049  F0F3         	movff	?_defuzzy,fuzzy_system_single@output
  6249  0015C8  C04A  F0F4         	movff	?_defuzzy+1,fuzzy_system_single@output+1
  6250  0015CC  C04B  F0F5         	movff	?_defuzzy+2,fuzzy_system_single@output+2
  6251                           
  6252                           ;fuzzy.c: 230: return output;
  6253  0015D0  C0F3  F05B         	movff	fuzzy_system_single@output,?_fuzzy_system_single
  6254  0015D4  C0F4  F05C         	movff	fuzzy_system_single@output+1,?_fuzzy_system_single+1
  6255  0015D8  C0F5  F05D         	movff	fuzzy_system_single@output+2,?_fuzzy_system_single+2
  6256  0015DC  0012               	return	
  6257  0015DE                     __end_of_fuzzy_system_single:
  6258                           	opt stack 0
  6259                           tblptru	equ	0xFF8
  6260                           tblptrh	equ	0xFF7
  6261                           tblptrl	equ	0xFF6
  6262                           tablat	equ	0xFF5
  6263                           prodh	equ	0xFF4
  6264                           prodl	equ	0xFF3
  6265                           indf0	equ	0xFEF
  6266                           fsr0h	equ	0xFEA
  6267                           fsr0l	equ	0xFE9
  6268                           wreg	equ	0xFE8
  6269                           indf2	equ	0xFDF
  6270                           postinc2	equ	0xFDE
  6271                           postdec2	equ	0xFDD
  6272                           fsr2h	equ	0xFDA
  6273                           fsr2l	equ	0xFD9
  6274                           status	equ	0xFD8
  6275                           
  6276 ;; *************** function _trap_mf *****************
  6277 ;; Defined at:
  6278 ;;		line 97 in file "fuzzy.c"
  6279 ;; Parameters:    Size  Location     Type
  6280 ;;  t_value         2    0[BANK0 ] PTR 
  6281 ;;		 -> fuzzy_system_single@cons_mf3(120), fuzzy_system_single@cons_mf2(120), fuzzy_system_single@cons_mf1(120), fuzzy_s
      +ystem_single@ante_mf3(120), 
  6282 ;;		 -> fuzzy_system_single@ante_mf2(120), fuzzy_system_single@ante_mf1(120), fuzzy_system@cons_mf3(120), fuzzy_system@c
      +ons_mf2(120), 
  6283 ;;		 -> fuzzy_system@cons_mf1(120), fuzzy_system@ante_mf3(120), fuzzy_system@ante_mf2(120), fuzzy_system@ante_mf1(120), 
  6284 ;;  x               2    2[BANK0 ] PTR 
  6285 ;;		 -> fuzzy_system_single@y(120), fuzzy_system_single@x(120), fuzzy_system@y(120), fuzzy_system@x(120), 
  6286 ;;  a               3    4[BANK0 ] PTR 
  6287 ;;  b               3    7[BANK0 ] PTR 
  6288 ;;  c               3   10[BANK0 ] PTR 
  6289 ;;  d               3   13[BANK0 ] PTR 
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;  temp          120   16[BANK0 ] [40]
  6292 ;;  i               2  136[BANK0 ] int 
  6293 ;; Return value:  Size  Location     Type
  6294 ;;                  1    wreg      void 
  6295 ;; Registers used:
  6296 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6302 ;;      Params:         0      16       0       0       0       0       0       0       0
  6303 ;;      Locals:         0     122       0       0       0       0       0       0       0
  6304 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6305 ;;      Totals:         0     138       0       0       0       0       0       0       0
  6306 ;;Total ram usage:      138 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:    3
  6309 ;; This function calls:
  6310 ;;		___wmul
  6311 ;;		_trapezoidal
  6312 ;; This function is called by:
  6313 ;;		_fuzzy_system_single
  6314 ;;		_fuzzy_system
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           	psect	text22
  6319  0023C4                     __ptext22:
  6320                           	opt stack 0
  6321  0023C4                     _trap_mf:
  6322                           	opt stack 26
  6323                           
  6324                           ;fuzzy.c: 99: int i;
  6325                           ;fuzzy.c: 100: double temp[40];
  6326                           ;fuzzy.c: 101: for(i=0; i<40; i++)
  6327                           
  6328                           ;incstack = 0
  6329  0023C4  0E00               	movlw	0
  6330  0023C6  0100               	movlb	0	; () banked
  6331  0023C8  6FE9               	movwf	(trap_mf@i+1)& (0+255),b
  6332  0023CA  0E00               	movlw	0
  6333  0023CC  6FE8               	movwf	trap_mf@i& (0+255),b
  6334  0023CE                     l3474:
  6335                           
  6336                           ; BSR set to: 0
  6337  0023CE  0100               	movlb	0	; () banked
  6338  0023D0  BFE9               	btfsc	(trap_mf@i+1)& (0+255),7,b
  6339  0023D2  D008               	goto	l3478
  6340  0023D4  0100               	movlb	0	; () banked
  6341  0023D6  51E9               	movf	(trap_mf@i+1)& (0+255),w,b
  6342  0023D8  E131               	bnz	l3484
  6343  0023DA  0E28               	movlw	40
  6344  0023DC  0100               	movlb	0	; () banked
  6345  0023DE  5DE8               	subwf	trap_mf@i& (0+255),w,b
  6346  0023E0  B0D8               	btfsc	status,0,c
  6347  0023E2  D02C               	goto	l3484
  6348  0023E4                     l3478:
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;fuzzy.c: 102: temp[i]= x[i];
  6352  0023E4  C0E8  F00F         	movff	trap_mf@i,___wmul@multiplier
  6353  0023E8  C0E9  F010         	movff	trap_mf@i+1,___wmul@multiplier+1
  6354  0023EC  0E00               	movlw	0
  6355  0023EE  6E12               	movwf	___wmul@multiplicand+1,c
  6356  0023F0  0E03               	movlw	3
  6357  0023F2  6E11               	movwf	___wmul@multiplicand,c
  6358  0023F4  ECD6  F01A         	call	___wmul	;wreg free
  6359  0023F8  500F               	movf	?___wmul,w,c
  6360  0023FA  0100               	movlb	0	; () banked
  6361  0023FC  2562               	addwf	trap_mf@x& (0+255),w,b
  6362  0023FE  6ED9               	movwf	fsr2l,c
  6363  002400  5010               	movf	?___wmul+1,w,c
  6364  002402  0100               	movlb	0	; () banked
  6365  002404  2163               	addwfc	(trap_mf@x+1)& (0+255),w,b
  6366  002406  6EDA               	movwf	fsr2h,c
  6367  002408  C0E8  F00F         	movff	trap_mf@i,___wmul@multiplier
  6368  00240C  C0E9  F010         	movff	trap_mf@i+1,___wmul@multiplier+1
  6369  002410  0E00               	movlw	0
  6370  002412  6E12               	movwf	___wmul@multiplicand+1,c
  6371  002414  0E03               	movlw	3
  6372  002416  6E11               	movwf	___wmul@multiplicand,c
  6373  002418  ECD6  F01A         	call	___wmul	;wreg free
  6374  00241C  0E70               	movlw	low trap_mf@temp
  6375  00241E  240F               	addwf	?___wmul,w,c
  6376  002420  6EE1               	movwf	fsr1l,c
  6377  002422  0E00               	movlw	high trap_mf@temp
  6378  002424  2010               	addwfc	?___wmul+1,w,c
  6379  002426  6EE2               	movwf	fsr1h,c
  6380  002428  CFDE FFE6          	movff	postinc2,postinc1
  6381  00242C  CFDE FFE6          	movff	postinc2,postinc1
  6382  002430  CFDE FFE6          	movff	postinc2,postinc1
  6383  002434  0100               	movlb	0	; () banked
  6384  002436  4BE8               	infsnz	trap_mf@i& (0+255),f,b
  6385  002438  2BE9               	incf	(trap_mf@i+1)& (0+255),f,b
  6386  00243A  D7C9               	goto	l3474
  6387  00243C                     l3484:
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;fuzzy.c: 103: for(i=0; i<40; i++)
  6391  00243C  0E00               	movlw	0
  6392  00243E  0100               	movlb	0	; () banked
  6393  002440  6FE9               	movwf	(trap_mf@i+1)& (0+255),b
  6394  002442  0E00               	movlw	0
  6395  002444  6FE8               	movwf	trap_mf@i& (0+255),b
  6396  002446                     l3486:
  6397                           
  6398                           ; BSR set to: 0
  6399  002446  0100               	movlb	0	; () banked
  6400  002448  BFE9               	btfsc	(trap_mf@i+1)& (0+255),7,b
  6401  00244A  D008               	goto	l3490
  6402  00244C  0100               	movlb	0	; () banked
  6403  00244E  51E9               	movf	(trap_mf@i+1)& (0+255),w,b
  6404  002450  E153               	bnz	l210
  6405  002452  0E28               	movlw	40
  6406  002454  0100               	movlb	0	; () banked
  6407  002456  5DE8               	subwf	trap_mf@i& (0+255),w,b
  6408  002458  B0D8               	btfsc	status,0,c
  6409  00245A  0012               	return	
  6410  00245C                     l3490:
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;fuzzy.c: 104: t_value[i]= trapezoidal(a,b,c,d,x[i]);
  6414  00245C  C0E8  F00F         	movff	trap_mf@i,___wmul@multiplier
  6415  002460  C0E9  F010         	movff	trap_mf@i+1,___wmul@multiplier+1
  6416  002464  0E00               	movlw	0
  6417  002466  6E12               	movwf	___wmul@multiplicand+1,c
  6418  002468  0E03               	movlw	3
  6419  00246A  6E11               	movwf	___wmul@multiplicand,c
  6420  00246C  ECD6  F01A         	call	___wmul	;wreg free
  6421  002470  500F               	movf	?___wmul,w,c
  6422  002472  0100               	movlb	0	; () banked
  6423  002474  2560               	addwf	trap_mf@t_value& (0+255),w,b
  6424  002476  6ED9               	movwf	fsr2l,c
  6425  002478  5010               	movf	?___wmul+1,w,c
  6426  00247A  0100               	movlb	0	; () banked
  6427  00247C  2161               	addwfc	(trap_mf@t_value+1)& (0+255),w,b
  6428  00247E  6EDA               	movwf	fsr2h,c
  6429  002480  C064  F049         	movff	trap_mf@a,trapezoidal@a
  6430  002484  C065  F04A         	movff	trap_mf@a+1,trapezoidal@a+1
  6431  002488  C066  F04B         	movff	trap_mf@a+2,trapezoidal@a+2
  6432  00248C  C067  F04C         	movff	trap_mf@b,trapezoidal@b
  6433  002490  C068  F04D         	movff	trap_mf@b+1,trapezoidal@b+1
  6434  002494  C069  F04E         	movff	trap_mf@b+2,trapezoidal@b+2
  6435  002498  C06A  F04F         	movff	trap_mf@c,trapezoidal@c
  6436  00249C  C06B  F050         	movff	trap_mf@c+1,trapezoidal@c+1
  6437  0024A0  C06C  F051         	movff	trap_mf@c+2,trapezoidal@c+2
  6438  0024A4  C06D  F052         	movff	trap_mf@d,trapezoidal@d
  6439  0024A8  C06E  F053         	movff	trap_mf@d+1,trapezoidal@d+1
  6440  0024AC  C06F  F054         	movff	trap_mf@d+2,trapezoidal@d+2
  6441  0024B0  C0E8  F00F         	movff	trap_mf@i,___wmul@multiplier
  6442  0024B4  C0E9  F010         	movff	trap_mf@i+1,___wmul@multiplier+1
  6443  0024B8  0E00               	movlw	0
  6444  0024BA  6E12               	movwf	___wmul@multiplicand+1,c
  6445  0024BC  0E03               	movlw	3
  6446  0024BE  6E11               	movwf	___wmul@multiplicand,c
  6447  0024C0  ECD6  F01A         	call	___wmul	;wreg free
  6448  0024C4  500F               	movf	?___wmul,w,c
  6449  0024C6  0100               	movlb	0	; () banked
  6450  0024C8  2562               	addwf	trap_mf@x& (0+255),w,b
  6451  0024CA  6EE1               	movwf	fsr1l,c
  6452  0024CC  5010               	movf	?___wmul+1,w,c
  6453  0024CE  0100               	movlb	0	; () banked
  6454  0024D0  2163               	addwfc	(trap_mf@x+1)& (0+255),w,b
  6455  0024D2  6EE2               	movwf	fsr1h,c
  6456  0024D4  CFE6 F055          	movff	postinc1,trapezoidal@x
  6457  0024D8  CFE6 F056          	movff	postinc1,trapezoidal@x+1
  6458  0024DC  CFE5 F057          	movff	postdec1,trapezoidal@x+2
  6459  0024E0  EC3C  F00F         	call	_trapezoidal	;wreg free
  6460  0024E4  C049  FFDE         	movff	?_trapezoidal,postinc2
  6461  0024E8  C04A  FFDE         	movff	?_trapezoidal+1,postinc2
  6462  0024EC  C04B  FFDE         	movff	?_trapezoidal+2,postinc2
  6463  0024F0  0100               	movlb	0	; () banked
  6464  0024F2  4BE8               	infsnz	trap_mf@i& (0+255),f,b
  6465  0024F4  2BE9               	incf	(trap_mf@i+1)& (0+255),f,b
  6466  0024F6  D7A7               	goto	l3486
  6467  0024F8                     l210:
  6468                           
  6469                           ; BSR set to: 0
  6470  0024F8  0012               	return		;funcret
  6471  0024FA                     __end_of_trap_mf:
  6472                           	opt stack 0
  6473                           tblptru	equ	0xFF8
  6474                           tblptrh	equ	0xFF7
  6475                           tblptrl	equ	0xFF6
  6476                           tablat	equ	0xFF5
  6477                           prodh	equ	0xFF4
  6478                           prodl	equ	0xFF3
  6479                           indf0	equ	0xFEF
  6480                           fsr0h	equ	0xFEA
  6481                           fsr0l	equ	0xFE9
  6482                           wreg	equ	0xFE8
  6483                           postinc1	equ	0xFE6
  6484                           postdec1	equ	0xFE5
  6485                           fsr1h	equ	0xFE2
  6486                           fsr1l	equ	0xFE1
  6487                           indf2	equ	0xFDF
  6488                           postinc2	equ	0xFDE
  6489                           postdec2	equ	0xFDD
  6490                           fsr2h	equ	0xFDA
  6491                           fsr2l	equ	0xFD9
  6492                           status	equ	0xFD8
  6493                           
  6494 ;; *************** function _trapezoidal *****************
  6495 ;; Defined at:
  6496 ;;		line 74 in file "fuzzy.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;  a               3   72[COMRAM] void 
  6499 ;;  b               3   75[COMRAM] void 
  6500 ;;  c               3   78[COMRAM] void 
  6501 ;;  d               3   81[COMRAM] void 
  6502 ;;  x               3   84[COMRAM] void 
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;  ux              3   87[COMRAM] void 
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  3   72[COMRAM] void 
  6507 ;; Registers used:
  6508 ;;		wreg, status,2, status,0, cstack
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6514 ;;      Params:        15       0       0       0       0       0       0       0       0
  6515 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6517 ;;      Totals:        18       0       0       0       0       0       0       0       0
  6518 ;;Total ram usage:       18 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; Hardware stack levels required when called:    2
  6521 ;; This function calls:
  6522 ;;		___ftadd
  6523 ;;		___ftdiv
  6524 ;;		___ftge
  6525 ;;		___ftneg
  6526 ;; This function is called by:
  6527 ;;		_trap_mf
  6528 ;;		_fuzzy_system_single
  6529 ;;		_fuzzy_system
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           	psect	text23
  6534  001E78                     __ptext23:
  6535                           	opt stack 0
  6536  001E78                     _trapezoidal:
  6537                           	opt stack 27
  6538                           
  6539                           ;fuzzy.c: 76: double ux=0;
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;incstack = 0
  6543  001E78  0E00               	movlw	0
  6544  001E7A  6E58               	movwf	trapezoidal@ux,c
  6545  001E7C  0E00               	movlw	0
  6546  001E7E  6E59               	movwf	trapezoidal@ux+1,c
  6547  001E80  0E00               	movlw	0
  6548  001E82  6E5A               	movwf	trapezoidal@ux+2,c
  6549                           
  6550                           ;fuzzy.c: 77: if(x<=a){
  6551  001E84  C049  F015         	movff	trapezoidal@a,___ftge@ff1
  6552  001E88  C04A  F016         	movff	trapezoidal@a+1,___ftge@ff1+1
  6553  001E8C  C04B  F017         	movff	trapezoidal@a+2,___ftge@ff1+2
  6554  001E90  C055  F018         	movff	trapezoidal@x,___ftge@ff2
  6555  001E94  C056  F019         	movff	trapezoidal@x+1,___ftge@ff2+1
  6556  001E98  C057  F01A         	movff	trapezoidal@x+2,___ftge@ff2+2
  6557  001E9C  ECAD  F017         	call	___ftge	;wreg free
  6558  001EA0  A0D8               	btfss	status,0,c
  6559  001EA2  D006               	goto	l3366
  6560                           
  6561                           ;fuzzy.c: 78: ux=0;
  6562  001EA4  0E00               	movlw	0
  6563  001EA6  6E58               	movwf	trapezoidal@ux,c
  6564  001EA8  0E00               	movlw	0
  6565  001EAA  6E59               	movwf	trapezoidal@ux+1,c
  6566  001EAC  0E00               	movlw	0
  6567  001EAE  6E5A               	movwf	trapezoidal@ux+2,c
  6568  001EB0                     l3366:
  6569                           
  6570                           ;fuzzy.c: 79: }
  6571                           ;fuzzy.c: 80: if(x>a && x<b){
  6572  001EB0  C049  F015         	movff	trapezoidal@a,___ftge@ff1
  6573  001EB4  C04A  F016         	movff	trapezoidal@a+1,___ftge@ff1+1
  6574  001EB8  C04B  F017         	movff	trapezoidal@a+2,___ftge@ff1+2
  6575  001EBC  C055  F018         	movff	trapezoidal@x,___ftge@ff2
  6576  001EC0  C056  F019         	movff	trapezoidal@x+1,___ftge@ff2+1
  6577  001EC4  C057  F01A         	movff	trapezoidal@x+2,___ftge@ff2+2
  6578  001EC8  ECAD  F017         	call	___ftge	;wreg free
  6579  001ECC  B0D8               	btfsc	status,0,c
  6580  001ECE  D050               	goto	l199
  6581  001ED0  C055  F015         	movff	trapezoidal@x,___ftge@ff1
  6582  001ED4  C056  F016         	movff	trapezoidal@x+1,___ftge@ff1+1
  6583  001ED8  C057  F017         	movff	trapezoidal@x+2,___ftge@ff1+2
  6584  001EDC  C04C  F018         	movff	trapezoidal@b,___ftge@ff2
  6585  001EE0  C04D  F019         	movff	trapezoidal@b+1,___ftge@ff2+1
  6586  001EE4  C04E  F01A         	movff	trapezoidal@b+2,___ftge@ff2+2
  6587  001EE8  ECAD  F017         	call	___ftge	;wreg free
  6588  001EEC  B0D8               	btfsc	status,0,c
  6589  001EEE  D040               	goto	l199
  6590                           
  6591                           ;fuzzy.c: 81: ux=(x-a)/(b-a);
  6592  001EF0  C055  F031         	movff	trapezoidal@x,___ftadd@f2
  6593  001EF4  C056  F032         	movff	trapezoidal@x+1,___ftadd@f2+1
  6594  001EF8  C057  F033         	movff	trapezoidal@x+2,___ftadd@f2+2
  6595  001EFC  C049  F001         	movff	trapezoidal@a,___ftneg@f1
  6596  001F00  C04A  F002         	movff	trapezoidal@a+1,___ftneg@f1+1
  6597  001F04  C04B  F003         	movff	trapezoidal@a+2,___ftneg@f1+2
  6598  001F08  ECE9  F01A         	call	___ftneg	;wreg free
  6599  001F0C  C001  F02E         	movff	?___ftneg,___ftadd@f1
  6600  001F10  C002  F02F         	movff	?___ftneg+1,___ftadd@f1+1
  6601  001F14  C003  F030         	movff	?___ftneg+2,___ftadd@f1+2
  6602  001F18  EC5B  F010         	call	___ftadd	;wreg free
  6603  001F1C  C02E  F03A         	movff	?___ftadd,___ftdiv@f1
  6604  001F20  C02F  F03B         	movff	?___ftadd+1,___ftdiv@f1+1
  6605  001F24  C030  F03C         	movff	?___ftadd+2,___ftdiv@f1+2
  6606  001F28  C04C  F031         	movff	trapezoidal@b,___ftadd@f2
  6607  001F2C  C04D  F032         	movff	trapezoidal@b+1,___ftadd@f2+1
  6608  001F30  C04E  F033         	movff	trapezoidal@b+2,___ftadd@f2+2
  6609  001F34  C049  F001         	movff	trapezoidal@a,___ftneg@f1
  6610  001F38  C04A  F002         	movff	trapezoidal@a+1,___ftneg@f1+1
  6611  001F3C  C04B  F003         	movff	trapezoidal@a+2,___ftneg@f1+2
  6612  001F40  ECE9  F01A         	call	___ftneg	;wreg free
  6613  001F44  C001  F02E         	movff	?___ftneg,___ftadd@f1
  6614  001F48  C002  F02F         	movff	?___ftneg+1,___ftadd@f1+1
  6615  001F4C  C003  F030         	movff	?___ftneg+2,___ftadd@f1+2
  6616  001F50  EC5B  F010         	call	___ftadd	;wreg free
  6617  001F54  C02E  F03D         	movff	?___ftadd,___ftdiv@f2
  6618  001F58  C02F  F03E         	movff	?___ftadd+1,___ftdiv@f2+1
  6619  001F5C  C030  F03F         	movff	?___ftadd+2,___ftdiv@f2+2
  6620  001F60  EC26  F016         	call	___ftdiv	;wreg free
  6621  001F64  C03A  F058         	movff	?___ftdiv,trapezoidal@ux
  6622  001F68  C03B  F059         	movff	?___ftdiv+1,trapezoidal@ux+1
  6623  001F6C  C03C  F05A         	movff	?___ftdiv+2,trapezoidal@ux+2
  6624  001F70                     l199:
  6625                           
  6626                           ;fuzzy.c: 82: }
  6627                           ;fuzzy.c: 83: if(x>=b && x<=c){
  6628  001F70  C055  F015         	movff	trapezoidal@x,___ftge@ff1
  6629  001F74  C056  F016         	movff	trapezoidal@x+1,___ftge@ff1+1
  6630  001F78  C057  F017         	movff	trapezoidal@x+2,___ftge@ff1+2
  6631  001F7C  C04C  F018         	movff	trapezoidal@b,___ftge@ff2
  6632  001F80  C04D  F019         	movff	trapezoidal@b+1,___ftge@ff2+1
  6633  001F84  C04E  F01A         	movff	trapezoidal@b+2,___ftge@ff2+2
  6634  001F88  ECAD  F017         	call	___ftge	;wreg free
  6635  001F8C  A0D8               	btfss	status,0,c
  6636  001F8E  D016               	goto	l3376
  6637  001F90  C04F  F015         	movff	trapezoidal@c,___ftge@ff1
  6638  001F94  C050  F016         	movff	trapezoidal@c+1,___ftge@ff1+1
  6639  001F98  C051  F017         	movff	trapezoidal@c+2,___ftge@ff1+2
  6640  001F9C  C055  F018         	movff	trapezoidal@x,___ftge@ff2
  6641  001FA0  C056  F019         	movff	trapezoidal@x+1,___ftge@ff2+1
  6642  001FA4  C057  F01A         	movff	trapezoidal@x+2,___ftge@ff2+2
  6643  001FA8  ECAD  F017         	call	___ftge	;wreg free
  6644  001FAC  A0D8               	btfss	status,0,c
  6645  001FAE  D006               	goto	l3376
  6646                           
  6647                           ;fuzzy.c: 84: ux=1;
  6648  001FB0  0E00               	movlw	0
  6649  001FB2  6E58               	movwf	trapezoidal@ux,c
  6650  001FB4  0E80               	movlw	128
  6651  001FB6  6E59               	movwf	trapezoidal@ux+1,c
  6652  001FB8  0E3F               	movlw	63
  6653  001FBA  6E5A               	movwf	trapezoidal@ux+2,c
  6654  001FBC                     l3376:
  6655                           
  6656                           ;fuzzy.c: 85: }
  6657                           ;fuzzy.c: 86: if(x>c && x<d){
  6658  001FBC  C04F  F015         	movff	trapezoidal@c,___ftge@ff1
  6659  001FC0  C050  F016         	movff	trapezoidal@c+1,___ftge@ff1+1
  6660  001FC4  C051  F017         	movff	trapezoidal@c+2,___ftge@ff1+2
  6661  001FC8  C055  F018         	movff	trapezoidal@x,___ftge@ff2
  6662  001FCC  C056  F019         	movff	trapezoidal@x+1,___ftge@ff2+1
  6663  001FD0  C057  F01A         	movff	trapezoidal@x+2,___ftge@ff2+2
  6664  001FD4  ECAD  F017         	call	___ftge	;wreg free
  6665  001FD8  B0D8               	btfsc	status,0,c
  6666  001FDA  D050               	goto	l201
  6667  001FDC  C055  F015         	movff	trapezoidal@x,___ftge@ff1
  6668  001FE0  C056  F016         	movff	trapezoidal@x+1,___ftge@ff1+1
  6669  001FE4  C057  F017         	movff	trapezoidal@x+2,___ftge@ff1+2
  6670  001FE8  C052  F018         	movff	trapezoidal@d,___ftge@ff2
  6671  001FEC  C053  F019         	movff	trapezoidal@d+1,___ftge@ff2+1
  6672  001FF0  C054  F01A         	movff	trapezoidal@d+2,___ftge@ff2+2
  6673  001FF4  ECAD  F017         	call	___ftge	;wreg free
  6674  001FF8  B0D8               	btfsc	status,0,c
  6675  001FFA  D040               	goto	l201
  6676                           
  6677                           ;fuzzy.c: 87: ux = (d-x)/(d-c);
  6678  001FFC  C052  F031         	movff	trapezoidal@d,___ftadd@f2
  6679  002000  C053  F032         	movff	trapezoidal@d+1,___ftadd@f2+1
  6680  002004  C054  F033         	movff	trapezoidal@d+2,___ftadd@f2+2
  6681  002008  C055  F001         	movff	trapezoidal@x,___ftneg@f1
  6682  00200C  C056  F002         	movff	trapezoidal@x+1,___ftneg@f1+1
  6683  002010  C057  F003         	movff	trapezoidal@x+2,___ftneg@f1+2
  6684  002014  ECE9  F01A         	call	___ftneg	;wreg free
  6685  002018  C001  F02E         	movff	?___ftneg,___ftadd@f1
  6686  00201C  C002  F02F         	movff	?___ftneg+1,___ftadd@f1+1
  6687  002020  C003  F030         	movff	?___ftneg+2,___ftadd@f1+2
  6688  002024  EC5B  F010         	call	___ftadd	;wreg free
  6689  002028  C02E  F03A         	movff	?___ftadd,___ftdiv@f1
  6690  00202C  C02F  F03B         	movff	?___ftadd+1,___ftdiv@f1+1
  6691  002030  C030  F03C         	movff	?___ftadd+2,___ftdiv@f1+2
  6692  002034  C052  F031         	movff	trapezoidal@d,___ftadd@f2
  6693  002038  C053  F032         	movff	trapezoidal@d+1,___ftadd@f2+1
  6694  00203C  C054  F033         	movff	trapezoidal@d+2,___ftadd@f2+2
  6695  002040  C04F  F001         	movff	trapezoidal@c,___ftneg@f1
  6696  002044  C050  F002         	movff	trapezoidal@c+1,___ftneg@f1+1
  6697  002048  C051  F003         	movff	trapezoidal@c+2,___ftneg@f1+2
  6698  00204C  ECE9  F01A         	call	___ftneg	;wreg free
  6699  002050  C001  F02E         	movff	?___ftneg,___ftadd@f1
  6700  002054  C002  F02F         	movff	?___ftneg+1,___ftadd@f1+1
  6701  002058  C003  F030         	movff	?___ftneg+2,___ftadd@f1+2
  6702  00205C  EC5B  F010         	call	___ftadd	;wreg free
  6703  002060  C02E  F03D         	movff	?___ftadd,___ftdiv@f2
  6704  002064  C02F  F03E         	movff	?___ftadd+1,___ftdiv@f2+1
  6705  002068  C030  F03F         	movff	?___ftadd+2,___ftdiv@f2+2
  6706  00206C  EC26  F016         	call	___ftdiv	;wreg free
  6707  002070  C03A  F058         	movff	?___ftdiv,trapezoidal@ux
  6708  002074  C03B  F059         	movff	?___ftdiv+1,trapezoidal@ux+1
  6709  002078  C03C  F05A         	movff	?___ftdiv+2,trapezoidal@ux+2
  6710  00207C                     l201:
  6711                           
  6712                           ;fuzzy.c: 88: }
  6713                           ;fuzzy.c: 89: if(x>d){
  6714  00207C  C052  F015         	movff	trapezoidal@d,___ftge@ff1
  6715  002080  C053  F016         	movff	trapezoidal@d+1,___ftge@ff1+1
  6716  002084  C054  F017         	movff	trapezoidal@d+2,___ftge@ff1+2
  6717  002088  C055  F018         	movff	trapezoidal@x,___ftge@ff2
  6718  00208C  C056  F019         	movff	trapezoidal@x+1,___ftge@ff2+1
  6719  002090  C057  F01A         	movff	trapezoidal@x+2,___ftge@ff2+2
  6720  002094  ECAD  F017         	call	___ftge	;wreg free
  6721  002098  B0D8               	btfsc	status,0,c
  6722  00209A  D006               	goto	l3384
  6723                           
  6724                           ;fuzzy.c: 90: ux=0;
  6725  00209C  0E00               	movlw	0
  6726  00209E  6E58               	movwf	trapezoidal@ux,c
  6727  0020A0  0E00               	movlw	0
  6728  0020A2  6E59               	movwf	trapezoidal@ux+1,c
  6729  0020A4  0E00               	movlw	0
  6730  0020A6  6E5A               	movwf	trapezoidal@ux+2,c
  6731  0020A8                     l3384:
  6732                           
  6733                           ;fuzzy.c: 91: }
  6734                           ;fuzzy.c: 92: return ux;
  6735  0020A8  C058  F049         	movff	trapezoidal@ux,?_trapezoidal
  6736  0020AC  C059  F04A         	movff	trapezoidal@ux+1,?_trapezoidal+1
  6737  0020B0  C05A  F04B         	movff	trapezoidal@ux+2,?_trapezoidal+2
  6738  0020B4  0012               	return	
  6739  0020B6                     __end_of_trapezoidal:
  6740                           	opt stack 0
  6741                           tblptru	equ	0xFF8
  6742                           tblptrh	equ	0xFF7
  6743                           tblptrl	equ	0xFF6
  6744                           tablat	equ	0xFF5
  6745                           prodh	equ	0xFF4
  6746                           prodl	equ	0xFF3
  6747                           indf0	equ	0xFEF
  6748                           fsr0h	equ	0xFEA
  6749                           fsr0l	equ	0xFE9
  6750                           wreg	equ	0xFE8
  6751                           postinc1	equ	0xFE6
  6752                           postdec1	equ	0xFE5
  6753                           fsr1h	equ	0xFE2
  6754                           fsr1l	equ	0xFE1
  6755                           indf2	equ	0xFDF
  6756                           postinc2	equ	0xFDE
  6757                           postdec2	equ	0xFDD
  6758                           fsr2h	equ	0xFDA
  6759                           fsr2l	equ	0xFD9
  6760                           status	equ	0xFD8
  6761                           
  6762 ;; *************** function ___ftneg *****************
  6763 ;; Defined at:
  6764 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftneg.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;  f1              3    0[COMRAM] float 
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;		None
  6769 ;; Return value:  Size  Location     Type
  6770 ;;                  3    0[COMRAM] float 
  6771 ;; Registers used:
  6772 ;;		wreg, status,2, status,0
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6778 ;;      Params:         3       0       0       0       0       0       0       0       0
  6779 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6780 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6781 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6782 ;;Total ram usage:        3 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; This function calls:
  6785 ;;		Nothing
  6786 ;; This function is called by:
  6787 ;;		_trapezoidal
  6788 ;;		_sprintf
  6789 ;;		_triangular
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           	psect	text24
  6794  0035D2                     __ptext24:
  6795                           	opt stack 0
  6796  0035D2                     ___ftneg:
  6797                           	opt stack 27
  6798                           
  6799                           ;incstack = 0
  6800  0035D2  5001               	movf	___ftneg@f1,w,c
  6801  0035D4  1002               	iorwf	___ftneg@f1+1,w,c
  6802  0035D6  1003               	iorwf	___ftneg@f1+2,w,c
  6803  0035D8  B4D8               	btfsc	status,2,c
  6804  0035DA  D006               	goto	l738
  6805  0035DC  0E00               	movlw	0
  6806  0035DE  1A01               	xorwf	___ftneg@f1,f,c
  6807  0035E0  0E00               	movlw	0
  6808  0035E2  1A02               	xorwf	___ftneg@f1+1,f,c
  6809  0035E4  0E80               	movlw	128
  6810  0035E6  1A03               	xorwf	___ftneg@f1+2,f,c
  6811  0035E8                     l738:
  6812  0035E8  C001  F001         	movff	___ftneg@f1,?___ftneg
  6813  0035EC  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6814  0035F0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6815  0035F4  0012               	return		;funcret
  6816  0035F6                     __end_of___ftneg:
  6817                           	opt stack 0
  6818                           tblptru	equ	0xFF8
  6819                           tblptrh	equ	0xFF7
  6820                           tblptrl	equ	0xFF6
  6821                           tablat	equ	0xFF5
  6822                           prodh	equ	0xFF4
  6823                           prodl	equ	0xFF3
  6824                           indf0	equ	0xFEF
  6825                           fsr0h	equ	0xFEA
  6826                           fsr0l	equ	0xFE9
  6827                           wreg	equ	0xFE8
  6828                           postinc1	equ	0xFE6
  6829                           postdec1	equ	0xFE5
  6830                           fsr1h	equ	0xFE2
  6831                           fsr1l	equ	0xFE1
  6832                           indf2	equ	0xFDF
  6833                           postinc2	equ	0xFDE
  6834                           postdec2	equ	0xFDD
  6835                           fsr2h	equ	0xFDA
  6836                           fsr2l	equ	0xFD9
  6837                           status	equ	0xFD8
  6838                           
  6839 ;; *************** function _qualified *****************
  6840 ;; Defined at:
  6841 ;;		line 108 in file "fuzzy.c"
  6842 ;; Parameters:    Size  Location     Type
  6843 ;;  y               2   29[COMRAM] PTR 
  6844 ;;		 -> fuzzy_system_single@qualified_cons_mf3(120), fuzzy_system_single@qualified_cons_mf2(120), fuzzy_system_single@qu
      +alified_cons_mf1(120), fuzzy_system@qualified_cons_mf3(120), 
  6845 ;;		 -> fuzzy_system@qualified_cons_mf2(120), fuzzy_system@qualified_cons_mf1(120), 
  6846 ;;  x               2   31[COMRAM] PTR 
  6847 ;;		 -> fuzzy_system_single@cons_mf3(120), fuzzy_system_single@cons_mf2(120), fuzzy_system_single@cons_mf1(120), fuzzy_s
      +ystem@cons_mf3(120), 
  6848 ;;		 -> fuzzy_system@cons_mf2(120), fuzzy_system@cons_mf1(120), 
  6849 ;;  w               3   33[COMRAM] PTR 
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;  min             3   36[COMRAM] PTR 
  6852 ;;  i               2   39[COMRAM] int 
  6853 ;; Return value:  Size  Location     Type
  6854 ;;                  1    wreg      void 
  6855 ;; Registers used:
  6856 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6857 ;; Tracked objects:
  6858 ;;		On entry : 0/0
  6859 ;;		On exit  : 0/0
  6860 ;;		Unchanged: 0/0
  6861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6862 ;;      Params:         7       0       0       0       0       0       0       0       0
  6863 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6864 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6865 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6866 ;;Total ram usage:       12 bytes
  6867 ;; Hardware stack levels used:    1
  6868 ;; Hardware stack levels required when called:    1
  6869 ;; This function calls:
  6870 ;;		___ftge
  6871 ;;		___wmul
  6872 ;; This function is called by:
  6873 ;;		_fuzzy_system_single
  6874 ;;		_fuzzy_system
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           	psect	text25
  6879  002B66                     __ptext25:
  6880                           	opt stack 0
  6881  002B66                     _qualified:
  6882                           	opt stack 28
  6883                           
  6884                           ;fuzzy.c: 110: double min;
  6885                           ;fuzzy.c: 111: int i;
  6886                           ;fuzzy.c: 112: min=w;
  6887                           
  6888                           ;incstack = 0
  6889  002B66  C022  F025         	movff	qualified@w,qualified@min
  6890  002B6A  C023  F026         	movff	qualified@w+1,qualified@min+1
  6891  002B6E  C024  F027         	movff	qualified@w+2,qualified@min+2
  6892                           
  6893                           ;fuzzy.c: 113: for(i=0;i<40;i++){
  6894  002B72  0E00               	movlw	0
  6895  002B74  6E29               	movwf	qualified@i+1,c
  6896  002B76  0E00               	movlw	0
  6897  002B78  6E28               	movwf	qualified@i,c
  6898  002B7A                     l3500:
  6899  002B7A  BE29               	btfsc	qualified@i+1,7,c
  6900  002B7C  D006               	goto	l3504
  6901  002B7E  5029               	movf	qualified@i+1,w,c
  6902  002B80  E164               	bnz	l217
  6903  002B82  0E28               	movlw	40
  6904  002B84  5C28               	subwf	qualified@i,w,c
  6905  002B86  B0D8               	btfsc	status,0,c
  6906  002B88  0012               	return	
  6907  002B8A                     l3504:
  6908                           
  6909                           ;fuzzy.c: 114: if (x[i] < w)
  6910  002B8A  C028  F00F         	movff	qualified@i,___wmul@multiplier
  6911  002B8E  C029  F010         	movff	qualified@i+1,___wmul@multiplier+1
  6912  002B92  0E00               	movlw	0
  6913  002B94  6E12               	movwf	___wmul@multiplicand+1,c
  6914  002B96  0E03               	movlw	3
  6915  002B98  6E11               	movwf	___wmul@multiplicand,c
  6916  002B9A  ECD6  F01A         	call	___wmul	;wreg free
  6917  002B9E  500F               	movf	?___wmul,w,c
  6918  002BA0  2420               	addwf	qualified@x,w,c
  6919  002BA2  6ED9               	movwf	fsr2l,c
  6920  002BA4  5010               	movf	?___wmul+1,w,c
  6921  002BA6  2021               	addwfc	qualified@x+1,w,c
  6922  002BA8  6EDA               	movwf	fsr2h,c
  6923  002BAA  CFDE F015          	movff	postinc2,___ftge@ff1
  6924  002BAE  CFDE F016          	movff	postinc2,___ftge@ff1+1
  6925  002BB2  CFDD F017          	movff	postdec2,___ftge@ff1+2
  6926  002BB6  C022  F018         	movff	qualified@w,___ftge@ff2
  6927  002BBA  C023  F019         	movff	qualified@w+1,___ftge@ff2+1
  6928  002BBE  C024  F01A         	movff	qualified@w+2,___ftge@ff2+2
  6929  002BC2  ECAD  F017         	call	___ftge	;wreg free
  6930  002BC6  B0D8               	btfsc	status,0,c
  6931  002BC8  D027               	goto	l3508
  6932                           
  6933                           ;fuzzy.c: 115: y[i] = x[i];
  6934  002BCA  C028  F00F         	movff	qualified@i,___wmul@multiplier
  6935  002BCE  C029  F010         	movff	qualified@i+1,___wmul@multiplier+1
  6936  002BD2  0E00               	movlw	0
  6937  002BD4  6E12               	movwf	___wmul@multiplicand+1,c
  6938  002BD6  0E03               	movlw	3
  6939  002BD8  6E11               	movwf	___wmul@multiplicand,c
  6940  002BDA  ECD6  F01A         	call	___wmul	;wreg free
  6941  002BDE  500F               	movf	?___wmul,w,c
  6942  002BE0  2420               	addwf	qualified@x,w,c
  6943  002BE2  6ED9               	movwf	fsr2l,c
  6944  002BE4  5010               	movf	?___wmul+1,w,c
  6945  002BE6  2021               	addwfc	qualified@x+1,w,c
  6946  002BE8  6EDA               	movwf	fsr2h,c
  6947  002BEA  C028  F00F         	movff	qualified@i,___wmul@multiplier
  6948  002BEE  C029  F010         	movff	qualified@i+1,___wmul@multiplier+1
  6949  002BF2  0E00               	movlw	0
  6950  002BF4  6E12               	movwf	___wmul@multiplicand+1,c
  6951  002BF6  0E03               	movlw	3
  6952  002BF8  6E11               	movwf	___wmul@multiplicand,c
  6953  002BFA  ECD6  F01A         	call	___wmul	;wreg free
  6954  002BFE  500F               	movf	?___wmul,w,c
  6955  002C00  241E               	addwf	qualified@y,w,c
  6956  002C02  6EE1               	movwf	fsr1l,c
  6957  002C04  5010               	movf	?___wmul+1,w,c
  6958  002C06  201F               	addwfc	qualified@y+1,w,c
  6959  002C08  6EE2               	movwf	fsr1h,c
  6960  002C0A  CFDE FFE6          	movff	postinc2,postinc1
  6961  002C0E  CFDE FFE6          	movff	postinc2,postinc1
  6962  002C12  CFDE FFE6          	movff	postinc2,postinc1
  6963  002C16  D016               	goto	l3510
  6964  002C18                     l3508:
  6965                           
  6966                           ;fuzzy.c: 116: else
  6967                           ;fuzzy.c: 117: y[i] = w;
  6968  002C18  C028  F00F         	movff	qualified@i,___wmul@multiplier
  6969  002C1C  C029  F010         	movff	qualified@i+1,___wmul@multiplier+1
  6970  002C20  0E00               	movlw	0
  6971  002C22  6E12               	movwf	___wmul@multiplicand+1,c
  6972  002C24  0E03               	movlw	3
  6973  002C26  6E11               	movwf	___wmul@multiplicand,c
  6974  002C28  ECD6  F01A         	call	___wmul	;wreg free
  6975  002C2C  500F               	movf	?___wmul,w,c
  6976  002C2E  241E               	addwf	qualified@y,w,c
  6977  002C30  6ED9               	movwf	fsr2l,c
  6978  002C32  5010               	movf	?___wmul+1,w,c
  6979  002C34  201F               	addwfc	qualified@y+1,w,c
  6980  002C36  6EDA               	movwf	fsr2h,c
  6981  002C38  C022  FFDE         	movff	qualified@w,postinc2
  6982  002C3C  C023  FFDE         	movff	qualified@w+1,postinc2
  6983  002C40  C024  FFDE         	movff	qualified@w+2,postinc2
  6984  002C44                     l3510:
  6985  002C44  4A28               	infsnz	qualified@i,f,c
  6986  002C46  2A29               	incf	qualified@i+1,f,c
  6987  002C48  D798               	goto	l3500
  6988  002C4A                     l217:
  6989  002C4A  0012               	return		;funcret
  6990  002C4C                     __end_of_qualified:
  6991                           	opt stack 0
  6992                           tblptru	equ	0xFF8
  6993                           tblptrh	equ	0xFF7
  6994                           tblptrl	equ	0xFF6
  6995                           tablat	equ	0xFF5
  6996                           prodh	equ	0xFF4
  6997                           prodl	equ	0xFF3
  6998                           indf0	equ	0xFEF
  6999                           fsr0h	equ	0xFEA
  7000                           fsr0l	equ	0xFE9
  7001                           wreg	equ	0xFE8
  7002                           postinc1	equ	0xFE6
  7003                           postdec1	equ	0xFE5
  7004                           fsr1h	equ	0xFE2
  7005                           fsr1l	equ	0xFE1
  7006                           indf2	equ	0xFDF
  7007                           postinc2	equ	0xFDE
  7008                           postdec2	equ	0xFDD
  7009                           fsr2h	equ	0xFDA
  7010                           fsr2l	equ	0xFD9
  7011                           status	equ	0xFD8
  7012                           
  7013 ;; *************** function _out_mf *****************
  7014 ;; Defined at:
  7015 ;;		line 123 in file "fuzzy.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;  result          2   29[COMRAM] PTR 
  7018 ;;		 -> fuzzy_system_single@overall_out_mf(120), fuzzy_system@overall_out_mf(120), 
  7019 ;;  x               2   31[COMRAM] PTR 
  7020 ;;		 -> fuzzy_system_single@qualified_cons_mf1(120), fuzzy_system@qualified_cons_mf1(120), 
  7021 ;;  y               2   33[COMRAM] PTR 
  7022 ;;		 -> fuzzy_system_single@qualified_cons_mf2(120), fuzzy_system@qualified_cons_mf2(120), 
  7023 ;;  z               2   35[COMRAM] PTR 
  7024 ;;		 -> fuzzy_system_single@qualified_cons_mf3(120), fuzzy_system@qualified_cons_mf3(120), 
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;  i               2   37[COMRAM] int 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;                  1    wreg      void 
  7029 ;; Registers used:
  7030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7036 ;;      Params:         8       0       0       0       0       0       0       0       0
  7037 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7038 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7039 ;;      Totals:        10       0       0       0       0       0       0       0       0
  7040 ;;Total ram usage:       10 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:    1
  7043 ;; This function calls:
  7044 ;;		___ftge
  7045 ;;		___wmul
  7046 ;; This function is called by:
  7047 ;;		_fuzzy_system_single
  7048 ;;		_fuzzy_system
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text26
  7053  0019CE                     __ptext26:
  7054                           	opt stack 0
  7055  0019CE                     _out_mf:
  7056                           	opt stack 28
  7057                           
  7058                           ;fuzzy.c: 125: int i;
  7059                           ;fuzzy.c: 126: for(i=0; i<40;i++){
  7060                           
  7061                           ;incstack = 0
  7062  0019CE  0E00               	movlw	0
  7063  0019D0  6E27               	movwf	out_mf@i+1,c
  7064  0019D2  0E00               	movlw	0
  7065  0019D4  6E26               	movwf	out_mf@i,c
  7066  0019D6  BE27               	btfsc	out_mf@i+1,7,c
  7067  0019D8  D008               	goto	l3520
  7068  0019DA  5027               	movf	out_mf@i+1,w,c
  7069  0019DC  E105               	bnz	u3570
  7070  0019DE  0E28               	movlw	40
  7071  0019E0  5C26               	subwf	out_mf@i,w,c
  7072  0019E2  B0D8               	btfsc	status,0,c
  7073  0019E4  0012               	return	
  7074  0019E6  D001               	goto	l3520
  7075  0019E8                     u3570:
  7076  0019E8  0012               	return	
  7077  0019EA                     l3520:
  7078                           
  7079                           ;fuzzy.c: 127: if(x[i] > y[i] && x[i] > z[i])
  7080  0019EA  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7081  0019EE  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7082  0019F2  0E00               	movlw	0
  7083  0019F4  6E12               	movwf	___wmul@multiplicand+1,c
  7084  0019F6  0E03               	movlw	3
  7085  0019F8  6E11               	movwf	___wmul@multiplicand,c
  7086  0019FA  ECD6  F01A         	call	___wmul	;wreg free
  7087  0019FE  500F               	movf	?___wmul,w,c
  7088  001A00  2422               	addwf	out_mf@y,w,c
  7089  001A02  6ED9               	movwf	fsr2l,c
  7090  001A04  5010               	movf	?___wmul+1,w,c
  7091  001A06  2023               	addwfc	out_mf@y+1,w,c
  7092  001A08  6EDA               	movwf	fsr2h,c
  7093  001A0A  CFDE F015          	movff	postinc2,___ftge@ff1
  7094  001A0E  CFDE F016          	movff	postinc2,___ftge@ff1+1
  7095  001A12  CFDD F017          	movff	postdec2,___ftge@ff1+2
  7096  001A16  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7097  001A1A  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7098  001A1E  0E00               	movlw	0
  7099  001A20  6E12               	movwf	___wmul@multiplicand+1,c
  7100  001A22  0E03               	movlw	3
  7101  001A24  6E11               	movwf	___wmul@multiplicand,c
  7102  001A26  ECD6  F01A         	call	___wmul	;wreg free
  7103  001A2A  500F               	movf	?___wmul,w,c
  7104  001A2C  2420               	addwf	out_mf@x,w,c
  7105  001A2E  6ED9               	movwf	fsr2l,c
  7106  001A30  5010               	movf	?___wmul+1,w,c
  7107  001A32  2021               	addwfc	out_mf@x+1,w,c
  7108  001A34  6EDA               	movwf	fsr2h,c
  7109  001A36  CFDE F018          	movff	postinc2,___ftge@ff2
  7110  001A3A  CFDE F019          	movff	postinc2,___ftge@ff2+1
  7111  001A3E  CFDD F01A          	movff	postdec2,___ftge@ff2+2
  7112  001A42  ECAD  F017         	call	___ftge	;wreg free
  7113  001A46  B0D8               	btfsc	status,0,c
  7114  001A48  D04B               	goto	l3526
  7115  001A4A  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7116  001A4E  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7117  001A52  0E00               	movlw	0
  7118  001A54  6E12               	movwf	___wmul@multiplicand+1,c
  7119  001A56  0E03               	movlw	3
  7120  001A58  6E11               	movwf	___wmul@multiplicand,c
  7121  001A5A  ECD6  F01A         	call	___wmul	;wreg free
  7122  001A5E  500F               	movf	?___wmul,w,c
  7123  001A60  2424               	addwf	out_mf@z,w,c
  7124  001A62  6ED9               	movwf	fsr2l,c
  7125  001A64  5010               	movf	?___wmul+1,w,c
  7126  001A66  2025               	addwfc	out_mf@z+1,w,c
  7127  001A68  6EDA               	movwf	fsr2h,c
  7128  001A6A  CFDE F015          	movff	postinc2,___ftge@ff1
  7129  001A6E  CFDE F016          	movff	postinc2,___ftge@ff1+1
  7130  001A72  CFDD F017          	movff	postdec2,___ftge@ff1+2
  7131  001A76  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7132  001A7A  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7133  001A7E  0E00               	movlw	0
  7134  001A80  6E12               	movwf	___wmul@multiplicand+1,c
  7135  001A82  0E03               	movlw	3
  7136  001A84  6E11               	movwf	___wmul@multiplicand,c
  7137  001A86  ECD6  F01A         	call	___wmul	;wreg free
  7138  001A8A  500F               	movf	?___wmul,w,c
  7139  001A8C  2420               	addwf	out_mf@x,w,c
  7140  001A8E  6ED9               	movwf	fsr2l,c
  7141  001A90  5010               	movf	?___wmul+1,w,c
  7142  001A92  2021               	addwfc	out_mf@x+1,w,c
  7143  001A94  6EDA               	movwf	fsr2h,c
  7144  001A96  CFDE F018          	movff	postinc2,___ftge@ff2
  7145  001A9A  CFDE F019          	movff	postinc2,___ftge@ff2+1
  7146  001A9E  CFDD F01A          	movff	postdec2,___ftge@ff2+2
  7147  001AA2  ECAD  F017         	call	___ftge	;wreg free
  7148  001AA6  B0D8               	btfsc	status,0,c
  7149  001AA8  D01B               	goto	l3526
  7150                           
  7151                           ;fuzzy.c: 128: {
  7152                           ;fuzzy.c: 130: result[i]=x[i];
  7153  001AAA  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7154  001AAE  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7155  001AB2  0E00               	movlw	0
  7156  001AB4  6E12               	movwf	___wmul@multiplicand+1,c
  7157  001AB6  0E03               	movlw	3
  7158  001AB8  6E11               	movwf	___wmul@multiplicand,c
  7159  001ABA  ECD6  F01A         	call	___wmul	;wreg free
  7160  001ABE  500F               	movf	?___wmul,w,c
  7161  001AC0  2420               	addwf	out_mf@x,w,c
  7162  001AC2  6ED9               	movwf	fsr2l,c
  7163  001AC4  5010               	movf	?___wmul+1,w,c
  7164  001AC6  2021               	addwfc	out_mf@x+1,w,c
  7165  001AC8  6EDA               	movwf	fsr2h,c
  7166  001ACA  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7167  001ACE  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7168  001AD2  0E00               	movlw	0
  7169  001AD4  6E12               	movwf	___wmul@multiplicand+1,c
  7170  001AD6  0E03               	movlw	3
  7171  001AD8  6E11               	movwf	___wmul@multiplicand,c
  7172  001ADA  ECD6  F01A         	call	___wmul	;wreg free
  7173  001ADE  D095               	goto	L8
  7174  001AE0                     l3526:
  7175                           
  7176                           ;fuzzy.c: 132: else
  7177                           ;fuzzy.c: 133: {
  7178                           ;fuzzy.c: 134: if( y[i] > x[i] && y[i] > z[i]){
  7179  001AE0  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7180  001AE4  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7181  001AE8  0E00               	movlw	0
  7182  001AEA  6E12               	movwf	___wmul@multiplicand+1,c
  7183  001AEC  0E03               	movlw	3
  7184  001AEE  6E11               	movwf	___wmul@multiplicand,c
  7185  001AF0  ECD6  F01A         	call	___wmul	;wreg free
  7186  001AF4  500F               	movf	?___wmul,w,c
  7187  001AF6  2420               	addwf	out_mf@x,w,c
  7188  001AF8  6ED9               	movwf	fsr2l,c
  7189  001AFA  5010               	movf	?___wmul+1,w,c
  7190  001AFC  2021               	addwfc	out_mf@x+1,w,c
  7191  001AFE  6EDA               	movwf	fsr2h,c
  7192  001B00  CFDE F015          	movff	postinc2,___ftge@ff1
  7193  001B04  CFDE F016          	movff	postinc2,___ftge@ff1+1
  7194  001B08  CFDD F017          	movff	postdec2,___ftge@ff1+2
  7195  001B0C  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7196  001B10  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7197  001B14  0E00               	movlw	0
  7198  001B16  6E12               	movwf	___wmul@multiplicand+1,c
  7199  001B18  0E03               	movlw	3
  7200  001B1A  6E11               	movwf	___wmul@multiplicand,c
  7201  001B1C  ECD6  F01A         	call	___wmul	;wreg free
  7202  001B20  500F               	movf	?___wmul,w,c
  7203  001B22  2422               	addwf	out_mf@y,w,c
  7204  001B24  6ED9               	movwf	fsr2l,c
  7205  001B26  5010               	movf	?___wmul+1,w,c
  7206  001B28  2023               	addwfc	out_mf@y+1,w,c
  7207  001B2A  6EDA               	movwf	fsr2h,c
  7208  001B2C  CFDE F018          	movff	postinc2,___ftge@ff2
  7209  001B30  CFDE F019          	movff	postinc2,___ftge@ff2+1
  7210  001B34  CFDD F01A          	movff	postdec2,___ftge@ff2+2
  7211  001B38  ECAD  F017         	call	___ftge	;wreg free
  7212  001B3C  B0D8               	btfsc	status,0,c
  7213  001B3E  D04B               	goto	l3532
  7214  001B40  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7215  001B44  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7216  001B48  0E00               	movlw	0
  7217  001B4A  6E12               	movwf	___wmul@multiplicand+1,c
  7218  001B4C  0E03               	movlw	3
  7219  001B4E  6E11               	movwf	___wmul@multiplicand,c
  7220  001B50  ECD6  F01A         	call	___wmul	;wreg free
  7221  001B54  500F               	movf	?___wmul,w,c
  7222  001B56  2424               	addwf	out_mf@z,w,c
  7223  001B58  6ED9               	movwf	fsr2l,c
  7224  001B5A  5010               	movf	?___wmul+1,w,c
  7225  001B5C  2025               	addwfc	out_mf@z+1,w,c
  7226  001B5E  6EDA               	movwf	fsr2h,c
  7227  001B60  CFDE F015          	movff	postinc2,___ftge@ff1
  7228  001B64  CFDE F016          	movff	postinc2,___ftge@ff1+1
  7229  001B68  CFDD F017          	movff	postdec2,___ftge@ff1+2
  7230  001B6C  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7231  001B70  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7232  001B74  0E00               	movlw	0
  7233  001B76  6E12               	movwf	___wmul@multiplicand+1,c
  7234  001B78  0E03               	movlw	3
  7235  001B7A  6E11               	movwf	___wmul@multiplicand,c
  7236  001B7C  ECD6  F01A         	call	___wmul	;wreg free
  7237  001B80  500F               	movf	?___wmul,w,c
  7238  001B82  2422               	addwf	out_mf@y,w,c
  7239  001B84  6ED9               	movwf	fsr2l,c
  7240  001B86  5010               	movf	?___wmul+1,w,c
  7241  001B88  2023               	addwfc	out_mf@y+1,w,c
  7242  001B8A  6EDA               	movwf	fsr2h,c
  7243  001B8C  CFDE F018          	movff	postinc2,___ftge@ff2
  7244  001B90  CFDE F019          	movff	postinc2,___ftge@ff2+1
  7245  001B94  CFDD F01A          	movff	postdec2,___ftge@ff2+2
  7246  001B98  ECAD  F017         	call	___ftge	;wreg free
  7247  001B9C  B0D8               	btfsc	status,0,c
  7248  001B9E  D01B               	goto	l3532
  7249                           
  7250                           ;fuzzy.c: 136: result[i]=y[i];
  7251  001BA0  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7252  001BA4  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7253  001BA8  0E00               	movlw	0
  7254  001BAA  6E12               	movwf	___wmul@multiplicand+1,c
  7255  001BAC  0E03               	movlw	3
  7256  001BAE  6E11               	movwf	___wmul@multiplicand,c
  7257  001BB0  ECD6  F01A         	call	___wmul	;wreg free
  7258  001BB4  500F               	movf	?___wmul,w,c
  7259  001BB6  2422               	addwf	out_mf@y,w,c
  7260  001BB8  6ED9               	movwf	fsr2l,c
  7261  001BBA  5010               	movf	?___wmul+1,w,c
  7262  001BBC  2023               	addwfc	out_mf@y+1,w,c
  7263  001BBE  6EDA               	movwf	fsr2h,c
  7264  001BC0  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7265  001BC4  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7266  001BC8  0E00               	movlw	0
  7267  001BCA  6E12               	movwf	___wmul@multiplicand+1,c
  7268  001BCC  0E03               	movlw	3
  7269  001BCE  6E11               	movwf	___wmul@multiplicand,c
  7270  001BD0  ECD6  F01A         	call	___wmul	;wreg free
  7271  001BD4  D01A               	goto	L8
  7272  001BD6                     l3532:
  7273                           
  7274                           ;fuzzy.c: 138: else
  7275                           ;fuzzy.c: 139: {
  7276                           ;fuzzy.c: 141: result[i]=z[i];
  7277  001BD6  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7278  001BDA  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7279  001BDE  0E00               	movlw	0
  7280  001BE0  6E12               	movwf	___wmul@multiplicand+1,c
  7281  001BE2  0E03               	movlw	3
  7282  001BE4  6E11               	movwf	___wmul@multiplicand,c
  7283  001BE6  ECD6  F01A         	call	___wmul	;wreg free
  7284  001BEA  500F               	movf	?___wmul,w,c
  7285  001BEC  2424               	addwf	out_mf@z,w,c
  7286  001BEE  6ED9               	movwf	fsr2l,c
  7287  001BF0  5010               	movf	?___wmul+1,w,c
  7288  001BF2  2025               	addwfc	out_mf@z+1,w,c
  7289  001BF4  6EDA               	movwf	fsr2h,c
  7290  001BF6  C026  F00F         	movff	out_mf@i,___wmul@multiplier
  7291  001BFA  C027  F010         	movff	out_mf@i+1,___wmul@multiplier+1
  7292  001BFE  0E00               	movlw	0
  7293  001C00  6E12               	movwf	___wmul@multiplicand+1,c
  7294  001C02  0E03               	movlw	3
  7295  001C04  6E11               	movwf	___wmul@multiplicand,c
  7296  001C06  ECD6  F01A         	call	___wmul	;wreg free
  7297  001C0A                     L8:
  7298  001C0A  500F               	movf	?___wmul,w,c
  7299  001C0C  241E               	addwf	out_mf@result,w,c
  7300  001C0E  6EE1               	movwf	fsr1l,c
  7301  001C10  5010               	movf	?___wmul+1,w,c
  7302  001C12  201F               	addwfc	out_mf@result+1,w,c
  7303  001C14  6EE2               	movwf	fsr1h,c
  7304  001C16  CFDE FFE6          	movff	postinc2,postinc1
  7305  001C1A  CFDE FFE6          	movff	postinc2,postinc1
  7306  001C1E  CFDE FFE6          	movff	postinc2,postinc1
  7307  001C22  4A26               	infsnz	out_mf@i,f,c
  7308  001C24  2A27               	incf	out_mf@i+1,f,c
  7309  001C26  BE27               	btfsc	out_mf@i+1,7,c
  7310  001C28  D6E0               	goto	l3520
  7311  001C2A  5027               	movf	out_mf@i+1,w,c
  7312  001C2C  E101               	bnz	l226
  7313  001C2E  D6D7               	goto	L9
  7314  001C30                     l226:
  7315  001C30  0012               	return		;funcret
  7316  001C32                     __end_of_out_mf:
  7317                           	opt stack 0
  7318                           tblptru	equ	0xFF8
  7319                           tblptrh	equ	0xFF7
  7320                           tblptrl	equ	0xFF6
  7321                           tablat	equ	0xFF5
  7322                           prodh	equ	0xFF4
  7323                           prodl	equ	0xFF3
  7324                           indf0	equ	0xFEF
  7325                           fsr0h	equ	0xFEA
  7326                           fsr0l	equ	0xFE9
  7327                           wreg	equ	0xFE8
  7328                           postinc1	equ	0xFE6
  7329                           postdec1	equ	0xFE5
  7330                           fsr1h	equ	0xFE2
  7331                           fsr1l	equ	0xFE1
  7332                           indf2	equ	0xFDF
  7333                           postinc2	equ	0xFDE
  7334                           postdec2	equ	0xFDD
  7335                           fsr2h	equ	0xFDA
  7336                           fsr2l	equ	0xFD9
  7337                           status	equ	0xFD8
  7338                           
  7339 ;; *************** function ___ftge *****************
  7340 ;; Defined at:
  7341 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftge.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;  ff1             3   20[COMRAM] float 
  7344 ;;  ff2             3   23[COMRAM] float 
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;		None
  7347 ;; Return value:  Size  Location     Type
  7348 ;;		None               void
  7349 ;; Registers used:
  7350 ;;		wreg, status,2, status,0
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7356 ;;      Params:         6       0       0       0       0       0       0       0       0
  7357 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7358 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7359 ;;      Totals:         9       0       0       0       0       0       0       0       0
  7360 ;;Total ram usage:        9 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; This function calls:
  7363 ;;		Nothing
  7364 ;; This function is called by:
  7365 ;;		_trapezoidal
  7366 ;;		_qualified
  7367 ;;		_out_mf
  7368 ;;		_sprintf
  7369 ;;		_minimo
  7370 ;;		_maximo
  7371 ;;		_triangular
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           	psect	text27
  7376  002F5A                     __ptext27:
  7377                           	opt stack 0
  7378  002F5A                     ___ftge:
  7379                           	opt stack 27
  7380                           
  7381                           ;incstack = 0
  7382  002F5A  AE17               	btfss	___ftge@ff1+2,7,c
  7383  002F5C  D016               	goto	l2992
  7384  002F5E  C015  F01B         	movff	___ftge@ff1,??___ftge
  7385  002F62  C016  F01C         	movff	___ftge@ff1+1,??___ftge+1
  7386  002F66  C017  F01D         	movff	___ftge@ff1+2,??___ftge+2
  7387  002F6A  1E1B               	comf	??___ftge,f,c
  7388  002F6C  1E1C               	comf	??___ftge+1,f,c
  7389  002F6E  1E1D               	comf	??___ftge+2,f,c
  7390  002F70  2A1B               	incf	??___ftge,f,c
  7391  002F72  0E00               	movlw	0
  7392  002F74  221C               	addwfc	??___ftge+1,f,c
  7393  002F76  221D               	addwfc	??___ftge+2,f,c
  7394  002F78  0E00               	movlw	0
  7395  002F7A  241B               	addwf	??___ftge,w,c
  7396  002F7C  6E15               	movwf	___ftge@ff1,c
  7397  002F7E  0E00               	movlw	0
  7398  002F80  201C               	addwfc	??___ftge+1,w,c
  7399  002F82  6E16               	movwf	___ftge@ff1+1,c
  7400  002F84  0E80               	movlw	128
  7401  002F86  201D               	addwfc	??___ftge+2,w,c
  7402  002F88  6E17               	movwf	___ftge@ff1+2,c
  7403  002F8A                     l2992:
  7404  002F8A  AE1A               	btfss	___ftge@ff2+2,7,c
  7405  002F8C  D016               	goto	l2996
  7406  002F8E  C018  F01B         	movff	___ftge@ff2,??___ftge
  7407  002F92  C019  F01C         	movff	___ftge@ff2+1,??___ftge+1
  7408  002F96  C01A  F01D         	movff	___ftge@ff2+2,??___ftge+2
  7409  002F9A  1E1B               	comf	??___ftge,f,c
  7410  002F9C  1E1C               	comf	??___ftge+1,f,c
  7411  002F9E  1E1D               	comf	??___ftge+2,f,c
  7412  002FA0  2A1B               	incf	??___ftge,f,c
  7413  002FA2  0E00               	movlw	0
  7414  002FA4  221C               	addwfc	??___ftge+1,f,c
  7415  002FA6  221D               	addwfc	??___ftge+2,f,c
  7416  002FA8  0E00               	movlw	0
  7417  002FAA  241B               	addwf	??___ftge,w,c
  7418  002FAC  6E18               	movwf	___ftge@ff2,c
  7419  002FAE  0E00               	movlw	0
  7420  002FB0  201C               	addwfc	??___ftge+1,w,c
  7421  002FB2  6E19               	movwf	___ftge@ff2+1,c
  7422  002FB4  0E80               	movlw	128
  7423  002FB6  201D               	addwfc	??___ftge+2,w,c
  7424  002FB8  6E1A               	movwf	___ftge@ff2+2,c
  7425  002FBA                     l2996:
  7426  002FBA  0E00               	movlw	0
  7427  002FBC  1A15               	xorwf	___ftge@ff1,f,c
  7428  002FBE  0E00               	movlw	0
  7429  002FC0  1A16               	xorwf	___ftge@ff1+1,f,c
  7430  002FC2  0E80               	movlw	128
  7431  002FC4  1A17               	xorwf	___ftge@ff1+2,f,c
  7432  002FC6  0E00               	movlw	0
  7433  002FC8  1A18               	xorwf	___ftge@ff2,f,c
  7434  002FCA  0E00               	movlw	0
  7435  002FCC  1A19               	xorwf	___ftge@ff2+1,f,c
  7436  002FCE  0E80               	movlw	128
  7437  002FD0  1A1A               	xorwf	___ftge@ff2+2,f,c
  7438  002FD2  5018               	movf	___ftge@ff2,w,c
  7439  002FD4  5C15               	subwf	___ftge@ff1,w,c
  7440  002FD6  5019               	movf	___ftge@ff2+1,w,c
  7441  002FD8  5816               	subwfb	___ftge@ff1+1,w,c
  7442  002FDA  501A               	movf	___ftge@ff2+2,w,c
  7443  002FDC  5817               	subwfb	___ftge@ff1+2,w,c
  7444  002FDE  B0D8               	btfsc	status,0,c
  7445  002FE0  D002               	goto	l3002
  7446  002FE2  90D8               	bcf	status,0,c
  7447  002FE4  0012               	return	
  7448  002FE6                     l3002:
  7449  002FE6  80D8               	bsf	status,0,c
  7450  002FE8  0012               	return	
  7451  002FEA                     __end_of___ftge:
  7452                           	opt stack 0
  7453                           tblptru	equ	0xFF8
  7454                           tblptrh	equ	0xFF7
  7455                           tblptrl	equ	0xFF6
  7456                           tablat	equ	0xFF5
  7457                           prodh	equ	0xFF4
  7458                           prodl	equ	0xFF3
  7459                           indf0	equ	0xFEF
  7460                           fsr0h	equ	0xFEA
  7461                           fsr0l	equ	0xFE9
  7462                           wreg	equ	0xFE8
  7463                           postinc1	equ	0xFE6
  7464                           postdec1	equ	0xFE5
  7465                           fsr1h	equ	0xFE2
  7466                           fsr1l	equ	0xFE1
  7467                           indf2	equ	0xFDF
  7468                           postinc2	equ	0xFDE
  7469                           postdec2	equ	0xFDD
  7470                           fsr2h	equ	0xFDA
  7471                           fsr2l	equ	0xFD9
  7472                           status	equ	0xFD8
  7473                           
  7474 ;; *************** function _linspace *****************
  7475 ;; Defined at:
  7476 ;;		line 12 in file "fuzzy.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;  x               2   72[COMRAM] PTR 
  7479 ;;		 -> fuzzy_system_single@y(120), fuzzy_system_single@x(120), fuzzy_system@y(120), fuzzy_system@x(120), 
  7480 ;;  start           3   74[COMRAM] PTR 
  7481 ;;  end             3   77[COMRAM] PTR 
  7482 ;;  size            2   80[COMRAM] int 
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;  i               2   84[COMRAM] int 
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  1    wreg      void 
  7487 ;; Registers used:
  7488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7494 ;;      Params:        10       0       0       0       0       0       0       0       0
  7495 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7496 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7497 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7498 ;;Total ram usage:       14 bytes
  7499 ;; Hardware stack levels used:    1
  7500 ;; Hardware stack levels required when called:    2
  7501 ;; This function calls:
  7502 ;;		___awtoft
  7503 ;;		___ftadd
  7504 ;;		___ftdiv
  7505 ;;		___ftmul
  7506 ;;		___wmul
  7507 ;; This function is called by:
  7508 ;;		_fuzzy_system_single
  7509 ;;		_fuzzy_system
  7510 ;; This function uses a non-reentrant model
  7511 ;;
  7512                           
  7513                           	psect	text28
  7514  00287E                     __ptext28:
  7515                           	opt stack 0
  7516  00287E                     _linspace:
  7517                           	opt stack 27
  7518                           
  7519                           ;fuzzy.c: 14: int i;
  7520                           ;fuzzy.c: 15: for (i=0; i<size; i++)
  7521                           
  7522                           ;incstack = 0
  7523  00287E  0E00               	movlw	0
  7524  002880  6E56               	movwf	linspace@i+1,c
  7525  002882  0E00               	movlw	0
  7526  002884  6E55               	movwf	linspace@i,c
  7527  002886  D070               	goto	l3470
  7528  002888                     l3466:
  7529                           
  7530                           ;fuzzy.c: 16: x[i] = ( i*end + (size-1-i)*start ) / (size-1);
  7531  002888  C055  F00F         	movff	linspace@i,___wmul@multiplier
  7532  00288C  C056  F010         	movff	linspace@i+1,___wmul@multiplier+1
  7533  002890  0E00               	movlw	0
  7534  002892  6E12               	movwf	___wmul@multiplicand+1,c
  7535  002894  0E03               	movlw	3
  7536  002896  6E11               	movwf	___wmul@multiplicand,c
  7537  002898  ECD6  F01A         	call	___wmul	;wreg free
  7538  00289C  500F               	movf	?___wmul,w,c
  7539  00289E  2449               	addwf	linspace@x,w,c
  7540  0028A0  6ED9               	movwf	fsr2l,c
  7541  0028A2  5010               	movf	?___wmul+1,w,c
  7542  0028A4  204A               	addwfc	linspace@x+1,w,c
  7543  0028A6  6EDA               	movwf	fsr2h,c
  7544  0028A8  C04B  F018         	movff	linspace@start,___ftmul@f2
  7545  0028AC  C04C  F019         	movff	linspace@start+1,___ftmul@f2+1
  7546  0028B0  C04D  F01A         	movff	linspace@start+2,___ftmul@f2+2
  7547  0028B4  0E01               	movlw	1
  7548  0028B6  2455               	addwf	linspace@i,w,c
  7549  0028B8  6E53               	movwf	??_linspace& (0+255),c
  7550  0028BA  0E00               	movlw	0
  7551  0028BC  2056               	addwfc	linspace@i+1,w,c
  7552  0028BE  6E54               	movwf	(??_linspace+1)& (0+255),c
  7553  0028C0  1E53               	comf	??_linspace,f,c
  7554  0028C2  1E54               	comf	??_linspace+1,f,c
  7555  0028C4  4A53               	infsnz	??_linspace,f,c
  7556  0028C6  2A54               	incf	??_linspace+1,f,c
  7557  0028C8  5051               	movf	linspace@size,w,c
  7558  0028CA  2453               	addwf	??_linspace,w,c
  7559  0028CC  6E09               	movwf	___awtoft@c,c
  7560  0028CE  5052               	movf	linspace@size+1,w,c
  7561  0028D0  2054               	addwfc	??_linspace+1,w,c
  7562  0028D2  6E0A               	movwf	___awtoft@c+1,c
  7563  0028D4  EC32  F01A         	call	___awtoft	;wreg free
  7564  0028D8  C009  F015         	movff	?___awtoft,___ftmul@f1
  7565  0028DC  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  7566  0028E0  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  7567  0028E4  EC39  F015         	call	___ftmul	;wreg free
  7568  0028E8  C015  F031         	movff	?___ftmul,___ftadd@f2
  7569  0028EC  C016  F032         	movff	?___ftmul+1,___ftadd@f2+1
  7570  0028F0  C017  F033         	movff	?___ftmul+2,___ftadd@f2+2
  7571  0028F4  C04E  F018         	movff	linspace@end,___ftmul@f2
  7572  0028F8  C04F  F019         	movff	linspace@end+1,___ftmul@f2+1
  7573  0028FC  C050  F01A         	movff	linspace@end+2,___ftmul@f2+2
  7574  002900  C055  F009         	movff	linspace@i,___awtoft@c
  7575  002904  C056  F00A         	movff	linspace@i+1,___awtoft@c+1
  7576  002908  EC32  F01A         	call	___awtoft	;wreg free
  7577  00290C  C009  F015         	movff	?___awtoft,___ftmul@f1
  7578  002910  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  7579  002914  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  7580  002918  EC39  F015         	call	___ftmul	;wreg free
  7581  00291C  C015  F02E         	movff	?___ftmul,___ftadd@f1
  7582  002920  C016  F02F         	movff	?___ftmul+1,___ftadd@f1+1
  7583  002924  C017  F030         	movff	?___ftmul+2,___ftadd@f1+2
  7584  002928  EC5B  F010         	call	___ftadd	;wreg free
  7585  00292C  C02E  F03A         	movff	?___ftadd,___ftdiv@f1
  7586  002930  C02F  F03B         	movff	?___ftadd+1,___ftdiv@f1+1
  7587  002934  C030  F03C         	movff	?___ftadd+2,___ftdiv@f1+2
  7588  002938  0EFF               	movlw	255
  7589  00293A  2451               	addwf	linspace@size,w,c
  7590  00293C  6E09               	movwf	___awtoft@c,c
  7591  00293E  0EFF               	movlw	255
  7592  002940  2052               	addwfc	linspace@size+1,w,c
  7593  002942  6E0A               	movwf	___awtoft@c+1,c
  7594  002944  EC32  F01A         	call	___awtoft	;wreg free
  7595  002948  C009  F03D         	movff	?___awtoft,___ftdiv@f2
  7596  00294C  C00A  F03E         	movff	?___awtoft+1,___ftdiv@f2+1
  7597  002950  C00B  F03F         	movff	?___awtoft+2,___ftdiv@f2+2
  7598  002954  EC26  F016         	call	___ftdiv	;wreg free
  7599  002958  C03A  FFDE         	movff	?___ftdiv,postinc2
  7600  00295C  C03B  FFDE         	movff	?___ftdiv+1,postinc2
  7601  002960  C03C  FFDE         	movff	?___ftdiv+2,postinc2
  7602  002964  4A55               	infsnz	linspace@i,f,c
  7603  002966  2A56               	incf	linspace@i+1,f,c
  7604  002968                     l3470:
  7605  002968  5051               	movf	linspace@size,w,c
  7606  00296A  5C55               	subwf	linspace@i,w,c
  7607  00296C  5056               	movf	linspace@i+1,w,c
  7608  00296E  0A80               	xorlw	128
  7609  002970  6E53               	movwf	??_linspace& (0+255),c
  7610  002972  5052               	movf	linspace@size+1,w,c
  7611  002974  0A80               	xorlw	128
  7612  002976  5853               	subwfb	??_linspace& (0+255),w,c
  7613  002978  B0D8               	btfsc	status,0,c
  7614  00297A  0012               	return	
  7615  00297C  D785               	goto	l3466
  7616  00297E                     __end_of_linspace:
  7617                           	opt stack 0
  7618                           tblptru	equ	0xFF8
  7619                           tblptrh	equ	0xFF7
  7620                           tblptrl	equ	0xFF6
  7621                           tablat	equ	0xFF5
  7622                           prodh	equ	0xFF4
  7623                           prodl	equ	0xFF3
  7624                           indf0	equ	0xFEF
  7625                           fsr0h	equ	0xFEA
  7626                           fsr0l	equ	0xFE9
  7627                           wreg	equ	0xFE8
  7628                           postinc1	equ	0xFE6
  7629                           postdec1	equ	0xFE5
  7630                           fsr1h	equ	0xFE2
  7631                           fsr1l	equ	0xFE1
  7632                           indf2	equ	0xFDF
  7633                           postinc2	equ	0xFDE
  7634                           postdec2	equ	0xFDD
  7635                           fsr2h	equ	0xFDA
  7636                           fsr2l	equ	0xFD9
  7637                           status	equ	0xFD8
  7638                           
  7639 ;; *************** function ___awtoft *****************
  7640 ;; Defined at:
  7641 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\awtoft.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;  c               2    8[COMRAM] int 
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;  sign            1   11[COMRAM] unsigned char 
  7646 ;; Return value:  Size  Location     Type
  7647 ;;                  3    8[COMRAM] float 
  7648 ;; Registers used:
  7649 ;;		wreg, status,2, status,0, cstack
  7650 ;; Tracked objects:
  7651 ;;		On entry : 0/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7655 ;;      Params:         3       0       0       0       0       0       0       0       0
  7656 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7658 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7659 ;;Total ram usage:        4 bytes
  7660 ;; Hardware stack levels used:    1
  7661 ;; Hardware stack levels required when called:    1
  7662 ;; This function calls:
  7663 ;;		___ftpack
  7664 ;; This function is called by:
  7665 ;;		_temp_sense
  7666 ;;		_linspace
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           	psect	text29
  7671  003464                     __ptext29:
  7672                           	opt stack 0
  7673  003464                     ___awtoft:
  7674                           	opt stack 28
  7675                           
  7676                           ;incstack = 0
  7677  003464  0E00               	movlw	0
  7678  003466  6E0C               	movwf	___awtoft@sign,c
  7679  003468  AE0A               	btfss	___awtoft@c+1,7,c
  7680  00346A  D006               	goto	l3396
  7681  00346C  6C09               	negf	___awtoft@c,c
  7682  00346E  1E0A               	comf	___awtoft@c+1,f,c
  7683  003470  B0D8               	btfsc	status,0,c
  7684  003472  2A0A               	incf	___awtoft@c+1,f,c
  7685  003474  0E01               	movlw	1
  7686  003476  6E0C               	movwf	___awtoft@sign,c
  7687  003478                     l3396:
  7688  003478  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7689  00347C  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7690  003480  6A03               	clrf	___ftpack@arg+2,c
  7691  003482  0E8E               	movlw	142
  7692  003484  6E04               	movwf	___ftpack@exp,c
  7693  003486  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  7694  00348A  EC0A  F017         	call	___ftpack	;wreg free
  7695  00348E  C001  F009         	movff	?___ftpack,?___awtoft
  7696  003492  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  7697  003496  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  7698  00349A  0012               	return	
  7699  00349C                     __end_of___awtoft:
  7700                           	opt stack 0
  7701                           tblptru	equ	0xFF8
  7702                           tblptrh	equ	0xFF7
  7703                           tblptrl	equ	0xFF6
  7704                           tablat	equ	0xFF5
  7705                           prodh	equ	0xFF4
  7706                           prodl	equ	0xFF3
  7707                           indf0	equ	0xFEF
  7708                           fsr0h	equ	0xFEA
  7709                           fsr0l	equ	0xFE9
  7710                           wreg	equ	0xFE8
  7711                           postinc1	equ	0xFE6
  7712                           postdec1	equ	0xFE5
  7713                           fsr1h	equ	0xFE2
  7714                           fsr1l	equ	0xFE1
  7715                           indf2	equ	0xFDF
  7716                           postinc2	equ	0xFDE
  7717                           postdec2	equ	0xFDD
  7718                           fsr2h	equ	0xFDA
  7719                           fsr2l	equ	0xFD9
  7720                           status	equ	0xFD8
  7721                           
  7722 ;; *************** function _defuzzy *****************
  7723 ;; Defined at:
  7724 ;;		line 147 in file "fuzzy.c"
  7725 ;; Parameters:    Size  Location     Type
  7726 ;;  x               2   72[COMRAM] PTR 
  7727 ;;		 -> fuzzy_system_single@y(120), fuzzy_system@y(120), 
  7728 ;;  mf              2   74[COMRAM] PTR 
  7729 ;;		 -> fuzzy_system_single@overall_out_mf(120), fuzzy_system@overall_out_mf(120), 
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;  sum2            3   82[COMRAM] PTR 
  7732 ;;  sum1            3   79[COMRAM] PTR 
  7733 ;;  out             3   76[COMRAM] PTR 
  7734 ;;  i               2   85[COMRAM] int 
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  3   72[COMRAM] int 
  7737 ;; Registers used:
  7738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7744 ;;      Params:         4       0       0       0       0       0       0       0       0
  7745 ;;      Locals:        11       0       0       0       0       0       0       0       0
  7746 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7747 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7748 ;;Total ram usage:       15 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    2
  7751 ;; This function calls:
  7752 ;;		___ftadd
  7753 ;;		___ftdiv
  7754 ;;		___ftmul
  7755 ;;		___wmul
  7756 ;; This function is called by:
  7757 ;;		_fuzzy_system_single
  7758 ;;		_fuzzy_system
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           	psect	text30
  7763  002262                     __ptext30:
  7764                           	opt stack 0
  7765  002262                     _defuzzy:
  7766                           	opt stack 27
  7767                           
  7768                           ;fuzzy.c: 149: double sum1=0, sum2=0,out=0;
  7769                           
  7770                           ;incstack = 0
  7771  002262  0E00               	movlw	0
  7772  002264  6E50               	movwf	defuzzy@sum1,c
  7773  002266  0E00               	movlw	0
  7774  002268  6E51               	movwf	defuzzy@sum1+1,c
  7775  00226A  0E00               	movlw	0
  7776  00226C  6E52               	movwf	defuzzy@sum1+2,c
  7777  00226E  0E00               	movlw	0
  7778  002270  6E53               	movwf	defuzzy@sum2,c
  7779  002272  0E00               	movlw	0
  7780  002274  6E54               	movwf	defuzzy@sum2+1,c
  7781  002276  0E00               	movlw	0
  7782  002278  6E55               	movwf	defuzzy@sum2+2,c
  7783  00227A  0E00               	movlw	0
  7784  00227C  6E4D               	movwf	defuzzy@out,c
  7785  00227E  0E00               	movlw	0
  7786  002280  6E4E               	movwf	defuzzy@out+1,c
  7787  002282  0E00               	movlw	0
  7788  002284  6E4F               	movwf	defuzzy@out+2,c
  7789                           
  7790                           ;fuzzy.c: 150: int i;
  7791                           ;fuzzy.c: 151: for(i=0;i<40; i++)
  7792  002286  0E00               	movlw	0
  7793  002288  6E57               	movwf	defuzzy@i+1,c
  7794  00228A  0E00               	movlw	0
  7795  00228C  6E56               	movwf	defuzzy@i,c
  7796  00228E                     l3540:
  7797  00228E  BE57               	btfsc	defuzzy@i+1,7,c
  7798  002290  D006               	goto	l3544
  7799  002292  5057               	movf	defuzzy@i+1,w,c
  7800  002294  E149               	bnz	l3550
  7801  002296  0E28               	movlw	40
  7802  002298  5C56               	subwf	defuzzy@i,w,c
  7803  00229A  B0D8               	btfsc	status,0,c
  7804  00229C  D045               	goto	l3550
  7805  00229E                     l3544:
  7806                           
  7807                           ;fuzzy.c: 152: sum1+=x[i]*mf[i];
  7808  00229E  C050  F02E         	movff	defuzzy@sum1,___ftadd@f1
  7809  0022A2  C051  F02F         	movff	defuzzy@sum1+1,___ftadd@f1+1
  7810  0022A6  C052  F030         	movff	defuzzy@sum1+2,___ftadd@f1+2
  7811  0022AA  C056  F00F         	movff	defuzzy@i,___wmul@multiplier
  7812  0022AE  C057  F010         	movff	defuzzy@i+1,___wmul@multiplier+1
  7813  0022B2  0E00               	movlw	0
  7814  0022B4  6E12               	movwf	___wmul@multiplicand+1,c
  7815  0022B6  0E03               	movlw	3
  7816  0022B8  6E11               	movwf	___wmul@multiplicand,c
  7817  0022BA  ECD6  F01A         	call	___wmul	;wreg free
  7818  0022BE  500F               	movf	?___wmul,w,c
  7819  0022C0  244B               	addwf	defuzzy@mf,w,c
  7820  0022C2  6ED9               	movwf	fsr2l,c
  7821  0022C4  5010               	movf	?___wmul+1,w,c
  7822  0022C6  204C               	addwfc	defuzzy@mf+1,w,c
  7823  0022C8  6EDA               	movwf	fsr2h,c
  7824  0022CA  CFDE F018          	movff	postinc2,___ftmul@f2
  7825  0022CE  CFDE F019          	movff	postinc2,___ftmul@f2+1
  7826  0022D2  CFDD F01A          	movff	postdec2,___ftmul@f2+2
  7827  0022D6  C056  F00F         	movff	defuzzy@i,___wmul@multiplier
  7828  0022DA  C057  F010         	movff	defuzzy@i+1,___wmul@multiplier+1
  7829  0022DE  0E00               	movlw	0
  7830  0022E0  6E12               	movwf	___wmul@multiplicand+1,c
  7831  0022E2  0E03               	movlw	3
  7832  0022E4  6E11               	movwf	___wmul@multiplicand,c
  7833  0022E6  ECD6  F01A         	call	___wmul	;wreg free
  7834  0022EA  500F               	movf	?___wmul,w,c
  7835  0022EC  2449               	addwf	defuzzy@x,w,c
  7836  0022EE  6ED9               	movwf	fsr2l,c
  7837  0022F0  5010               	movf	?___wmul+1,w,c
  7838  0022F2  204A               	addwfc	defuzzy@x+1,w,c
  7839  0022F4  6EDA               	movwf	fsr2h,c
  7840  0022F6  CFDE F015          	movff	postinc2,___ftmul@f1
  7841  0022FA  CFDE F016          	movff	postinc2,___ftmul@f1+1
  7842  0022FE  CFDD F017          	movff	postdec2,___ftmul@f1+2
  7843  002302  EC39  F015         	call	___ftmul	;wreg free
  7844  002306  C015  F031         	movff	?___ftmul,___ftadd@f2
  7845  00230A  C016  F032         	movff	?___ftmul+1,___ftadd@f2+1
  7846  00230E  C017  F033         	movff	?___ftmul+2,___ftadd@f2+2
  7847  002312  EC5B  F010         	call	___ftadd	;wreg free
  7848  002316  C02E  F050         	movff	?___ftadd,defuzzy@sum1
  7849  00231A  C02F  F051         	movff	?___ftadd+1,defuzzy@sum1+1
  7850  00231E  C030  F052         	movff	?___ftadd+2,defuzzy@sum1+2
  7851  002322  4A56               	infsnz	defuzzy@i,f,c
  7852  002324  2A57               	incf	defuzzy@i+1,f,c
  7853  002326  D7B3               	goto	l3540
  7854  002328                     l3550:
  7855                           
  7856                           ;fuzzy.c: 153: for(i=0;i<40; i++)
  7857  002328  0E00               	movlw	0
  7858  00232A  6E57               	movwf	defuzzy@i+1,c
  7859  00232C  0E00               	movlw	0
  7860  00232E  6E56               	movwf	defuzzy@i,c
  7861  002330                     l3552:
  7862  002330  BE57               	btfsc	defuzzy@i+1,7,c
  7863  002332  D006               	goto	l3556
  7864  002334  5057               	movf	defuzzy@i+1,w,c
  7865  002336  E12B               	bnz	l3562
  7866  002338  0E28               	movlw	40
  7867  00233A  5C56               	subwf	defuzzy@i,w,c
  7868  00233C  B0D8               	btfsc	status,0,c
  7869  00233E  D027               	goto	l3562
  7870  002340                     l3556:
  7871                           
  7872                           ;fuzzy.c: 154: sum2+=mf[i];
  7873  002340  C053  F02E         	movff	defuzzy@sum2,___ftadd@f1
  7874  002344  C054  F02F         	movff	defuzzy@sum2+1,___ftadd@f1+1
  7875  002348  C055  F030         	movff	defuzzy@sum2+2,___ftadd@f1+2
  7876  00234C  C056  F00F         	movff	defuzzy@i,___wmul@multiplier
  7877  002350  C057  F010         	movff	defuzzy@i+1,___wmul@multiplier+1
  7878  002354  0E00               	movlw	0
  7879  002356  6E12               	movwf	___wmul@multiplicand+1,c
  7880  002358  0E03               	movlw	3
  7881  00235A  6E11               	movwf	___wmul@multiplicand,c
  7882  00235C  ECD6  F01A         	call	___wmul	;wreg free
  7883  002360  500F               	movf	?___wmul,w,c
  7884  002362  244B               	addwf	defuzzy@mf,w,c
  7885  002364  6ED9               	movwf	fsr2l,c
  7886  002366  5010               	movf	?___wmul+1,w,c
  7887  002368  204C               	addwfc	defuzzy@mf+1,w,c
  7888  00236A  6EDA               	movwf	fsr2h,c
  7889  00236C  CFDE F031          	movff	postinc2,___ftadd@f2
  7890  002370  CFDE F032          	movff	postinc2,___ftadd@f2+1
  7891  002374  CFDD F033          	movff	postdec2,___ftadd@f2+2
  7892  002378  EC5B  F010         	call	___ftadd	;wreg free
  7893  00237C  C02E  F053         	movff	?___ftadd,defuzzy@sum2
  7894  002380  C02F  F054         	movff	?___ftadd+1,defuzzy@sum2+1
  7895  002384  C030  F055         	movff	?___ftadd+2,defuzzy@sum2+2
  7896  002388  4A56               	infsnz	defuzzy@i,f,c
  7897  00238A  2A57               	incf	defuzzy@i+1,f,c
  7898  00238C  D7D1               	goto	l3552
  7899  00238E                     l3562:
  7900                           
  7901                           ;fuzzy.c: 155: out=sum1/sum2;
  7902  00238E  C050  F03A         	movff	defuzzy@sum1,___ftdiv@f1
  7903  002392  C051  F03B         	movff	defuzzy@sum1+1,___ftdiv@f1+1
  7904  002396  C052  F03C         	movff	defuzzy@sum1+2,___ftdiv@f1+2
  7905  00239A  C053  F03D         	movff	defuzzy@sum2,___ftdiv@f2
  7906  00239E  C054  F03E         	movff	defuzzy@sum2+1,___ftdiv@f2+1
  7907  0023A2  C055  F03F         	movff	defuzzy@sum2+2,___ftdiv@f2+2
  7908  0023A6  EC26  F016         	call	___ftdiv	;wreg free
  7909  0023AA  C03A  F04D         	movff	?___ftdiv,defuzzy@out
  7910  0023AE  C03B  F04E         	movff	?___ftdiv+1,defuzzy@out+1
  7911  0023B2  C03C  F04F         	movff	?___ftdiv+2,defuzzy@out+2
  7912                           
  7913                           ;fuzzy.c: 156: return out;
  7914  0023B6  C04D  F049         	movff	defuzzy@out,?_defuzzy
  7915  0023BA  C04E  F04A         	movff	defuzzy@out+1,?_defuzzy+1
  7916  0023BE  C04F  F04B         	movff	defuzzy@out+2,?_defuzzy+2
  7917  0023C2  0012               	return	
  7918  0023C4                     __end_of_defuzzy:
  7919                           	opt stack 0
  7920                           tblptru	equ	0xFF8
  7921                           tblptrh	equ	0xFF7
  7922                           tblptrl	equ	0xFF6
  7923                           tablat	equ	0xFF5
  7924                           prodh	equ	0xFF4
  7925                           prodl	equ	0xFF3
  7926                           indf0	equ	0xFEF
  7927                           fsr0h	equ	0xFEA
  7928                           fsr0l	equ	0xFE9
  7929                           wreg	equ	0xFE8
  7930                           postinc1	equ	0xFE6
  7931                           postdec1	equ	0xFE5
  7932                           fsr1h	equ	0xFE2
  7933                           fsr1l	equ	0xFE1
  7934                           indf2	equ	0xFDF
  7935                           postinc2	equ	0xFDE
  7936                           postdec2	equ	0xFDD
  7937                           fsr2h	equ	0xFDA
  7938                           fsr2l	equ	0xFD9
  7939                           status	equ	0xFD8
  7940                           
  7941 ;; *************** function ___wmul *****************
  7942 ;; Defined at:
  7943 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\Umul16.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;  multiplier      2   14[COMRAM] unsigned int 
  7946 ;;  multiplicand    2   16[COMRAM] unsigned int 
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;  product         2   18[COMRAM] unsigned int 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  2   14[COMRAM] unsigned int 
  7951 ;; Registers used:
  7952 ;;		wreg, status,2, status,0, prodl, prodh
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7958 ;;      Params:         4       0       0       0       0       0       0       0       0
  7959 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7960 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7961 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7962 ;;Total ram usage:        6 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; This function calls:
  7965 ;;		Nothing
  7966 ;; This function is called by:
  7967 ;;		_linspace
  7968 ;;		_trap_mf
  7969 ;;		_qualified
  7970 ;;		_out_mf
  7971 ;;		_defuzzy
  7972 ;;		_fround
  7973 ;;		_scale
  7974 ;;		_sprintf
  7975 ;;		_minimo
  7976 ;;		_maximo
  7977 ;;		_tri_mf
  7978 ;;		_fuzzy_system
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	text31
  7983  0035AC                     __ptext31:
  7984                           	opt stack 0
  7985  0035AC                     ___wmul:
  7986                           	opt stack 26
  7987                           
  7988                           ;incstack = 0
  7989  0035AC  500F               	movf	___wmul@multiplier,w,c
  7990  0035AE  0211               	mulwf	___wmul@multiplicand,c
  7991  0035B0  CFF3 F013          	movff	prodl,___wmul@product
  7992  0035B4  CFF4 F014          	movff	prodh,___wmul@product+1
  7993  0035B8  500F               	movf	___wmul@multiplier,w,c
  7994  0035BA  0212               	mulwf	___wmul@multiplicand+1,c
  7995  0035BC  50F3               	movf	prodl,w,c
  7996  0035BE  2614               	addwf	___wmul@product+1,f,c
  7997  0035C0  5010               	movf	___wmul@multiplier+1,w,c
  7998  0035C2  0211               	mulwf	___wmul@multiplicand,c
  7999  0035C4  50F3               	movf	prodl,w,c
  8000  0035C6  2614               	addwf	___wmul@product+1,f,c
  8001  0035C8  C013  F00F         	movff	___wmul@product,?___wmul
  8002  0035CC  C014  F010         	movff	___wmul@product+1,?___wmul+1
  8003  0035D0  0012               	return	
  8004  0035D2                     __end_of___wmul:
  8005                           	opt stack 0
  8006                           tblptru	equ	0xFF8
  8007                           tblptrh	equ	0xFF7
  8008                           tblptrl	equ	0xFF6
  8009                           tablat	equ	0xFF5
  8010                           prodh	equ	0xFF4
  8011                           prodl	equ	0xFF3
  8012                           indf0	equ	0xFEF
  8013                           fsr0h	equ	0xFEA
  8014                           fsr0l	equ	0xFE9
  8015                           wreg	equ	0xFE8
  8016                           postinc1	equ	0xFE6
  8017                           postdec1	equ	0xFE5
  8018                           fsr1h	equ	0xFE2
  8019                           fsr1l	equ	0xFE1
  8020                           indf2	equ	0xFDF
  8021                           postinc2	equ	0xFDE
  8022                           postdec2	equ	0xFDD
  8023                           fsr2h	equ	0xFDA
  8024                           fsr2l	equ	0xFD9
  8025                           status	equ	0xFD8
  8026                           
  8027 ;; *************** function ___ftdiv *****************
  8028 ;; Defined at:
  8029 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;  f1              3   57[COMRAM] float 
  8032 ;;  f2              3   60[COMRAM] float 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  f3              3   67[COMRAM] float 
  8035 ;;  sign            1   71[COMRAM] unsigned char 
  8036 ;;  exp             1   70[COMRAM] unsigned char 
  8037 ;;  cntr            1   66[COMRAM] unsigned char 
  8038 ;; Return value:  Size  Location     Type
  8039 ;;                  3   57[COMRAM] float 
  8040 ;; Registers used:
  8041 ;;		wreg, status,2, status,0, cstack
  8042 ;; Tracked objects:
  8043 ;;		On entry : 0/0
  8044 ;;		On exit  : 0/0
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8047 ;;      Params:         6       0       0       0       0       0       0       0       0
  8048 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8049 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8050 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8051 ;;Total ram usage:       15 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; Hardware stack levels required when called:    1
  8054 ;; This function calls:
  8055 ;;		___ftpack
  8056 ;; This function is called by:
  8057 ;;		_temp_sense
  8058 ;;		_linspace
  8059 ;;		_trapezoidal
  8060 ;;		_defuzzy
  8061 ;;		_triangular
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           	psect	text32
  8066  002C4C                     __ptext32:
  8067                           	opt stack 0
  8068  002C4C                     ___ftdiv:
  8069                           	opt stack 28
  8070                           
  8071                           ;incstack = 0
  8072  002C4C  C03C  F040         	movff	___ftdiv@f1+2,??___ftdiv
  8073  002C50  6A41               	clrf	(??___ftdiv+1)& (0+255),c
  8074  002C52  6A42               	clrf	(??___ftdiv+2)& (0+255),c
  8075  002C54  343B               	rlcf	___ftdiv@f1+1,w,c
  8076  002C56  3640               	rlcf	??___ftdiv& (0+255),f,c
  8077  002C58  E301               	bnc	u2711
  8078  002C5A  8041               	bsf	(??___ftdiv+1)& (0+255),0,c
  8079  002C5C                     u2711:
  8080  002C5C  5040               	movf	??___ftdiv,w,c
  8081  002C5E  6E47               	movwf	___ftdiv@exp,c
  8082  002C60  5047               	movf	___ftdiv@exp,w,c
  8083  002C62  A4D8               	btfss	status,2,c
  8084  002C64  D007               	goto	l2940
  8085  002C66  0E00               	movlw	0
  8086  002C68  6E3A               	movwf	?___ftdiv,c
  8087  002C6A  0E00               	movlw	0
  8088  002C6C  6E3B               	movwf	?___ftdiv+1,c
  8089  002C6E  0E00               	movlw	0
  8090  002C70  6E3C               	movwf	?___ftdiv+2,c
  8091  002C72  0012               	return	
  8092  002C74                     l2940:
  8093  002C74  C03F  F040         	movff	___ftdiv@f2+2,??___ftdiv
  8094  002C78  6A41               	clrf	(??___ftdiv+1)& (0+255),c
  8095  002C7A  6A42               	clrf	(??___ftdiv+2)& (0+255),c
  8096  002C7C  343E               	rlcf	___ftdiv@f2+1,w,c
  8097  002C7E  3640               	rlcf	??___ftdiv& (0+255),f,c
  8098  002C80  E301               	bnc	u2731
  8099  002C82  8041               	bsf	(??___ftdiv+1)& (0+255),0,c
  8100  002C84                     u2731:
  8101  002C84  5040               	movf	??___ftdiv,w,c
  8102  002C86  6E48               	movwf	___ftdiv@sign,c
  8103  002C88  5048               	movf	___ftdiv@sign,w,c
  8104  002C8A  A4D8               	btfss	status,2,c
  8105  002C8C  D007               	goto	l2946
  8106  002C8E  0E00               	movlw	0
  8107  002C90  6E3A               	movwf	?___ftdiv,c
  8108  002C92  0E00               	movlw	0
  8109  002C94  6E3B               	movwf	?___ftdiv+1,c
  8110  002C96  0E00               	movlw	0
  8111  002C98  6E3C               	movwf	?___ftdiv+2,c
  8112  002C9A  0012               	return	
  8113  002C9C                     l2946:
  8114  002C9C  0E00               	movlw	0
  8115  002C9E  6E44               	movwf	___ftdiv@f3,c
  8116  002CA0  0E00               	movlw	0
  8117  002CA2  6E45               	movwf	___ftdiv@f3+1,c
  8118  002CA4  0E00               	movlw	0
  8119  002CA6  6E46               	movwf	___ftdiv@f3+2,c
  8120  002CA8  5048               	movf	___ftdiv@sign,w,c
  8121  002CAA  0F89               	addlw	137
  8122  002CAC  5E47               	subwf	___ftdiv@exp,f,c
  8123  002CAE  C03C  F048         	movff	___ftdiv@f1+2,___ftdiv@sign
  8124  002CB2  503F               	movf	___ftdiv@f2+2,w,c
  8125  002CB4  1A48               	xorwf	___ftdiv@sign,f,c
  8126  002CB6  0E80               	movlw	128
  8127  002CB8  1648               	andwf	___ftdiv@sign,f,c
  8128  002CBA  8E3B               	bsf	___ftdiv@f1+1,7,c
  8129  002CBC  0EFF               	movlw	255
  8130  002CBE  163A               	andwf	___ftdiv@f1,f,c
  8131  002CC0  0EFF               	movlw	255
  8132  002CC2  163B               	andwf	___ftdiv@f1+1,f,c
  8133  002CC4  0E00               	movlw	0
  8134  002CC6  163C               	andwf	___ftdiv@f1+2,f,c
  8135  002CC8  8E3E               	bsf	___ftdiv@f2+1,7,c
  8136  002CCA  0EFF               	movlw	255
  8137  002CCC  163D               	andwf	___ftdiv@f2,f,c
  8138  002CCE  0EFF               	movlw	255
  8139  002CD0  163E               	andwf	___ftdiv@f2+1,f,c
  8140  002CD2  0E00               	movlw	0
  8141  002CD4  163F               	andwf	___ftdiv@f2+2,f,c
  8142  002CD6  0E18               	movlw	24
  8143  002CD8  6E43               	movwf	___ftdiv@cntr,c
  8144  002CDA                     l2966:
  8145  002CDA  90D8               	bcf	status,0,c
  8146  002CDC  3644               	rlcf	___ftdiv@f3,f,c
  8147  002CDE  3645               	rlcf	___ftdiv@f3+1,f,c
  8148  002CE0  3646               	rlcf	___ftdiv@f3+2,f,c
  8149  002CE2  503D               	movf	___ftdiv@f2,w,c
  8150  002CE4  5C3A               	subwf	___ftdiv@f1,w,c
  8151  002CE6  503E               	movf	___ftdiv@f2+1,w,c
  8152  002CE8  583B               	subwfb	___ftdiv@f1+1,w,c
  8153  002CEA  503F               	movf	___ftdiv@f2+2,w,c
  8154  002CEC  583C               	subwfb	___ftdiv@f1+2,w,c
  8155  002CEE  A0D8               	btfss	status,0,c
  8156  002CF0  D007               	goto	l699
  8157  002CF2  503D               	movf	___ftdiv@f2,w,c
  8158  002CF4  5E3A               	subwf	___ftdiv@f1,f,c
  8159  002CF6  503E               	movf	___ftdiv@f2+1,w,c
  8160  002CF8  5A3B               	subwfb	___ftdiv@f1+1,f,c
  8161  002CFA  503F               	movf	___ftdiv@f2+2,w,c
  8162  002CFC  5A3C               	subwfb	___ftdiv@f1+2,f,c
  8163  002CFE  8044               	bsf	___ftdiv@f3,0,c
  8164  002D00                     l699:
  8165  002D00  90D8               	bcf	status,0,c
  8166  002D02  363A               	rlcf	___ftdiv@f1,f,c
  8167  002D04  363B               	rlcf	___ftdiv@f1+1,f,c
  8168  002D06  363C               	rlcf	___ftdiv@f1+2,f,c
  8169  002D08  2E43               	decfsz	___ftdiv@cntr,f,c
  8170  002D0A  D7E7               	goto	l2966
  8171  002D0C  C044  F001         	movff	___ftdiv@f3,___ftpack@arg
  8172  002D10  C045  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8173  002D14  C046  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8174  002D18  C047  F004         	movff	___ftdiv@exp,___ftpack@exp
  8175  002D1C  C048  F005         	movff	___ftdiv@sign,___ftpack@sign
  8176  002D20  EC0A  F017         	call	___ftpack	;wreg free
  8177  002D24  C001  F03A         	movff	?___ftpack,?___ftdiv
  8178  002D28  C002  F03B         	movff	?___ftpack+1,?___ftdiv+1
  8179  002D2C  C003  F03C         	movff	?___ftpack+2,?___ftdiv+2
  8180  002D30  0012               	return	
  8181  002D32                     __end_of___ftdiv:
  8182                           	opt stack 0
  8183                           tblptru	equ	0xFF8
  8184                           tblptrh	equ	0xFF7
  8185                           tblptrl	equ	0xFF6
  8186                           tablat	equ	0xFF5
  8187                           prodh	equ	0xFF4
  8188                           prodl	equ	0xFF3
  8189                           indf0	equ	0xFEF
  8190                           fsr0h	equ	0xFEA
  8191                           fsr0l	equ	0xFE9
  8192                           wreg	equ	0xFE8
  8193                           postinc1	equ	0xFE6
  8194                           postdec1	equ	0xFE5
  8195                           fsr1h	equ	0xFE2
  8196                           fsr1l	equ	0xFE1
  8197                           indf2	equ	0xFDF
  8198                           postinc2	equ	0xFDE
  8199                           postdec2	equ	0xFDD
  8200                           fsr2h	equ	0xFDA
  8201                           fsr2l	equ	0xFD9
  8202                           status	equ	0xFD8
  8203                           
  8204 ;; *************** function ___ftadd *****************
  8205 ;; Defined at:
  8206 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftadd.c"
  8207 ;; Parameters:    Size  Location     Type
  8208 ;;  f1              3   45[COMRAM] float 
  8209 ;;  f2              3   48[COMRAM] float 
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;  exp1            1   56[COMRAM] unsigned char 
  8212 ;;  exp2            1   55[COMRAM] unsigned char 
  8213 ;;  sign            1   54[COMRAM] unsigned char 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;                  3   45[COMRAM] float 
  8216 ;; Registers used:
  8217 ;;		wreg, status,2, status,0, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8223 ;;      Params:         6       0       0       0       0       0       0       0       0
  8224 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8225 ;;      Temps:          3       0       0       0       0       0       0       0       0
  8226 ;;      Totals:        12       0       0       0       0       0       0       0       0
  8227 ;;Total ram usage:       12 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    1
  8230 ;; This function calls:
  8231 ;;		___ftpack
  8232 ;; This function is called by:
  8233 ;;		_linspace
  8234 ;;		_trapezoidal
  8235 ;;		_defuzzy
  8236 ;;		_sprintf
  8237 ;;		___ftsub
  8238 ;;		_triangular
  8239 ;; This function uses a non-reentrant model
  8240 ;;
  8241                           
  8242                           	psect	text33
  8243  0020B6                     __ptext33:
  8244                           	opt stack 0
  8245  0020B6                     ___ftadd:
  8246                           	opt stack 25
  8247                           
  8248                           ;incstack = 0
  8249  0020B6  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  8250  0020BA  6A35               	clrf	(??___ftadd+1)& (0+255),c
  8251  0020BC  6A36               	clrf	(??___ftadd+2)& (0+255),c
  8252  0020BE  342F               	rlcf	___ftadd@f1+1,w,c
  8253  0020C0  3634               	rlcf	??___ftadd& (0+255),f,c
  8254  0020C2  E301               	bnc	u2071
  8255  0020C4  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  8256  0020C6                     u2071:
  8257  0020C6  5034               	movf	??___ftadd,w,c
  8258  0020C8  6E39               	movwf	___ftadd@exp1,c
  8259  0020CA  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  8260  0020CE  6A35               	clrf	(??___ftadd+1)& (0+255),c
  8261  0020D0  6A36               	clrf	(??___ftadd+2)& (0+255),c
  8262  0020D2  3432               	rlcf	___ftadd@f2+1,w,c
  8263  0020D4  3634               	rlcf	??___ftadd& (0+255),f,c
  8264  0020D6  E301               	bnc	u2081
  8265  0020D8  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  8266  0020DA                     u2081:
  8267  0020DA  5034               	movf	??___ftadd,w,c
  8268  0020DC  6E38               	movwf	___ftadd@exp2,c
  8269  0020DE  5039               	movf	___ftadd@exp1,w,c
  8270  0020E0  B4D8               	btfsc	status,2,c
  8271  0020E2  D00B               	goto	l664
  8272  0020E4  5038               	movf	___ftadd@exp2,w,c
  8273  0020E6  5C39               	subwf	___ftadd@exp1,w,c
  8274  0020E8  B0D8               	btfsc	status,0,c
  8275  0020EA  D00E               	goto	l2536
  8276  0020EC  5039               	movf	___ftadd@exp1,w,c
  8277  0020EE  0800               	sublw	0
  8278  0020F0  2438               	addwf	___ftadd@exp2,w,c
  8279  0020F2  6E34               	movwf	??___ftadd& (0+255),c
  8280  0020F4  0E18               	movlw	24
  8281  0020F6  6434               	cpfsgt	??___ftadd,c
  8282  0020F8  D007               	goto	l2536
  8283  0020FA                     l664:
  8284  0020FA  C031  F02E         	movff	___ftadd@f2,?___ftadd
  8285  0020FE  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  8286  002102  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  8287  002106  0012               	return	
  8288  002108                     l2536:
  8289  002108  5038               	movf	___ftadd@exp2,w,c
  8290  00210A  B4D8               	btfsc	status,2,c
  8291  00210C  D00B               	goto	l668
  8292  00210E  5039               	movf	___ftadd@exp1,w,c
  8293  002110  5C38               	subwf	___ftadd@exp2,w,c
  8294  002112  B0D8               	btfsc	status,0,c
  8295  002114  D00E               	goto	l2542
  8296  002116  5038               	movf	___ftadd@exp2,w,c
  8297  002118  0800               	sublw	0
  8298  00211A  2439               	addwf	___ftadd@exp1,w,c
  8299  00211C  6E34               	movwf	??___ftadd& (0+255),c
  8300  00211E  0E18               	movlw	24
  8301  002120  6434               	cpfsgt	??___ftadd,c
  8302  002122  D007               	goto	l2542
  8303  002124                     l668:
  8304  002124  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  8305  002128  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  8306  00212C  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  8307  002130  0012               	return	
  8308  002132                     l2542:
  8309  002132  0E06               	movlw	6
  8310  002134  6E37               	movwf	___ftadd@sign,c
  8311  002136  BE30               	btfsc	___ftadd@f1+2,7,c
  8312  002138  8E37               	bsf	___ftadd@sign,7,c
  8313  00213A  BE33               	btfsc	___ftadd@f2+2,7,c
  8314  00213C  8C37               	bsf	___ftadd@sign,6,c
  8315  00213E  8E2F               	bsf	___ftadd@f1+1,7,c
  8316  002140  0EFF               	movlw	255
  8317  002142  162E               	andwf	___ftadd@f1,f,c
  8318  002144  0EFF               	movlw	255
  8319  002146  162F               	andwf	___ftadd@f1+1,f,c
  8320  002148  0E00               	movlw	0
  8321  00214A  1630               	andwf	___ftadd@f1+2,f,c
  8322  00214C  8E32               	bsf	___ftadd@f2+1,7,c
  8323  00214E  0EFF               	movlw	255
  8324  002150  1631               	andwf	___ftadd@f2,f,c
  8325  002152  0EFF               	movlw	255
  8326  002154  1632               	andwf	___ftadd@f2+1,f,c
  8327  002156  0E00               	movlw	0
  8328  002158  1633               	andwf	___ftadd@f2+2,f,c
  8329  00215A  5038               	movf	___ftadd@exp2,w,c
  8330  00215C  5C39               	subwf	___ftadd@exp1,w,c
  8331  00215E  B0D8               	btfsc	status,0,c
  8332  002160  D01B               	goto	l2568
  8333  002162                     l2558:
  8334  002162  90D8               	bcf	status,0,c
  8335  002164  3631               	rlcf	___ftadd@f2,f,c
  8336  002166  3632               	rlcf	___ftadd@f2+1,f,c
  8337  002168  3633               	rlcf	___ftadd@f2+2,f,c
  8338  00216A  0638               	decf	___ftadd@exp2,f,c
  8339  00216C  5039               	movf	___ftadd@exp1,w,c
  8340  00216E  1838               	xorwf	___ftadd@exp2,w,c
  8341  002170  B4D8               	btfsc	status,2,c
  8342  002172  D00D               	goto	l2566
  8343  002174  0637               	decf	___ftadd@sign,f,c
  8344  002176  C037  F034         	movff	___ftadd@sign,??___ftadd
  8345  00217A  0E07               	movlw	7
  8346  00217C  1634               	andwf	??___ftadd,f,c
  8347  00217E  B4D8               	btfsc	status,2,c
  8348  002180  D006               	goto	l2566
  8349  002182  D7EF               	goto	l2558
  8350  002184                     l2564:
  8351  002184  90D8               	bcf	status,0,c
  8352  002186  3230               	rrcf	___ftadd@f1+2,f,c
  8353  002188  322F               	rrcf	___ftadd@f1+1,f,c
  8354  00218A  322E               	rrcf	___ftadd@f1,f,c
  8355  00218C  2A39               	incf	___ftadd@exp1,f,c
  8356  00218E                     l2566:
  8357  00218E  5038               	movf	___ftadd@exp2,w,c
  8358  002190  1839               	xorwf	___ftadd@exp1,w,c
  8359  002192  B4D8               	btfsc	status,2,c
  8360  002194  D01F               	goto	l679
  8361  002196  D7F6               	goto	l2564
  8362  002198                     l2568:
  8363  002198  5039               	movf	___ftadd@exp1,w,c
  8364  00219A  5C38               	subwf	___ftadd@exp2,w,c
  8365  00219C  B0D8               	btfsc	status,0,c
  8366  00219E  D01A               	goto	l679
  8367  0021A0                     l2570:
  8368  0021A0  90D8               	bcf	status,0,c
  8369  0021A2  362E               	rlcf	___ftadd@f1,f,c
  8370  0021A4  362F               	rlcf	___ftadd@f1+1,f,c
  8371  0021A6  3630               	rlcf	___ftadd@f1+2,f,c
  8372  0021A8  0639               	decf	___ftadd@exp1,f,c
  8373  0021AA  5039               	movf	___ftadd@exp1,w,c
  8374  0021AC  1838               	xorwf	___ftadd@exp2,w,c
  8375  0021AE  B4D8               	btfsc	status,2,c
  8376  0021B0  D00D               	goto	l2578
  8377  0021B2  0637               	decf	___ftadd@sign,f,c
  8378  0021B4  C037  F034         	movff	___ftadd@sign,??___ftadd
  8379  0021B8  0E07               	movlw	7
  8380  0021BA  1634               	andwf	??___ftadd,f,c
  8381  0021BC  B4D8               	btfsc	status,2,c
  8382  0021BE  D006               	goto	l2578
  8383  0021C0  D7EF               	goto	l2570
  8384  0021C2                     l2576:
  8385  0021C2  90D8               	bcf	status,0,c
  8386  0021C4  3233               	rrcf	___ftadd@f2+2,f,c
  8387  0021C6  3232               	rrcf	___ftadd@f2+1,f,c
  8388  0021C8  3231               	rrcf	___ftadd@f2,f,c
  8389  0021CA  2A38               	incf	___ftadd@exp2,f,c
  8390  0021CC                     l2578:
  8391  0021CC  5038               	movf	___ftadd@exp2,w,c
  8392  0021CE  1839               	xorwf	___ftadd@exp1,w,c
  8393  0021D0  A4D8               	btfss	status,2,c
  8394  0021D2  D7F7               	goto	l2576
  8395  0021D4                     l679:
  8396  0021D4  AE37               	btfss	___ftadd@sign,7,c
  8397  0021D6  D00C               	goto	l688
  8398  0021D8  0EFF               	movlw	255
  8399  0021DA  1A2E               	xorwf	___ftadd@f1,f,c
  8400  0021DC  0EFF               	movlw	255
  8401  0021DE  1A2F               	xorwf	___ftadd@f1+1,f,c
  8402  0021E0  0EFF               	movlw	255
  8403  0021E2  1A30               	xorwf	___ftadd@f1+2,f,c
  8404  0021E4  0E01               	movlw	1
  8405  0021E6  262E               	addwf	___ftadd@f1,f,c
  8406  0021E8  0E00               	movlw	0
  8407  0021EA  222F               	addwfc	___ftadd@f1+1,f,c
  8408  0021EC  0E00               	movlw	0
  8409  0021EE  2230               	addwfc	___ftadd@f1+2,f,c
  8410  0021F0                     l688:
  8411  0021F0  AC37               	btfss	___ftadd@sign,6,c
  8412  0021F2  D00C               	goto	l2584
  8413  0021F4  0EFF               	movlw	255
  8414  0021F6  1A31               	xorwf	___ftadd@f2,f,c
  8415  0021F8  0EFF               	movlw	255
  8416  0021FA  1A32               	xorwf	___ftadd@f2+1,f,c
  8417  0021FC  0EFF               	movlw	255
  8418  0021FE  1A33               	xorwf	___ftadd@f2+2,f,c
  8419  002200  0E01               	movlw	1
  8420  002202  2631               	addwf	___ftadd@f2,f,c
  8421  002204  0E00               	movlw	0
  8422  002206  2232               	addwfc	___ftadd@f2+1,f,c
  8423  002208  0E00               	movlw	0
  8424  00220A  2233               	addwfc	___ftadd@f2+2,f,c
  8425  00220C                     l2584:
  8426  00220C  0E00               	movlw	0
  8427  00220E  6E37               	movwf	___ftadd@sign,c
  8428  002210  502E               	movf	___ftadd@f1,w,c
  8429  002212  2631               	addwf	___ftadd@f2,f,c
  8430  002214  502F               	movf	___ftadd@f1+1,w,c
  8431  002216  2232               	addwfc	___ftadd@f2+1,f,c
  8432  002218  5030               	movf	___ftadd@f1+2,w,c
  8433  00221A  2233               	addwfc	___ftadd@f2+2,f,c
  8434  00221C  AE33               	btfss	___ftadd@f2+2,7,c
  8435  00221E  D00E               	goto	l2594
  8436  002220  0EFF               	movlw	255
  8437  002222  1A31               	xorwf	___ftadd@f2,f,c
  8438  002224  0EFF               	movlw	255
  8439  002226  1A32               	xorwf	___ftadd@f2+1,f,c
  8440  002228  0EFF               	movlw	255
  8441  00222A  1A33               	xorwf	___ftadd@f2+2,f,c
  8442  00222C  0E01               	movlw	1
  8443  00222E  2631               	addwf	___ftadd@f2,f,c
  8444  002230  0E00               	movlw	0
  8445  002232  2232               	addwfc	___ftadd@f2+1,f,c
  8446  002234  0E00               	movlw	0
  8447  002236  2233               	addwfc	___ftadd@f2+2,f,c
  8448  002238  0E01               	movlw	1
  8449  00223A  6E37               	movwf	___ftadd@sign,c
  8450  00223C                     l2594:
  8451  00223C  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  8452  002240  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  8453  002244  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  8454  002248  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  8455  00224C  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  8456  002250  EC0A  F017         	call	___ftpack	;wreg free
  8457  002254  C001  F02E         	movff	?___ftpack,?___ftadd
  8458  002258  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  8459  00225C  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  8460  002260  0012               	return	
  8461  002262                     __end_of___ftadd:
  8462                           	opt stack 0
  8463                           tblptru	equ	0xFF8
  8464                           tblptrh	equ	0xFF7
  8465                           tblptrl	equ	0xFF6
  8466                           tablat	equ	0xFF5
  8467                           prodh	equ	0xFF4
  8468                           prodl	equ	0xFF3
  8469                           indf0	equ	0xFEF
  8470                           fsr0h	equ	0xFEA
  8471                           fsr0l	equ	0xFE9
  8472                           wreg	equ	0xFE8
  8473                           postinc1	equ	0xFE6
  8474                           postdec1	equ	0xFE5
  8475                           fsr1h	equ	0xFE2
  8476                           fsr1l	equ	0xFE1
  8477                           indf2	equ	0xFDF
  8478                           postinc2	equ	0xFDE
  8479                           postdec2	equ	0xFDD
  8480                           fsr2h	equ	0xFDA
  8481                           fsr2l	equ	0xFD9
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function _PWM_init *****************
  8485 ;; Defined at:
  8486 ;;		line 34 in file "pwm.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  period          1    wreg     unsigned char 
  8489 ;; Auto vars:     Size  Location     Type
  8490 ;;  period          1    1[COMRAM] unsigned char 
  8491 ;; Return value:  Size  Location     Type
  8492 ;;                  1    wreg      void 
  8493 ;; Registers used:
  8494 ;;		wreg, status,2, status,0, cstack
  8495 ;; Tracked objects:
  8496 ;;		On entry : 0/0
  8497 ;;		On exit  : 0/0
  8498 ;;		Unchanged: 0/0
  8499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8500 ;;      Params:         0       0       0       0       0       0       0       0       0
  8501 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8502 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8503 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8504 ;;Total ram usage:        1 bytes
  8505 ;; Hardware stack levels used:    1
  8506 ;; Hardware stack levels required when called:    1
  8507 ;; This function calls:
  8508 ;;		_OpenPWM1
  8509 ;;		_OpenTimer2
  8510 ;; This function is called by:
  8511 ;;		_main
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515                           	psect	text34
  8516  003674                     __ptext34:
  8517                           	opt stack 0
  8518  003674                     _PWM_init:
  8519                           	opt stack 29
  8520                           
  8521                           ;incstack = 0
  8522                           ;PWM_init@period stored from wreg
  8523  003674  6E02               	movwf	PWM_init@period,c
  8524                           
  8525                           ;pwm.c: 36: Timer2Config = 0b11111110;
  8526  003676  0EFE               	movlw	254
  8527  003678  0100               	movlb	0	; () banked
  8528  00367A  6FFE               	movwf	_Timer2Config& (0+255),b
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;pwm.c: 37: OpenTimer2(Timer2Config);
  8532  00367C  0100               	movlb	0	; () banked
  8533  00367E  51FE               	movf	_Timer2Config& (0+255),w,b
  8534  003680  EC2C  F01B         	call	_OpenTimer2
  8535                           
  8536                           ;pwm.c: 38: OpenPWM1(period);
  8537  003684  5002               	movf	PWM_init@period,w,c
  8538  003686  EC46  F01B         	call	_OpenPWM1
  8539  00368A  0012               	return	
  8540  00368C                     __end_of_PWM_init:
  8541                           	opt stack 0
  8542                           tblptru	equ	0xFF8
  8543                           tblptrh	equ	0xFF7
  8544                           tblptrl	equ	0xFF6
  8545                           tablat	equ	0xFF5
  8546                           prodh	equ	0xFF4
  8547                           prodl	equ	0xFF3
  8548                           indf0	equ	0xFEF
  8549                           fsr0h	equ	0xFEA
  8550                           fsr0l	equ	0xFE9
  8551                           wreg	equ	0xFE8
  8552                           postinc1	equ	0xFE6
  8553                           postdec1	equ	0xFE5
  8554                           fsr1h	equ	0xFE2
  8555                           fsr1l	equ	0xFE1
  8556                           indf2	equ	0xFDF
  8557                           postinc2	equ	0xFDE
  8558                           postdec2	equ	0xFDD
  8559                           fsr2h	equ	0xFDA
  8560                           fsr2l	equ	0xFD9
  8561                           status	equ	0xFD8
  8562                           
  8563 ;; *************** function _OpenTimer2 *****************
  8564 ;; Defined at:
  8565 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v1.38\sources\pic18\plib\Timers\t2open.c"
  8566 ;; Parameters:    Size  Location     Type
  8567 ;;  config          1    wreg     unsigned char 
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;  config          1    0[COMRAM] unsigned char 
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  1    wreg      void 
  8572 ;; Registers used:
  8573 ;;		wreg, status,2, status,0
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8579 ;;      Params:         0       0       0       0       0       0       0       0       0
  8580 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8581 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8582 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8583 ;;Total ram usage:        1 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; This function calls:
  8586 ;;		Nothing
  8587 ;; This function is called by:
  8588 ;;		_PWM_init
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           	psect	text35
  8593  003658                     __ptext35:
  8594                           	opt stack 0
  8595  003658                     _OpenTimer2:
  8596                           	opt stack 29
  8597                           
  8598                           ;incstack = 0
  8599                           ;OpenTimer2@config stored from wreg
  8600  003658  6E01               	movwf	OpenTimer2@config,c
  8601  00365A  5001               	movf	OpenTimer2@config,w,c
  8602  00365C  0BFB               	andlw	251
  8603  00365E  6ECA               	movwf	4042,c	;volatile
  8604  003660  0E00               	movlw	0
  8605  003662  6ECC               	movwf	4044,c	;volatile
  8606  003664  929E               	bcf	3998,1,c	;volatile
  8607  003666  AE01               	btfss	OpenTimer2@config,7,c
  8608  003668  D002               	goto	l397
  8609  00366A  829D               	bsf	3997,1,c	;volatile
  8610  00366C  D001               	goto	l398
  8611  00366E                     l397:
  8612  00366E  929D               	bcf	3997,1,c	;volatile
  8613  003670                     l398:
  8614  003670  84CA               	bsf	4042,2,c	;volatile
  8615  003672  0012               	return		;funcret
  8616  003674                     __end_of_OpenTimer2:
  8617                           	opt stack 0
  8618                           tblptru	equ	0xFF8
  8619                           tblptrh	equ	0xFF7
  8620                           tblptrl	equ	0xFF6
  8621                           tablat	equ	0xFF5
  8622                           prodh	equ	0xFF4
  8623                           prodl	equ	0xFF3
  8624                           indf0	equ	0xFEF
  8625                           fsr0h	equ	0xFEA
  8626                           fsr0l	equ	0xFE9
  8627                           wreg	equ	0xFE8
  8628                           postinc1	equ	0xFE6
  8629                           postdec1	equ	0xFE5
  8630                           fsr1h	equ	0xFE2
  8631                           fsr1l	equ	0xFE1
  8632                           indf2	equ	0xFDF
  8633                           postinc2	equ	0xFDE
  8634                           postdec2	equ	0xFDD
  8635                           fsr2h	equ	0xFDA
  8636                           fsr2l	equ	0xFD9
  8637                           status	equ	0xFD8
  8638                           
  8639 ;; *************** function _OpenPWM1 *****************
  8640 ;; Defined at:
  8641 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.38\sources\pic18\plib\PWM\pw1open.c"
  8642 ;; Parameters:    Size  Location     Type
  8643 ;;  period          1    wreg     unsigned char 
  8644 ;; Auto vars:     Size  Location     Type
  8645 ;;  period          1    0[COMRAM] unsigned char 
  8646 ;; Return value:  Size  Location     Type
  8647 ;;                  1    wreg      void 
  8648 ;; Registers used:
  8649 ;;		wreg, status,2, status,0
  8650 ;; Tracked objects:
  8651 ;;		On entry : 0/0
  8652 ;;		On exit  : 0/0
  8653 ;;		Unchanged: 0/0
  8654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8655 ;;      Params:         0       0       0       0       0       0       0       0       0
  8656 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8658 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8659 ;;Total ram usage:        1 bytes
  8660 ;; Hardware stack levels used:    1
  8661 ;; This function calls:
  8662 ;;		Nothing
  8663 ;; This function is called by:
  8664 ;;		_PWM_init
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           	psect	text36
  8669  00368C                     __ptext36:
  8670                           	opt stack 0
  8671  00368C                     _OpenPWM1:
  8672                           	opt stack 29
  8673                           
  8674                           ;incstack = 0
  8675                           ;OpenPWM1@period stored from wreg
  8676  00368C  6E01               	movwf	OpenPWM1@period,c
  8677  00368E  0E0C               	movlw	12
  8678  003690  12BD               	iorwf	4029,f,c	;volatile
  8679  003692  9494               	bcf	3988,2,c	;volatile
  8680  003694  94CA               	bcf	4042,2,c	;volatile
  8681  003696  C001  FFCB         	movff	OpenPWM1@period,4043	;volatile
  8682  00369A  84CA               	bsf	4042,2,c	;volatile
  8683  00369C  0012               	return		;funcret
  8684  00369E                     __end_of_OpenPWM1:
  8685                           	opt stack 0
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           indf0	equ	0xFEF
  8693                           fsr0h	equ	0xFEA
  8694                           fsr0l	equ	0xFE9
  8695                           wreg	equ	0xFE8
  8696                           postinc1	equ	0xFE6
  8697                           postdec1	equ	0xFE5
  8698                           fsr1h	equ	0xFE2
  8699                           fsr1l	equ	0xFE1
  8700                           indf2	equ	0xFDF
  8701                           postinc2	equ	0xFDE
  8702                           postdec2	equ	0xFDD
  8703                           fsr2h	equ	0xFDA
  8704                           fsr2l	equ	0xFD9
  8705                           status	equ	0xFD8
  8706                           
  8707 ;; *************** function _PWM_DutyCycle *****************
  8708 ;; Defined at:
  8709 ;;		line 41 in file "pwm.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;  percentageDu    1    wreg     unsigned char 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  percentageDu    1   59[COMRAM] unsigned char 
  8714 ;;  DC              2   60[COMRAM] unsigned int 
  8715 ;;  DutyCycle       2   57[COMRAM] unsigned int 
  8716 ;; Return value:  Size  Location     Type
  8717 ;;                  1    wreg      void 
  8718 ;; Registers used:
  8719 ;;		wreg, status,2, status,0, cstack
  8720 ;; Tracked objects:
  8721 ;;		On entry : 0/0
  8722 ;;		On exit  : 0/0
  8723 ;;		Unchanged: 0/0
  8724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8725 ;;      Params:         0       0       0       0       0       0       0       0       0
  8726 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8727 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8728 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8729 ;;Total ram usage:        5 bytes
  8730 ;; Hardware stack levels used:    1
  8731 ;; Hardware stack levels required when called:    2
  8732 ;; This function calls:
  8733 ;;		_SetDCPWM1
  8734 ;;		___ftmul
  8735 ;;		___fttol
  8736 ;;		___lbtoft
  8737 ;; This function is called by:
  8738 ;;		_main
  8739 ;; This function uses a non-reentrant model
  8740 ;;
  8741                           
  8742                           	psect	text37
  8743  003308                     __ptext37:
  8744                           	opt stack 0
  8745  003308                     _PWM_DutyCycle:
  8746                           	opt stack 28
  8747                           
  8748                           ;incstack = 0
  8749                           ;PWM_DutyCycle@percentageDuty stored from wreg
  8750  003308  6E3C               	movwf	PWM_DutyCycle@percentageDuty,c
  8751                           
  8752                           ;pwm.c: 44: unsigned int DC=0, DutyCycle=0;
  8753  00330A  0E00               	movlw	0
  8754  00330C  6E3E               	movwf	PWM_DutyCycle@DC+1,c
  8755  00330E  0E00               	movlw	0
  8756  003310  6E3D               	movwf	PWM_DutyCycle@DC,c
  8757  003312  0E00               	movlw	0
  8758  003314  6E3B               	movwf	PWM_DutyCycle@DutyCycle+1,c
  8759  003316  0E00               	movlw	0
  8760  003318  6E3A               	movwf	PWM_DutyCycle@DutyCycle,c
  8761                           
  8762                           ;pwm.c: 46: DC=(unsigned int)(percentageDuty *10.23);
  8763  00331A  0EAE               	movlw	174
  8764  00331C  6E18               	movwf	___ftmul@f2,c
  8765  00331E  0E23               	movlw	35
  8766  003320  6E19               	movwf	___ftmul@f2+1,c
  8767  003322  0E41               	movlw	65
  8768  003324  6E1A               	movwf	___ftmul@f2+2,c
  8769  003326  503C               	movf	PWM_DutyCycle@percentageDuty,w,c
  8770  003328  ECFB  F01A         	call	___lbtoft
  8771  00332C  C009  F015         	movff	?___lbtoft,___ftmul@f1
  8772  003330  C00A  F016         	movff	?___lbtoft+1,___ftmul@f1+1
  8773  003334  C00B  F017         	movff	?___lbtoft+2,___ftmul@f1+2
  8774  003338  EC39  F015         	call	___ftmul	;wreg free
  8775  00333C  C015  F02B         	movff	?___ftmul,___fttol@f1
  8776  003340  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  8777  003344  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  8778  003348  ECBF  F014         	call	___fttol	;wreg free
  8779  00334C  C02B  F03D         	movff	?___fttol,PWM_DutyCycle@DC
  8780  003350  C02C  F03E         	movff	?___fttol+1,PWM_DutyCycle@DC+1
  8781                           
  8782                           ;pwm.c: 49: SetDCPWM1(DC);
  8783  003354  C03D  F001         	movff	PWM_DutyCycle@DC,SetDCPWM1@dutycycle
  8784  003358  C03E  F002         	movff	PWM_DutyCycle@DC+1,SetDCPWM1@dutycycle+1
  8785  00335C  ECF9  F019         	call	_SetDCPWM1	;wreg free
  8786  003360  0012               	return	
  8787  003362                     __end_of_PWM_DutyCycle:
  8788                           	opt stack 0
  8789                           tblptru	equ	0xFF8
  8790                           tblptrh	equ	0xFF7
  8791                           tblptrl	equ	0xFF6
  8792                           tablat	equ	0xFF5
  8793                           prodh	equ	0xFF4
  8794                           prodl	equ	0xFF3
  8795                           indf0	equ	0xFEF
  8796                           fsr0h	equ	0xFEA
  8797                           fsr0l	equ	0xFE9
  8798                           wreg	equ	0xFE8
  8799                           postinc1	equ	0xFE6
  8800                           postdec1	equ	0xFE5
  8801                           fsr1h	equ	0xFE2
  8802                           fsr1l	equ	0xFE1
  8803                           indf2	equ	0xFDF
  8804                           postinc2	equ	0xFDE
  8805                           postdec2	equ	0xFDD
  8806                           fsr2h	equ	0xFDA
  8807                           fsr2l	equ	0xFD9
  8808                           status	equ	0xFD8
  8809                           
  8810 ;; *************** function ___lbtoft *****************
  8811 ;; Defined at:
  8812 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\lbtoft.c"
  8813 ;; Parameters:    Size  Location     Type
  8814 ;;  c               1    wreg     unsigned char 
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;  c               1   11[COMRAM] unsigned char 
  8817 ;; Return value:  Size  Location     Type
  8818 ;;                  3    8[COMRAM] float 
  8819 ;; Registers used:
  8820 ;;		wreg, status,2, status,0, cstack
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8826 ;;      Params:         3       0       0       0       0       0       0       0       0
  8827 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8828 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8829 ;;      Totals:         4       0       0       0       0       0       0       0       0
  8830 ;;Total ram usage:        4 bytes
  8831 ;; Hardware stack levels used:    1
  8832 ;; Hardware stack levels required when called:    1
  8833 ;; This function calls:
  8834 ;;		___ftpack
  8835 ;; This function is called by:
  8836 ;;		_PWM_DutyCycle
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           	psect	text38
  8841  0035F6                     __ptext38:
  8842                           	opt stack 0
  8843  0035F6                     ___lbtoft:
  8844                           	opt stack 28
  8845                           
  8846                           ;incstack = 0
  8847                           ;___lbtoft@c stored from wreg
  8848  0035F6  6E0C               	movwf	___lbtoft@c,c
  8849  0035F8  500C               	movf	___lbtoft@c,w,c
  8850  0035FA  6E01               	movwf	___ftpack@arg,c
  8851  0035FC  6A02               	clrf	___ftpack@arg+1,c
  8852  0035FE  6A03               	clrf	___ftpack@arg+2,c
  8853  003600  0E8E               	movlw	142
  8854  003602  6E04               	movwf	___ftpack@exp,c
  8855  003604  0E00               	movlw	0
  8856  003606  6E05               	movwf	___ftpack@sign,c
  8857  003608  EC0A  F017         	call	___ftpack	;wreg free
  8858  00360C  C001  F009         	movff	?___ftpack,?___lbtoft
  8859  003610  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  8860  003614  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  8861  003618  0012               	return	
  8862  00361A                     __end_of___lbtoft:
  8863                           	opt stack 0
  8864                           tblptru	equ	0xFF8
  8865                           tblptrh	equ	0xFF7
  8866                           tblptrl	equ	0xFF6
  8867                           tablat	equ	0xFF5
  8868                           prodh	equ	0xFF4
  8869                           prodl	equ	0xFF3
  8870                           indf0	equ	0xFEF
  8871                           fsr0h	equ	0xFEA
  8872                           fsr0l	equ	0xFE9
  8873                           wreg	equ	0xFE8
  8874                           postinc1	equ	0xFE6
  8875                           postdec1	equ	0xFE5
  8876                           fsr1h	equ	0xFE2
  8877                           fsr1l	equ	0xFE1
  8878                           indf2	equ	0xFDF
  8879                           postinc2	equ	0xFDE
  8880                           postdec2	equ	0xFDD
  8881                           fsr2h	equ	0xFDA
  8882                           fsr2l	equ	0xFD9
  8883                           status	equ	0xFD8
  8884                           
  8885 ;; *************** function ___fttol *****************
  8886 ;; Defined at:
  8887 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\fttol.c"
  8888 ;; Parameters:    Size  Location     Type
  8889 ;;  f1              3   42[COMRAM] float 
  8890 ;; Auto vars:     Size  Location     Type
  8891 ;;  lval            4   52[COMRAM] unsigned long 
  8892 ;;  exp1            1   56[COMRAM] unsigned char 
  8893 ;;  sign1           1   51[COMRAM] unsigned char 
  8894 ;; Return value:  Size  Location     Type
  8895 ;;                  4   42[COMRAM] long 
  8896 ;; Registers used:
  8897 ;;		wreg, status,2, status,0
  8898 ;; Tracked objects:
  8899 ;;		On entry : 0/0
  8900 ;;		On exit  : 0/0
  8901 ;;		Unchanged: 0/0
  8902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8903 ;;      Params:         4       0       0       0       0       0       0       0       0
  8904 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8905 ;;      Temps:          5       0       0       0       0       0       0       0       0
  8906 ;;      Totals:        15       0       0       0       0       0       0       0       0
  8907 ;;Total ram usage:       15 bytes
  8908 ;; Hardware stack levels used:    1
  8909 ;; This function calls:
  8910 ;;		Nothing
  8911 ;; This function is called by:
  8912 ;;		_main
  8913 ;;		_PWM_DutyCycle
  8914 ;;		_sprintf
  8915 ;; This function uses a non-reentrant model
  8916 ;;
  8917                           
  8918                           	psect	text39
  8919  00297E                     __ptext39:
  8920                           	opt stack 0
  8921  00297E                     ___fttol:
  8922                           	opt stack 27
  8923                           
  8924                           ;incstack = 0
  8925  00297E  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  8926  002982  6A30               	clrf	(??___fttol+1)& (0+255),c
  8927  002984  6A31               	clrf	(??___fttol+2)& (0+255),c
  8928  002986  342C               	rlcf	___fttol@f1+1,w,c
  8929  002988  362F               	rlcf	??___fttol& (0+255),f,c
  8930  00298A  E301               	bnc	u2811
  8931  00298C  8030               	bsf	(??___fttol+1)& (0+255),0,c
  8932  00298E                     u2811:
  8933  00298E  502F               	movf	??___fttol,w,c
  8934  002990  6E39               	movwf	___fttol@exp1,c
  8935  002992  5039               	movf	___fttol@exp1,w,c
  8936  002994  A4D8               	btfss	status,2,c
  8937  002996  D009               	goto	l3016
  8938  002998  0E00               	movlw	0
  8939  00299A  6E2B               	movwf	?___fttol,c
  8940  00299C  0E00               	movlw	0
  8941  00299E  6E2C               	movwf	?___fttol+1,c
  8942  0029A0  0E00               	movlw	0
  8943  0029A2  6E2D               	movwf	?___fttol+2,c
  8944  0029A4  0E00               	movlw	0
  8945  0029A6  6E2E               	movwf	?___fttol+3,c
  8946  0029A8  0012               	return	
  8947  0029AA                     l3016:
  8948  0029AA  0E17               	movlw	23
  8949  0029AC  6E2F               	movwf	??___fttol& (0+255),c
  8950  0029AE  C02B  F030         	movff	___fttol@f1,??___fttol+1
  8951  0029B2  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  8952  0029B6  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  8953  0029BA  282F               	incf	??___fttol,w,c
  8954  0029BC  6E33               	movwf	(??___fttol+4)& (0+255),c
  8955  0029BE  D004               	goto	u2830
  8956  0029C0                     u2835:
  8957  0029C0  90D8               	bcf	status,0,c
  8958  0029C2  3232               	rrcf	??___fttol+3,f,c
  8959  0029C4  3231               	rrcf	??___fttol+2,f,c
  8960  0029C6  3230               	rrcf	??___fttol+1,f,c
  8961  0029C8                     u2830:
  8962  0029C8  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  8963  0029CA  D7FA               	goto	u2835
  8964  0029CC  5030               	movf	??___fttol+1,w,c
  8965  0029CE  6E34               	movwf	___fttol@sign1,c
  8966  0029D0  8E2C               	bsf	___fttol@f1+1,7,c
  8967  0029D2  0EFF               	movlw	255
  8968  0029D4  162B               	andwf	___fttol@f1,f,c
  8969  0029D6  0EFF               	movlw	255
  8970  0029D8  162C               	andwf	___fttol@f1+1,f,c
  8971  0029DA  0E00               	movlw	0
  8972  0029DC  162D               	andwf	___fttol@f1+2,f,c
  8973  0029DE  502B               	movf	___fttol@f1,w,c
  8974  0029E0  6E35               	movwf	___fttol@lval,c
  8975  0029E2  502C               	movf	___fttol@f1+1,w,c
  8976  0029E4  6E36               	movwf	___fttol@lval+1,c
  8977  0029E6  502D               	movf	___fttol@f1+2,w,c
  8978  0029E8  6E37               	movwf	___fttol@lval+2,c
  8979  0029EA  6A38               	clrf	___fttol@lval+3,c
  8980  0029EC  0E8E               	movlw	142
  8981  0029EE  5E39               	subwf	___fttol@exp1,f,c
  8982  0029F0  AE39               	btfss	___fttol@exp1,7,c
  8983  0029F2  D016               	goto	l3038
  8984  0029F4  5039               	movf	___fttol@exp1,w,c
  8985  0029F6  0A80               	xorlw	128
  8986  0029F8  0F8F               	addlw	143
  8987  0029FA  B0D8               	btfsc	status,0,c
  8988  0029FC  D009               	goto	l3034
  8989  0029FE  0E00               	movlw	0
  8990  002A00  6E2B               	movwf	?___fttol,c
  8991  002A02  0E00               	movlw	0
  8992  002A04  6E2C               	movwf	?___fttol+1,c
  8993  002A06  0E00               	movlw	0
  8994  002A08  6E2D               	movwf	?___fttol+2,c
  8995  002A0A  0E00               	movlw	0
  8996  002A0C  6E2E               	movwf	?___fttol+3,c
  8997  002A0E  0012               	return	
  8998  002A10                     l3034:
  8999  002A10  90D8               	bcf	status,0,c
  9000  002A12  3238               	rrcf	___fttol@lval+3,f,c
  9001  002A14  3237               	rrcf	___fttol@lval+2,f,c
  9002  002A16  3236               	rrcf	___fttol@lval+1,f,c
  9003  002A18  3235               	rrcf	___fttol@lval,f,c
  9004  002A1A  3E39               	incfsz	___fttol@exp1,f,c
  9005  002A1C  D7F9               	goto	l3034
  9006  002A1E  D015               	goto	l3048
  9007  002A20                     l3038:
  9008  002A20  0E17               	movlw	23
  9009  002A22  6439               	cpfsgt	___fttol@exp1,c
  9010  002A24  D00F               	goto	l3046
  9011  002A26  0E00               	movlw	0
  9012  002A28  6E2B               	movwf	?___fttol,c
  9013  002A2A  0E00               	movlw	0
  9014  002A2C  6E2C               	movwf	?___fttol+1,c
  9015  002A2E  0E00               	movlw	0
  9016  002A30  6E2D               	movwf	?___fttol+2,c
  9017  002A32  0E00               	movlw	0
  9018  002A34  6E2E               	movwf	?___fttol+3,c
  9019  002A36  0012               	return	
  9020  002A38                     l3044:
  9021  002A38  90D8               	bcf	status,0,c
  9022  002A3A  3635               	rlcf	___fttol@lval,f,c
  9023  002A3C  3636               	rlcf	___fttol@lval+1,f,c
  9024  002A3E  3637               	rlcf	___fttol@lval+2,f,c
  9025  002A40  3638               	rlcf	___fttol@lval+3,f,c
  9026  002A42  0639               	decf	___fttol@exp1,f,c
  9027  002A44                     l3046:
  9028  002A44  5039               	movf	___fttol@exp1,w,c
  9029  002A46  A4D8               	btfss	status,2,c
  9030  002A48  D7F7               	goto	l3044
  9031  002A4A                     l3048:
  9032  002A4A  5034               	movf	___fttol@sign1,w,c
  9033  002A4C  B4D8               	btfsc	status,2,c
  9034  002A4E  D008               	goto	l3052
  9035  002A50  1E38               	comf	___fttol@lval+3,f,c
  9036  002A52  1E37               	comf	___fttol@lval+2,f,c
  9037  002A54  1E36               	comf	___fttol@lval+1,f,c
  9038  002A56  6C35               	negf	___fttol@lval,c
  9039  002A58  0E00               	movlw	0
  9040  002A5A  2236               	addwfc	___fttol@lval+1,f,c
  9041  002A5C  2237               	addwfc	___fttol@lval+2,f,c
  9042  002A5E  2238               	addwfc	___fttol@lval+3,f,c
  9043  002A60                     l3052:
  9044  002A60  C035  F02B         	movff	___fttol@lval,?___fttol
  9045  002A64  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  9046  002A68  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  9047  002A6C  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  9048  002A70  0012               	return	
  9049  002A72                     __end_of___fttol:
  9050                           	opt stack 0
  9051                           tblptru	equ	0xFF8
  9052                           tblptrh	equ	0xFF7
  9053                           tblptrl	equ	0xFF6
  9054                           tablat	equ	0xFF5
  9055                           prodh	equ	0xFF4
  9056                           prodl	equ	0xFF3
  9057                           indf0	equ	0xFEF
  9058                           fsr0h	equ	0xFEA
  9059                           fsr0l	equ	0xFE9
  9060                           wreg	equ	0xFE8
  9061                           postinc1	equ	0xFE6
  9062                           postdec1	equ	0xFE5
  9063                           fsr1h	equ	0xFE2
  9064                           fsr1l	equ	0xFE1
  9065                           indf2	equ	0xFDF
  9066                           postinc2	equ	0xFDE
  9067                           postdec2	equ	0xFDD
  9068                           fsr2h	equ	0xFDA
  9069                           fsr2l	equ	0xFD9
  9070                           status	equ	0xFD8
  9071                           
  9072 ;; *************** function ___ftmul *****************
  9073 ;; Defined at:
  9074 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftmul.c"
  9075 ;; Parameters:    Size  Location     Type
  9076 ;;  f1              3   20[COMRAM] float 
  9077 ;;  f2              3   23[COMRAM] float 
  9078 ;; Auto vars:     Size  Location     Type
  9079 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  9080 ;;  sign            1   34[COMRAM] unsigned char 
  9081 ;;  cntr            1   33[COMRAM] unsigned char 
  9082 ;;  exp             1   29[COMRAM] unsigned char 
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  3   20[COMRAM] float 
  9085 ;; Registers used:
  9086 ;;		wreg, status,2, status,0, cstack
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9092 ;;      Params:         6       0       0       0       0       0       0       0       0
  9093 ;;      Locals:         6       0       0       0       0       0       0       0       0
  9094 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9095 ;;      Totals:        15       0       0       0       0       0       0       0       0
  9096 ;;Total ram usage:       15 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; Hardware stack levels required when called:    1
  9099 ;; This function calls:
  9100 ;;		___ftpack
  9101 ;; This function is called by:
  9102 ;;		_temp_sense
  9103 ;;		_linspace
  9104 ;;		_defuzzy
  9105 ;;		_PWM_DutyCycle
  9106 ;;		_fround
  9107 ;;		_scale
  9108 ;;		_sprintf
  9109 ;; This function uses a non-reentrant model
  9110 ;;
  9111                           
  9112                           	psect	text40
  9113  002A72                     __ptext40:
  9114                           	opt stack 0
  9115  002A72                     ___ftmul:
  9116                           	opt stack 28
  9117                           
  9118                           ;incstack = 0
  9119  002A72  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  9120  002A76  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  9121  002A78  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  9122  002A7A  3416               	rlcf	___ftmul@f1+1,w,c
  9123  002A7C  361B               	rlcf	??___ftmul& (0+255),f,c
  9124  002A7E  E301               	bnc	u2281
  9125  002A80  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  9126  002A82                     u2281:
  9127  002A82  501B               	movf	??___ftmul,w,c
  9128  002A84  6E1E               	movwf	___ftmul@exp,c
  9129  002A86  501E               	movf	___ftmul@exp,w,c
  9130  002A88  A4D8               	btfss	status,2,c
  9131  002A8A  D007               	goto	l2604
  9132  002A8C  0E00               	movlw	0
  9133  002A8E  6E15               	movwf	?___ftmul,c
  9134  002A90  0E00               	movlw	0
  9135  002A92  6E16               	movwf	?___ftmul+1,c
  9136  002A94  0E00               	movlw	0
  9137  002A96  6E17               	movwf	?___ftmul+2,c
  9138  002A98  0012               	return	
  9139  002A9A                     l2604:
  9140  002A9A  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  9141  002A9E  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  9142  002AA0  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  9143  002AA2  3419               	rlcf	___ftmul@f2+1,w,c
  9144  002AA4  361B               	rlcf	??___ftmul& (0+255),f,c
  9145  002AA6  E301               	bnc	u2301
  9146  002AA8  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  9147  002AAA                     u2301:
  9148  002AAA  501B               	movf	??___ftmul,w,c
  9149  002AAC  6E23               	movwf	___ftmul@sign,c
  9150  002AAE  5023               	movf	___ftmul@sign,w,c
  9151  002AB0  A4D8               	btfss	status,2,c
  9152  002AB2  D007               	goto	l2610
  9153  002AB4  0E00               	movlw	0
  9154  002AB6  6E15               	movwf	?___ftmul,c
  9155  002AB8  0E00               	movlw	0
  9156  002ABA  6E16               	movwf	?___ftmul+1,c
  9157  002ABC  0E00               	movlw	0
  9158  002ABE  6E17               	movwf	?___ftmul+2,c
  9159  002AC0  0012               	return	
  9160  002AC2                     l2610:
  9161  002AC2  5023               	movf	___ftmul@sign,w,c
  9162  002AC4  0F7B               	addlw	123
  9163  002AC6  261E               	addwf	___ftmul@exp,f,c
  9164  002AC8  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  9165  002ACC  501A               	movf	___ftmul@f2+2,w,c
  9166  002ACE  1A23               	xorwf	___ftmul@sign,f,c
  9167  002AD0  0E80               	movlw	128
  9168  002AD2  1623               	andwf	___ftmul@sign,f,c
  9169  002AD4  8E16               	bsf	___ftmul@f1+1,7,c
  9170  002AD6  8E19               	bsf	___ftmul@f2+1,7,c
  9171  002AD8  0EFF               	movlw	255
  9172  002ADA  1618               	andwf	___ftmul@f2,f,c
  9173  002ADC  0EFF               	movlw	255
  9174  002ADE  1619               	andwf	___ftmul@f2+1,f,c
  9175  002AE0  0E00               	movlw	0
  9176  002AE2  161A               	andwf	___ftmul@f2+2,f,c
  9177  002AE4  0E00               	movlw	0
  9178  002AE6  6E1F               	movwf	___ftmul@f3_as_product,c
  9179  002AE8  0E00               	movlw	0
  9180  002AEA  6E20               	movwf	___ftmul@f3_as_product+1,c
  9181  002AEC  0E00               	movlw	0
  9182  002AEE  6E21               	movwf	___ftmul@f3_as_product+2,c
  9183  002AF0  0E07               	movlw	7
  9184  002AF2  6E22               	movwf	___ftmul@cntr,c
  9185  002AF4                     l2624:
  9186  002AF4  A015               	btfss	___ftmul@f1,0,c
  9187  002AF6  D006               	goto	l2628
  9188  002AF8  5018               	movf	___ftmul@f2,w,c
  9189  002AFA  261F               	addwf	___ftmul@f3_as_product,f,c
  9190  002AFC  5019               	movf	___ftmul@f2+1,w,c
  9191  002AFE  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  9192  002B00  501A               	movf	___ftmul@f2+2,w,c
  9193  002B02  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  9194  002B04                     l2628:
  9195  002B04  90D8               	bcf	status,0,c
  9196  002B06  3217               	rrcf	___ftmul@f1+2,f,c
  9197  002B08  3216               	rrcf	___ftmul@f1+1,f,c
  9198  002B0A  3215               	rrcf	___ftmul@f1,f,c
  9199  002B0C  90D8               	bcf	status,0,c
  9200  002B0E  3618               	rlcf	___ftmul@f2,f,c
  9201  002B10  3619               	rlcf	___ftmul@f2+1,f,c
  9202  002B12  361A               	rlcf	___ftmul@f2+2,f,c
  9203  002B14  2E22               	decfsz	___ftmul@cntr,f,c
  9204  002B16  D7EE               	goto	l2624
  9205  002B18  0E09               	movlw	9
  9206  002B1A  6E22               	movwf	___ftmul@cntr,c
  9207  002B1C                     l2634:
  9208  002B1C  A015               	btfss	___ftmul@f1,0,c
  9209  002B1E  D006               	goto	l2638
  9210  002B20  5018               	movf	___ftmul@f2,w,c
  9211  002B22  261F               	addwf	___ftmul@f3_as_product,f,c
  9212  002B24  5019               	movf	___ftmul@f2+1,w,c
  9213  002B26  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  9214  002B28  501A               	movf	___ftmul@f2+2,w,c
  9215  002B2A  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  9216  002B2C                     l2638:
  9217  002B2C  90D8               	bcf	status,0,c
  9218  002B2E  3217               	rrcf	___ftmul@f1+2,f,c
  9219  002B30  3216               	rrcf	___ftmul@f1+1,f,c
  9220  002B32  3215               	rrcf	___ftmul@f1,f,c
  9221  002B34  90D8               	bcf	status,0,c
  9222  002B36  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  9223  002B38  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  9224  002B3A  321F               	rrcf	___ftmul@f3_as_product,f,c
  9225  002B3C  2E22               	decfsz	___ftmul@cntr,f,c
  9226  002B3E  D7EE               	goto	l2634
  9227  002B40  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9228  002B44  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9229  002B48  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9230  002B4C  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  9231  002B50  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  9232  002B54  EC0A  F017         	call	___ftpack	;wreg free
  9233  002B58  C001  F015         	movff	?___ftpack,?___ftmul
  9234  002B5C  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  9235  002B60  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  9236  002B64  0012               	return	
  9237  002B66                     __end_of___ftmul:
  9238                           	opt stack 0
  9239                           tblptru	equ	0xFF8
  9240                           tblptrh	equ	0xFF7
  9241                           tblptrl	equ	0xFF6
  9242                           tablat	equ	0xFF5
  9243                           prodh	equ	0xFF4
  9244                           prodl	equ	0xFF3
  9245                           indf0	equ	0xFEF
  9246                           fsr0h	equ	0xFEA
  9247                           fsr0l	equ	0xFE9
  9248                           wreg	equ	0xFE8
  9249                           postinc1	equ	0xFE6
  9250                           postdec1	equ	0xFE5
  9251                           fsr1h	equ	0xFE2
  9252                           fsr1l	equ	0xFE1
  9253                           indf2	equ	0xFDF
  9254                           postinc2	equ	0xFDE
  9255                           postdec2	equ	0xFDD
  9256                           fsr2h	equ	0xFDA
  9257                           fsr2l	equ	0xFD9
  9258                           status	equ	0xFD8
  9259                           
  9260 ;; *************** function ___ftpack *****************
  9261 ;; Defined at:
  9262 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\float.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;  arg             3    0[COMRAM] unsigned um
  9265 ;;  exp             1    3[COMRAM] unsigned char 
  9266 ;;  sign            1    4[COMRAM] unsigned char 
  9267 ;; Auto vars:     Size  Location     Type
  9268 ;;		None
  9269 ;; Return value:  Size  Location     Type
  9270 ;;                  3    0[COMRAM] float 
  9271 ;; Registers used:
  9272 ;;		wreg, status,2, status,0
  9273 ;; Tracked objects:
  9274 ;;		On entry : 0/0
  9275 ;;		On exit  : 0/0
  9276 ;;		Unchanged: 0/0
  9277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9278 ;;      Params:         5       0       0       0       0       0       0       0       0
  9279 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9280 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9281 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9282 ;;Total ram usage:        8 bytes
  9283 ;; Hardware stack levels used:    1
  9284 ;; This function calls:
  9285 ;;		Nothing
  9286 ;; This function is called by:
  9287 ;;		___awtoft
  9288 ;;		___ftadd
  9289 ;;		___ftdiv
  9290 ;;		___ftmul
  9291 ;;		___lbtoft
  9292 ;;		___lltoft
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           	psect	text41
  9297  002E14                     __ptext41:
  9298                           	opt stack 0
  9299  002E14                     ___ftpack:
  9300                           	opt stack 28
  9301                           
  9302                           ;incstack = 0
  9303  002E14  5004               	movf	___ftpack@exp,w,c
  9304  002E16  B4D8               	btfsc	status,2,c
  9305  002E18  D005               	goto	l2474
  9306  002E1A  5001               	movf	___ftpack@arg,w,c
  9307  002E1C  1002               	iorwf	___ftpack@arg+1,w,c
  9308  002E1E  1003               	iorwf	___ftpack@arg+2,w,c
  9309  002E20  A4D8               	btfss	status,2,c
  9310  002E22  D00C               	goto	l2480
  9311  002E24                     l2474:
  9312  002E24  0E00               	movlw	0
  9313  002E26  6E01               	movwf	?___ftpack,c
  9314  002E28  0E00               	movlw	0
  9315  002E2A  6E02               	movwf	?___ftpack+1,c
  9316  002E2C  0E00               	movlw	0
  9317  002E2E  6E03               	movwf	?___ftpack+2,c
  9318  002E30  0012               	return	
  9319  002E32                     l2478:
  9320  002E32  2A04               	incf	___ftpack@exp,f,c
  9321  002E34  90D8               	bcf	status,0,c
  9322  002E36  3203               	rrcf	___ftpack@arg+2,f,c
  9323  002E38  3202               	rrcf	___ftpack@arg+1,f,c
  9324  002E3A  3201               	rrcf	___ftpack@arg,f,c
  9325  002E3C                     l2480:
  9326  002E3C  0E00               	movlw	0
  9327  002E3E  1401               	andwf	___ftpack@arg,w,c
  9328  002E40  6E06               	movwf	??___ftpack& (0+255),c
  9329  002E42  0E00               	movlw	0
  9330  002E44  1402               	andwf	___ftpack@arg+1,w,c
  9331  002E46  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9332  002E48  0EFE               	movlw	254
  9333  002E4A  1403               	andwf	___ftpack@arg+2,w,c
  9334  002E4C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9335  002E4E  5006               	movf	??___ftpack,w,c
  9336  002E50  1007               	iorwf	??___ftpack+1,w,c
  9337  002E52  1008               	iorwf	??___ftpack+2,w,c
  9338  002E54  B4D8               	btfsc	status,2,c
  9339  002E56  D00C               	goto	l2486
  9340  002E58  D7EC               	goto	l2478
  9341  002E5A                     l2482:
  9342  002E5A  2A04               	incf	___ftpack@exp,f,c
  9343  002E5C  0E01               	movlw	1
  9344  002E5E  2601               	addwf	___ftpack@arg,f,c
  9345  002E60  0E00               	movlw	0
  9346  002E62  2202               	addwfc	___ftpack@arg+1,f,c
  9347  002E64  0E00               	movlw	0
  9348  002E66  2203               	addwfc	___ftpack@arg+2,f,c
  9349  002E68  90D8               	bcf	status,0,c
  9350  002E6A  3203               	rrcf	___ftpack@arg+2,f,c
  9351  002E6C  3202               	rrcf	___ftpack@arg+1,f,c
  9352  002E6E  3201               	rrcf	___ftpack@arg,f,c
  9353  002E70                     l2486:
  9354  002E70  0E00               	movlw	0
  9355  002E72  1401               	andwf	___ftpack@arg,w,c
  9356  002E74  6E06               	movwf	??___ftpack& (0+255),c
  9357  002E76  0E00               	movlw	0
  9358  002E78  1402               	andwf	___ftpack@arg+1,w,c
  9359  002E7A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9360  002E7C  0EFF               	movlw	255
  9361  002E7E  1403               	andwf	___ftpack@arg+2,w,c
  9362  002E80  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9363  002E82  5006               	movf	??___ftpack,w,c
  9364  002E84  1007               	iorwf	??___ftpack+1,w,c
  9365  002E86  1008               	iorwf	??___ftpack+2,w,c
  9366  002E88  B4D8               	btfsc	status,2,c
  9367  002E8A  D006               	goto	l2490
  9368  002E8C  D7E6               	goto	l2482
  9369  002E8E                     l2488:
  9370  002E8E  0604               	decf	___ftpack@exp,f,c
  9371  002E90  90D8               	bcf	status,0,c
  9372  002E92  3601               	rlcf	___ftpack@arg,f,c
  9373  002E94  3602               	rlcf	___ftpack@arg+1,f,c
  9374  002E96  3603               	rlcf	___ftpack@arg+2,f,c
  9375  002E98                     l2490:
  9376  002E98  BE02               	btfsc	___ftpack@arg+1,7,c
  9377  002E9A  D003               	goto	l641
  9378  002E9C  0E02               	movlw	2
  9379  002E9E  6004               	cpfslt	___ftpack@exp,c
  9380  002EA0  D7F6               	goto	l2488
  9381  002EA2                     l641:
  9382  002EA2  A004               	btfss	___ftpack@exp,0,c
  9383  002EA4  9E02               	bcf	___ftpack@arg+1,7,c
  9384  002EA6  90D8               	bcf	status,0,c
  9385  002EA8  3204               	rrcf	___ftpack@exp,f,c
  9386  002EAA  5004               	movf	___ftpack@exp,w,c
  9387  002EAC  1203               	iorwf	___ftpack@arg+2,f,c
  9388  002EAE  5005               	movf	___ftpack@sign,w,c
  9389  002EB0  A4D8               	btfss	status,2,c
  9390  002EB2  8E03               	bsf	___ftpack@arg+2,7,c
  9391  002EB4  C001  F001         	movff	___ftpack@arg,?___ftpack
  9392  002EB8  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  9393  002EBC  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  9394  002EC0  0012               	return	
  9395  002EC2                     __end_of___ftpack:
  9396                           	opt stack 0
  9397                           tblptru	equ	0xFF8
  9398                           tblptrh	equ	0xFF7
  9399                           tblptrl	equ	0xFF6
  9400                           tablat	equ	0xFF5
  9401                           prodh	equ	0xFF4
  9402                           prodl	equ	0xFF3
  9403                           indf0	equ	0xFEF
  9404                           fsr0h	equ	0xFEA
  9405                           fsr0l	equ	0xFE9
  9406                           wreg	equ	0xFE8
  9407                           postinc1	equ	0xFE6
  9408                           postdec1	equ	0xFE5
  9409                           fsr1h	equ	0xFE2
  9410                           fsr1l	equ	0xFE1
  9411                           indf2	equ	0xFDF
  9412                           postinc2	equ	0xFDE
  9413                           postdec2	equ	0xFDD
  9414                           fsr2h	equ	0xFDA
  9415                           fsr2l	equ	0xFD9
  9416                           status	equ	0xFD8
  9417                           
  9418 ;; *************** function _SetDCPWM1 *****************
  9419 ;; Defined at:
  9420 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v1.38\sources\pic18\plib\PWM\pw1setdc.c"
  9421 ;; Parameters:    Size  Location     Type
  9422 ;;  dutycycle       2    0[COMRAM] unsigned int 
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;  DCycle          2    4[COMRAM] struct PWMDC
  9425 ;; Return value:  Size  Location     Type
  9426 ;;                  1    wreg      void 
  9427 ;; Registers used:
  9428 ;;		wreg, status,2, status,0
  9429 ;; Tracked objects:
  9430 ;;		On entry : 0/0
  9431 ;;		On exit  : 0/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9434 ;;      Params:         2       0       0       0       0       0       0       0       0
  9435 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9436 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9437 ;;      Totals:         6       0       0       0       0       0       0       0       0
  9438 ;;Total ram usage:        6 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; This function calls:
  9441 ;;		Nothing
  9442 ;; This function is called by:
  9443 ;;		_PWM_DutyCycle
  9444 ;; This function uses a non-reentrant model
  9445 ;;
  9446                           
  9447                           	psect	text42
  9448  0033F2                     __ptext42:
  9449                           	opt stack 0
  9450  0033F2                     _SetDCPWM1:
  9451                           	opt stack 29
  9452                           
  9453                           ;incstack = 0
  9454  0033F2  C001  F003         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  9455  0033F6  C002  F004         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  9456  0033FA  0E06               	movlw	6
  9457  0033FC                     u3685:
  9458  0033FC  90D8               	bcf	status,0,c
  9459  0033FE  3603               	rlcf	??_SetDCPWM1,f,c
  9460  003400  3604               	rlcf	??_SetDCPWM1+1,f,c
  9461  003402  2EE8               	decfsz	wreg,f,c
  9462  003404  D7FB               	goto	u3685
  9463  003406  C003  F005         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  9464  00340A  C004  F006         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  9465  00340E  C006  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  9466  003412  C005  F003         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  9467  003416  90D8               	bcf	status,0,c
  9468  003418  3203               	rrcf	??_SetDCPWM1,f,c
  9469  00341A  90D8               	bcf	status,0,c
  9470  00341C  3203               	rrcf	??_SetDCPWM1,f,c
  9471  00341E  0E30               	movlw	48
  9472  003420  1603               	andwf	??_SetDCPWM1,f,c
  9473  003422  50BD               	movf	4029,w,c	;volatile
  9474  003424  0BCF               	andlw	207
  9475  003426  1003               	iorwf	??_SetDCPWM1,w,c
  9476  003428  6EBD               	movwf	4029,c	;volatile
  9477  00342A  0012               	return		;funcret
  9478  00342C                     __end_of_SetDCPWM1:
  9479                           	opt stack 0
  9480                           tblptru	equ	0xFF8
  9481                           tblptrh	equ	0xFF7
  9482                           tblptrl	equ	0xFF6
  9483                           tablat	equ	0xFF5
  9484                           prodh	equ	0xFF4
  9485                           prodl	equ	0xFF3
  9486                           indf0	equ	0xFEF
  9487                           fsr0h	equ	0xFEA
  9488                           fsr0l	equ	0xFE9
  9489                           wreg	equ	0xFE8
  9490                           postinc1	equ	0xFE6
  9491                           postdec1	equ	0xFE5
  9492                           fsr1h	equ	0xFE2
  9493                           fsr1l	equ	0xFE1
  9494                           indf2	equ	0xFDF
  9495                           postinc2	equ	0xFDE
  9496                           postdec2	equ	0xFDD
  9497                           fsr2h	equ	0xFDA
  9498                           fsr2l	equ	0xFD9
  9499                           status	equ	0xFD8
  9500                           
  9501 ;; *************** function _Lcd_Init *****************
  9502 ;; Defined at:
  9503 ;;		line 63 in file "lcd.c"
  9504 ;; Parameters:    Size  Location     Type
  9505 ;;		None
  9506 ;; Auto vars:     Size  Location     Type
  9507 ;;		None
  9508 ;; Return value:  Size  Location     Type
  9509 ;;                  1    wreg      void 
  9510 ;; Registers used:
  9511 ;;		wreg, status,2, cstack
  9512 ;; Tracked objects:
  9513 ;;		On entry : 0/0
  9514 ;;		On exit  : 0/0
  9515 ;;		Unchanged: 0/0
  9516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9517 ;;      Params:         0       0       0       0       0       0       0       0       0
  9518 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9519 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9520 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9521 ;;Total ram usage:        1 bytes
  9522 ;; Hardware stack levels used:    1
  9523 ;; Hardware stack levels required when called:    2
  9524 ;; This function calls:
  9525 ;;		_Lcd_Cmd
  9526 ;;		_Lcd_Port
  9527 ;; This function is called by:
  9528 ;;		_main
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           	psect	text43
  9533  0030F0                     __ptext43:
  9534                           	opt stack 0
  9535  0030F0                     _Lcd_Init:
  9536                           	opt stack 28
  9537                           
  9538                           ;lcd.c: 65: Lcd_Port(0x00);
  9539                           
  9540                           ;incstack = 0
  9541  0030F0  0E00               	movlw	0
  9542  0030F2  EC96  F01A         	call	_Lcd_Port
  9543                           
  9544                           ;lcd.c: 66: _delay((unsigned long)((20)*(4000000/4000.0)));
  9545  0030F6  0E1A               	movlw	26
  9546  0030F8  6E04               	movwf	??_Lcd_Init& (0+255),c
  9547  0030FA  0EF8               	movlw	248
  9548  0030FC                     u3927:
  9549  0030FC  2EE8               	decfsz	wreg,f,c
  9550  0030FE  D7FE               	goto	u3927
  9551  003100  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  9552  003102  D7FC               	goto	u3927
  9553  003104  D000               	nop2	
  9554                           
  9555                           ;lcd.c: 67: Lcd_Cmd(0x03);
  9556  003106  0E03               	movlw	3
  9557  003108  EC0D  F01B         	call	_Lcd_Cmd
  9558                           
  9559                           ;lcd.c: 68: _delay((unsigned long)((5)*(4000000/4000.0)));
  9560  00310C  0E07               	movlw	7
  9561  00310E  6E04               	movwf	??_Lcd_Init& (0+255),c
  9562  003110  0E7D               	movlw	125
  9563  003112                     u3937:
  9564  003112  2EE8               	decfsz	wreg,f,c
  9565  003114  D7FE               	goto	u3937
  9566  003116  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  9567  003118  D7FC               	goto	u3937
  9568  00311A  F000               	nop	
  9569                           
  9570                           ;lcd.c: 69: Lcd_Cmd(0x03);
  9571  00311C  0E03               	movlw	3
  9572  00311E  EC0D  F01B         	call	_Lcd_Cmd
  9573                           
  9574                           ;lcd.c: 70: _delay((unsigned long)((11)*(4000000/4000.0)));
  9575  003122  0E0F               	movlw	15
  9576  003124  6E04               	movwf	??_Lcd_Init& (0+255),c
  9577  003126  0E48               	movlw	72
  9578  003128                     u3947:
  9579  003128  2EE8               	decfsz	wreg,f,c
  9580  00312A  D7FE               	goto	u3947
  9581  00312C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  9582  00312E  D7FC               	goto	u3947
  9583                           
  9584                           ;lcd.c: 71: Lcd_Cmd(0x03);
  9585  003130  0E03               	movlw	3
  9586  003132  EC0D  F01B         	call	_Lcd_Cmd
  9587                           
  9588                           ;lcd.c: 73: Lcd_Cmd(0x02);
  9589  003136  0E02               	movlw	2
  9590  003138  EC0D  F01B         	call	_Lcd_Cmd
  9591                           
  9592                           ;lcd.c: 74: Lcd_Cmd(0x02);
  9593  00313C  0E02               	movlw	2
  9594  00313E  EC0D  F01B         	call	_Lcd_Cmd
  9595                           
  9596                           ;lcd.c: 75: Lcd_Cmd(0x08);
  9597  003142  0E08               	movlw	8
  9598  003144  EC0D  F01B         	call	_Lcd_Cmd
  9599                           
  9600                           ;lcd.c: 76: Lcd_Cmd(0x00);
  9601  003148  0E00               	movlw	0
  9602  00314A  EC0D  F01B         	call	_Lcd_Cmd
  9603                           
  9604                           ;lcd.c: 77: Lcd_Cmd(0x0C);
  9605  00314E  0E0C               	movlw	12
  9606  003150  EC0D  F01B         	call	_Lcd_Cmd
  9607                           
  9608                           ;lcd.c: 78: Lcd_Cmd(0x00);
  9609  003154  0E00               	movlw	0
  9610  003156  EC0D  F01B         	call	_Lcd_Cmd
  9611                           
  9612                           ;lcd.c: 79: Lcd_Cmd(0x06);
  9613  00315A  0E06               	movlw	6
  9614  00315C  EC0D  F01B         	call	_Lcd_Cmd
  9615                           
  9616                           ;lcd.c: 80: PORTEbits.RE1=0;
  9617  003160  9284               	bcf	3972,1,c	;volatile
  9618  003162  0012               	return		;funcret
  9619  003164                     __end_of_Lcd_Init:
  9620                           	opt stack 0
  9621                           tblptru	equ	0xFF8
  9622                           tblptrh	equ	0xFF7
  9623                           tblptrl	equ	0xFF6
  9624                           tablat	equ	0xFF5
  9625                           prodh	equ	0xFF4
  9626                           prodl	equ	0xFF3
  9627                           indf0	equ	0xFEF
  9628                           fsr0h	equ	0xFEA
  9629                           fsr0l	equ	0xFE9
  9630                           wreg	equ	0xFE8
  9631                           postinc1	equ	0xFE6
  9632                           postdec1	equ	0xFE5
  9633                           fsr1h	equ	0xFE2
  9634                           fsr1l	equ	0xFE1
  9635                           indf2	equ	0xFDF
  9636                           postinc2	equ	0xFDE
  9637                           postdec2	equ	0xFDD
  9638                           fsr2h	equ	0xFDA
  9639                           fsr2l	equ	0xFD9
  9640                           status	equ	0xFD8
  9641                           
  9642 ;; *************** function _Lcd_Clear *****************
  9643 ;; Defined at:
  9644 ;;		line 36 in file "lcd.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;		None
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;		None
  9649 ;; Return value:  Size  Location     Type
  9650 ;;                  1    wreg      void 
  9651 ;; Registers used:
  9652 ;;		wreg, status,2, cstack
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9658 ;;      Params:         0       0       0       0       0       0       0       0       0
  9659 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9660 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9661 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9662 ;;Total ram usage:        0 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    2
  9665 ;; This function calls:
  9666 ;;		_Lcd_Cmd
  9667 ;; This function is called by:
  9668 ;;		_main
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           	psect	text44
  9673  00369E                     __ptext44:
  9674                           	opt stack 0
  9675  00369E                     _Lcd_Clear:
  9676                           	opt stack 28
  9677                           
  9678                           ;lcd.c: 38: Lcd_Cmd(0);
  9679                           
  9680                           ;incstack = 0
  9681  00369E  0E00               	movlw	0
  9682  0036A0  EC0D  F01B         	call	_Lcd_Cmd
  9683                           
  9684                           ;lcd.c: 39: Lcd_Cmd(1);
  9685  0036A4  0E01               	movlw	1
  9686  0036A6  EC0D  F01B         	call	_Lcd_Cmd
  9687  0036AA  0012               	return		;funcret
  9688  0036AC                     __end_of_Lcd_Clear:
  9689                           	opt stack 0
  9690                           tblptru	equ	0xFF8
  9691                           tblptrh	equ	0xFF7
  9692                           tblptrl	equ	0xFF6
  9693                           tablat	equ	0xFF5
  9694                           prodh	equ	0xFF4
  9695                           prodl	equ	0xFF3
  9696                           indf0	equ	0xFEF
  9697                           fsr0h	equ	0xFEA
  9698                           fsr0l	equ	0xFE9
  9699                           wreg	equ	0xFE8
  9700                           postinc1	equ	0xFE6
  9701                           postdec1	equ	0xFE5
  9702                           fsr1h	equ	0xFE2
  9703                           fsr1l	equ	0xFE1
  9704                           indf2	equ	0xFDF
  9705                           postinc2	equ	0xFDE
  9706                           postdec2	equ	0xFDD
  9707                           fsr2h	equ	0xFDA
  9708                           fsr2l	equ	0xFD9
  9709                           status	equ	0xFD8
  9710                           
  9711 ;; *************** function _Lcd_Cmd *****************
  9712 ;; Defined at:
  9713 ;;		line 27 in file "lcd.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;  a               1    wreg     unsigned char 
  9716 ;; Auto vars:     Size  Location     Type
  9717 ;;  a               1    2[COMRAM] unsigned char 
  9718 ;; Return value:  Size  Location     Type
  9719 ;;                  1    wreg      void 
  9720 ;; Registers used:
  9721 ;;		wreg, status,2, cstack
  9722 ;; Tracked objects:
  9723 ;;		On entry : 0/0
  9724 ;;		On exit  : 0/0
  9725 ;;		Unchanged: 0/0
  9726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9727 ;;      Params:         0       0       0       0       0       0       0       0       0
  9728 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9729 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9730 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9731 ;;Total ram usage:        2 bytes
  9732 ;; Hardware stack levels used:    1
  9733 ;; Hardware stack levels required when called:    1
  9734 ;; This function calls:
  9735 ;;		_Lcd_Port
  9736 ;; This function is called by:
  9737 ;;		_Lcd_Clear
  9738 ;;		_Lcd_Set_Cursor
  9739 ;;		_Lcd_Init
  9740 ;;		_Lcd_Shift_Right
  9741 ;;		_Lcd_Shift_Left
  9742 ;; This function uses a non-reentrant model
  9743 ;;
  9744                           
  9745                           	psect	text45
  9746  00361A                     __ptext45:
  9747                           	opt stack 0
  9748  00361A                     _Lcd_Cmd:
  9749                           	opt stack 27
  9750                           
  9751                           ;incstack = 0
  9752                           ;Lcd_Cmd@a stored from wreg
  9753  00361A  6E03               	movwf	Lcd_Cmd@a,c
  9754                           
  9755                           ;lcd.c: 29: PORTEbits.RE0 = 0;
  9756  00361C  9084               	bcf	3972,0,c	;volatile
  9757                           
  9758                           ;lcd.c: 30: Lcd_Port(a);
  9759  00361E  5003               	movf	Lcd_Cmd@a,w,c
  9760  003620  EC96  F01A         	call	_Lcd_Port
  9761                           
  9762                           ;lcd.c: 31: PORTEbits.RE2 = 1;
  9763  003624  8484               	bsf	3972,2,c	;volatile
  9764                           
  9765                           ;lcd.c: 32: _delay((unsigned long)((4)*(4000000/4000.0)));
  9766  003626  0E06               	movlw	6
  9767  003628  6E02               	movwf	??_Lcd_Cmd& (0+255),c
  9768  00362A  0E30               	movlw	48
  9769  00362C                     u3957:
  9770  00362C  2EE8               	decfsz	wreg,f,c
  9771  00362E  D7FE               	goto	u3957
  9772  003630  2E02               	decfsz	??_Lcd_Cmd& (0+255),f,c
  9773  003632  D7FC               	goto	u3957
  9774  003634  D000               	nop2	
  9775                           
  9776                           ;lcd.c: 33: PORTEbits.RE2 = 0;
  9777  003636  9484               	bcf	3972,2,c	;volatile
  9778  003638  0012               	return		;funcret
  9779  00363A                     __end_of_Lcd_Cmd:
  9780                           	opt stack 0
  9781                           tblptru	equ	0xFF8
  9782                           tblptrh	equ	0xFF7
  9783                           tblptrl	equ	0xFF6
  9784                           tablat	equ	0xFF5
  9785                           prodh	equ	0xFF4
  9786                           prodl	equ	0xFF3
  9787                           indf0	equ	0xFEF
  9788                           fsr0h	equ	0xFEA
  9789                           fsr0l	equ	0xFE9
  9790                           wreg	equ	0xFE8
  9791                           postinc1	equ	0xFE6
  9792                           postdec1	equ	0xFE5
  9793                           fsr1h	equ	0xFE2
  9794                           fsr1l	equ	0xFE1
  9795                           indf2	equ	0xFDF
  9796                           postinc2	equ	0xFDE
  9797                           postdec2	equ	0xFDD
  9798                           fsr2h	equ	0xFDA
  9799                           fsr2l	equ	0xFD9
  9800                           status	equ	0xFD8
  9801                           
  9802 ;; *************** function _Lcd_Port *****************
  9803 ;; Defined at:
  9804 ;;		line 5 in file "lcd.c"
  9805 ;; Parameters:    Size  Location     Type
  9806 ;;  a               1    wreg     unsigned char 
  9807 ;; Auto vars:     Size  Location     Type
  9808 ;;  a               1    0[COMRAM] unsigned char 
  9809 ;; Return value:  Size  Location     Type
  9810 ;;                  1    wreg      void 
  9811 ;; Registers used:
  9812 ;;		wreg
  9813 ;; Tracked objects:
  9814 ;;		On entry : 0/0
  9815 ;;		On exit  : 0/0
  9816 ;;		Unchanged: 0/0
  9817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9818 ;;      Params:         0       0       0       0       0       0       0       0       0
  9819 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9820 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9821 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9822 ;;Total ram usage:        1 bytes
  9823 ;; Hardware stack levels used:    1
  9824 ;; This function calls:
  9825 ;;		Nothing
  9826 ;; This function is called by:
  9827 ;;		_Lcd_Cmd
  9828 ;;		_Lcd_Init
  9829 ;;		_Lcd_Write_Char
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           	psect	text46
  9834  00352C                     __ptext46:
  9835                           	opt stack 0
  9836  00352C                     _Lcd_Port:
  9837                           	opt stack 27
  9838                           
  9839                           ;incstack = 0
  9840                           ;Lcd_Port@a stored from wreg
  9841  00352C  6E01               	movwf	Lcd_Port@a,c
  9842                           
  9843                           ;lcd.c: 7: if(a & 1)
  9844  00352E  A001               	btfss	Lcd_Port@a,0,c
  9845  003530  D002               	goto	l11
  9846                           
  9847                           ;lcd.c: 8: PORTDbits.RD4 = 1;
  9848  003532  8883               	bsf	3971,4,c	;volatile
  9849  003534  D001               	goto	l2510
  9850  003536                     l11:
  9851                           
  9852                           ;lcd.c: 9: else
  9853                           ;lcd.c: 10: PORTDbits.RD4 = 0;
  9854  003536  9883               	bcf	3971,4,c	;volatile
  9855  003538                     l2510:
  9856                           
  9857                           ;lcd.c: 12: if(a & 2)
  9858  003538  A201               	btfss	Lcd_Port@a,1,c
  9859  00353A  D002               	goto	l13
  9860                           
  9861                           ;lcd.c: 13: PORTDbits.RD5 = 1;
  9862  00353C  8A83               	bsf	3971,5,c	;volatile
  9863  00353E  D001               	goto	l2514
  9864  003540                     l13:
  9865                           
  9866                           ;lcd.c: 14: else
  9867                           ;lcd.c: 15: PORTDbits.RD5 = 0;
  9868  003540  9A83               	bcf	3971,5,c	;volatile
  9869  003542                     l2514:
  9870                           
  9871                           ;lcd.c: 17: if(a & 4)
  9872  003542  A401               	btfss	Lcd_Port@a,2,c
  9873  003544  D002               	goto	l15
  9874                           
  9875                           ;lcd.c: 18: PORTDbits.RD6 = 1;
  9876  003546  8C83               	bsf	3971,6,c	;volatile
  9877  003548  D001               	goto	l2518
  9878  00354A                     l15:
  9879                           
  9880                           ;lcd.c: 19: else
  9881                           ;lcd.c: 20: PORTDbits.RD6 = 0;
  9882  00354A  9C83               	bcf	3971,6,c	;volatile
  9883  00354C                     l2518:
  9884                           
  9885                           ;lcd.c: 22: if(a & 8)
  9886  00354C  A601               	btfss	Lcd_Port@a,3,c
  9887  00354E  D002               	goto	l17
  9888                           
  9889                           ;lcd.c: 23: PORTDbits.RD7 = 1;
  9890  003550  8E83               	bsf	3971,7,c	;volatile
  9891  003552  0012               	return	
  9892  003554                     l17:
  9893                           
  9894                           ;lcd.c: 24: else
  9895                           ;lcd.c: 25: PORTDbits.RD7 = 0;
  9896  003554  9E83               	bcf	3971,7,c	;volatile
  9897  003556  0012               	return	
  9898  003558                     __end_of_Lcd_Port:
  9899                           	opt stack 0
  9900                           tblptru	equ	0xFF8
  9901                           tblptrh	equ	0xFF7
  9902                           tblptrl	equ	0xFF6
  9903                           tablat	equ	0xFF5
  9904                           prodh	equ	0xFF4
  9905                           prodl	equ	0xFF3
  9906                           indf0	equ	0xFEF
  9907                           fsr0h	equ	0xFEA
  9908                           fsr0l	equ	0xFE9
  9909                           wreg	equ	0xFE8
  9910                           postinc1	equ	0xFE6
  9911                           postdec1	equ	0xFE5
  9912                           fsr1h	equ	0xFE2
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           postdec2	equ	0xFDD
  9917                           fsr2h	equ	0xFDA
  9918                           fsr2l	equ	0xFD9
  9919                           status	equ	0xFD8
  9920                           
  9921 ;; *************** function _Init_ADC *****************
  9922 ;; Defined at:
  9923 ;;		line 5 in file "ADC.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;		None
  9926 ;; Auto vars:     Size  Location     Type
  9927 ;;		None
  9928 ;; Return value:  Size  Location     Type
  9929 ;;                  1    wreg      void 
  9930 ;; Registers used:
  9931 ;;		wreg, status,2
  9932 ;; Tracked objects:
  9933 ;;		On entry : 0/0
  9934 ;;		On exit  : 0/0
  9935 ;;		Unchanged: 0/0
  9936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9937 ;;      Params:         0       0       0       0       0       0       0       0       0
  9938 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9939 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9940 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9941 ;;Total ram usage:        0 bytes
  9942 ;; Hardware stack levels used:    1
  9943 ;; This function calls:
  9944 ;;		Nothing
  9945 ;; This function is called by:
  9946 ;;		_main
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           	psect	text47
  9951  003582                     __ptext47:
  9952                           	opt stack 0
  9953  003582                     _Init_ADC:
  9954                           	opt stack 30
  9955                           
  9956                           ;ADC.c: 7: ADCON1bits.PCFG=0b1100;
  9957                           
  9958                           ;incstack = 0
  9959  003582  50C1               	movf	4033,w,c	;volatile
  9960  003584  0BF0               	andlw	-16
  9961  003586  090C               	iorlw	12
  9962  003588  6EC1               	movwf	4033,c	;volatile
  9963                           
  9964                           ;ADC.c: 8: ADCON0bits.CHS = 0b0000;
  9965  00358A  94C2               	bcf	4034,2,c	;volatile
  9966  00358C  96C2               	bcf	4034,3,c	;volatile
  9967  00358E  98C2               	bcf	4034,4,c	;volatile
  9968  003590  9AC2               	bcf	4034,5,c	;volatile
  9969                           
  9970                           ;ADC.c: 10: TRISAbits.TRISA0=TRISAbits.TRISA1=TRISAbits.TRISA3=1;
  9971  003592  8692               	bsf	3986,3,c	;volatile
  9972  003594  8292               	bsf	3986,1,c	;volatile
  9973  003596  8092               	bsf	3986,0,c	;volatile
  9974                           
  9975                           ;ADC.c: 11: ADCON0bits.ADON = 1;
  9976  003598  80C2               	bsf	4034,0,c	;volatile
  9977                           
  9978                           ;ADC.c: 12: ADCON2bits.ADFM=1;
  9979  00359A  8EC0               	bsf	4032,7,c	;volatile
  9980                           
  9981                           ;ADC.c: 13: ADCON2bits.ADCS=0b110;
  9982  00359C  50C0               	movf	4032,w,c	;volatile
  9983  00359E  0BF8               	andlw	-8
  9984  0035A0  0906               	iorlw	6
  9985  0035A2  6EC0               	movwf	4032,c	;volatile
  9986                           
  9987                           ;ADC.c: 14: ADCON2bits.ACQT = 0b111;
  9988  0035A4  86C0               	bsf	4032,3,c	;volatile
  9989  0035A6  88C0               	bsf	4032,4,c	;volatile
  9990  0035A8  8AC0               	bsf	4032,5,c	;volatile
  9991  0035AA  0012               	return	
  9992  0035AC                     __end_of_Init_ADC:
  9993                           	opt stack 0
  9994                           tblptru	equ	0xFF8
  9995                           tblptrh	equ	0xFF7
  9996                           tblptrl	equ	0xFF6
  9997                           tablat	equ	0xFF5
  9998                           prodh	equ	0xFF4
  9999                           prodl	equ	0xFF3
 10000                           indf0	equ	0xFEF
 10001                           fsr0h	equ	0xFEA
 10002                           fsr0l	equ	0xFE9
 10003                           wreg	equ	0xFE8
 10004                           postinc1	equ	0xFE6
 10005                           postdec1	equ	0xFE5
 10006                           fsr1h	equ	0xFE2
 10007                           fsr1l	equ	0xFE1
 10008                           indf2	equ	0xFDF
 10009                           postinc2	equ	0xFDE
 10010                           postdec2	equ	0xFDD
 10011                           fsr2h	equ	0xFDA
 10012                           fsr2l	equ	0xFD9
 10013                           status	equ	0xFD8
 10014                           tblptru	equ	0xFF8
 10015                           tblptrh	equ	0xFF7
 10016                           tblptrl	equ	0xFF6
 10017                           tablat	equ	0xFF5
 10018                           prodh	equ	0xFF4
 10019                           prodl	equ	0xFF3
 10020                           indf0	equ	0xFEF
 10021                           fsr0h	equ	0xFEA
 10022                           fsr0l	equ	0xFE9
 10023                           wreg	equ	0xFE8
 10024                           postinc1	equ	0xFE6
 10025                           postdec1	equ	0xFE5
 10026                           fsr1h	equ	0xFE2
 10027                           fsr1l	equ	0xFE1
 10028                           indf2	equ	0xFDF
 10029                           postinc2	equ	0xFDE
 10030                           postdec2	equ	0xFDD
 10031                           fsr2h	equ	0xFDA
 10032                           fsr2l	equ	0xFD9
 10033                           status	equ	0xFD8
 10034                           
 10035                           	psect	rparam
 10036  0000                     tblptru	equ	0xFF8
 10037                           tblptrh	equ	0xFF7
 10038                           tblptrl	equ	0xFF6
 10039                           tablat	equ	0xFF5
 10040                           prodh	equ	0xFF4
 10041                           prodl	equ	0xFF3
 10042                           indf0	equ	0xFEF
 10043                           fsr0h	equ	0xFEA
 10044                           fsr0l	equ	0xFE9
 10045                           wreg	equ	0xFE8
 10046                           postinc1	equ	0xFE6
 10047                           postdec1	equ	0xFE5
 10048                           fsr1h	equ	0xFE2
 10049                           fsr1l	equ	0xFE1
 10050                           indf2	equ	0xFDF
 10051                           postinc2	equ	0xFDE
 10052                           postdec2	equ	0xFDD
 10053                           fsr2h	equ	0xFDA
 10054                           fsr2l	equ	0xFD9
 10055                           status	equ	0xFD8


Data Sizes:
    Strings     34
    Constant    118
    Data        2
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    156     159
    BANK1           256    240     244
    BANK2           256    240     240
    BANK3           256    240     240
    BANK4           256    240     240
    BANK5           256    240     240
    BANK6           256    240     240
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(COMRAM[20]), Lcd_Write_Float@s(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    defuzzy@mf	PTR  size(2) Largest target is 120
		 -> fuzzy_system_single@overall_out_mf(BANK5[120]), fuzzy_system@overall_out_mf(BANK0[120]), 

    defuzzy@x	PTR  size(2) Largest target is 120
		 -> fuzzy_system_single@y(BANK6[120]), fuzzy_system@y(BANK0[120]), 

    out_mf@result	PTR  size(2) Largest target is 120
		 -> fuzzy_system_single@overall_out_mf(BANK5[120]), fuzzy_system@overall_out_mf(BANK0[120]), 

    out_mf@z	PTR  size(2) Largest target is 120
		 -> fuzzy_system_single@qualified_cons_mf3(BANK5[120]), fuzzy_system@qualified_cons_mf3(BANK0[120]), 

    out_mf@y	PTR  size(2) Largest target is 120
		 -> fuzzy_system_single@qualified_cons_mf2(BANK4[120]), fuzzy_system@qualified_cons_mf2(BANK0[120]), 

    out_mf@x	PTR  size(2) Largest target is 120
		 -> fuzzy_system_single@qualified_cons_mf1(BANK4[120]), fuzzy_system@qualified_cons_mf1(BANK0[120]), 

    qualified@y	PTR  size(2) Largest target is 120
		 -> fuzzy_system_single@qualified_cons_mf3(BANK5[120]), fuzzy_system_single@qualified_cons_mf2(BANK4[120]), fuzzy_system_single@qualified_cons_mf1(BANK4[120]), fuzzy_system@qualified_cons_mf3(BANK0[120]), 
		 -> fuzzy_system@qualified_cons_mf2(BANK0[120]), fuzzy_system@qualified_cons_mf1(BANK0[120]), 

    qualified@x	PTR  size(2) Largest target is 120
		 -> fuzzy_system_single@cons_mf3(BANK3[120]), fuzzy_system_single@cons_mf2(BANK3[120]), fuzzy_system_single@cons_mf1(BANK2[120]), fuzzy_system@cons_mf3(BANK0[120]), 
		 -> fuzzy_system@cons_mf2(BANK0[120]), fuzzy_system@cons_mf1(BANK0[120]), 

    trap_mf@t_value	PTR  size(2) Largest target is 120
		 -> fuzzy_system_single@cons_mf3(BANK3[120]), fuzzy_system_single@cons_mf2(BANK3[120]), fuzzy_system_single@cons_mf1(BANK2[120]), fuzzy_system_single@ante_mf3(BANK2[120]), 
		 -> fuzzy_system_single@ante_mf2(BANK1[120]), fuzzy_system_single@ante_mf1(BANK1[120]), fuzzy_system@cons_mf3(BANK0[120]), fuzzy_system@cons_mf2(BANK0[120]), 
		 -> fuzzy_system@cons_mf1(BANK0[120]), fuzzy_system@ante_mf3(BANK0[120]), fuzzy_system@ante_mf2(BANK0[120]), fuzzy_system@ante_mf1(BANK0[120]), 

    trap_mf@x	PTR  size(2) Largest target is 120
		 -> fuzzy_system_single@y(BANK6[120]), fuzzy_system_single@x(BANK6[120]), fuzzy_system@y(BANK0[120]), fuzzy_system@x(BANK0[120]), 

    linspace@x	PTR  size(2) Largest target is 120
		 -> fuzzy_system_single@y(BANK6[120]), fuzzy_system_single@x(BANK6[120]), fuzzy_system@y(BANK0[120]), fuzzy_system@x(BANK0[120]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[3]), STR_5(CODE[7]), STR_4(CODE[7]), STR_3(CODE[7]), 
		 -> Lcd_Write_Integer@s(COMRAM[20]), Lcd_Write_Float@s(BANK0[20]), 


Critical Paths under _main in COMRAM

    _main->_temp_sense
    _temp_sense->_Lcd_Write_Float
    _Lcd_Write_Float->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _fuzzy_system_single->_trapezoidal
    _trap_mf->_trapezoidal
    _trapezoidal->___ftdiv
    _qualified->___ftge
    _out_mf->___ftge
    ___ftge->___wmul
    _linspace->___ftdiv
    ___awtoft->___ftpack
    _defuzzy->___ftdiv
    ___wmul->___awdiv
    ___ftdiv->___ftadd
    ___ftadd->_fround
    _PWM_init->_OpenPWM1
    _PWM_init->_OpenTimer2
    _PWM_DutyCycle->___fttol
    ___lbtoft->___ftpack
    ___fttol->_scale
    ___ftmul->___wmul
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_fuzzy_system_single
    _temp_sense->_Lcd_Write_Float
    _Lcd_Write_Float->_sprintf
    _fuzzy_system_single->_trap_mf

Critical Paths under _main in BANK1

    _main->_fuzzy_system_single

Critical Paths under _main in BANK2

    _main->_fuzzy_system_single

Critical Paths under _main in BANK3

    _main->_fuzzy_system_single

Critical Paths under _main in BANK4

    _main->_fuzzy_system_single

Critical Paths under _main in BANK5

    _main->_fuzzy_system_single

Critical Paths under _main in BANK6

    _main->_fuzzy_system_single

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0  268473
                                            150 BANK0      6     6      0
                           _Init_ADC
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                    _Lcd_Write_Float
                   _Lcd_Write_String
                      _PWM_DutyCycle
                           _PWM_init
                            ___fttol
                _fuzzy_system_single
                           _mcu_init
                         _temp_sense
 ---------------------------------------------------------------------------------
 (1) _temp_sense                                          16    13      3   79890
                                             79 COMRAM    16    13      3
                 _ADC_select_channel
                     _Lcd_Set_Cursor
                    _Lcd_Write_Float
                   _Lcd_Write_String
                           _Leer_ADC
                           ___awtoft
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) _Leer_ADC                                             4     2      2      70
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Float                                     23    20      3   67355
                                             76 COMRAM     3     0      3
                                             23 BANK0     20    20      0
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             44    37      7   66487
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   15852
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   15654
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5051
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2     652
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     178
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     572
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _ADC_select_channel                                   1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _mcu_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fuzzy_system_single                               1457  1454      3  110911
                                             90 COMRAM     3     0      3
                                            138 BANK0     12    12      0
                                              0 BANK1    240   240      0
                                              0 BANK2    240   240      0
                                              0 BANK3    240   240      0
                                              0 BANK4    240   240      0
                                              0 BANK5    240   240      0
                                              0 BANK6    240   240      0
                            _defuzzy
                           _linspace
                             _out_mf
                          _qualified
                            _trap_mf
                        _trapezoidal
 ---------------------------------------------------------------------------------
 (2) _trap_mf                                            138   122     16   26842
                                              0 BANK0    138   122     16
                             ___wmul
                        _trapezoidal
 ---------------------------------------------------------------------------------
 (2) _trapezoidal                                         18     3     15   14677
                                             72 COMRAM    18     3     15
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftneg
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     621
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _qualified                                           12     5      7   11720
                                             29 COMRAM    12     5      7
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _out_mf                                              10     2      8   11453
                                             29 COMRAM    10     2      8
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    3080
                                             20 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _linspace                                            14     4     10   24256
                                             72 COMRAM    14     4     10
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2495
                                              8 COMRAM     4     1      3
                           _Leer_ADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _defuzzy                                             15    11      4   21111
                                             72 COMRAM    15    11      4
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    7199
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3426
                                             57 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4754
                                             45 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             ___wmul (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM_init                                             1     1      0      88
                                              1 COMRAM     1     1      0
                           _OpenPWM1
                         _OpenTimer2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer2                                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenPWM1                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle                                        5     5      0    8057
                                             57 COMRAM     5     5      0
                          _SetDCPWM1
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2170
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     572
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5136
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _SetDCPWM1                                            6     4      2     132
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0     110
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_ADC
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Float
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _Leer_ADC (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _PWM_DutyCycle
     _SetDCPWM1
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _Leer_ADC (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lbtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lbtoft
       ___ftpack
   _PWM_init
     _OpenPWM1
     _OpenTimer2
   ___fttol
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _Leer_ADC (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lbtoft (ARG)
       ___ftpack
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _fuzzy_system_single
     _defuzzy
       ___ftadd
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _Leer_ADC (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _linspace
       ___awtoft
         _Leer_ADC (ARG)
         ___ftpack (ARG)
       ___ftadd
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _Leer_ADC (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _out_mf
       ___ftge
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _qualified
       ___ftge
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _trap_mf
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _trapezoidal
         ___ftadd
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _Leer_ADC (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _Leer_ADC (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   _Leer_ADC (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _trapezoidal
       ___ftadd
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _Leer_ADC (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftge
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _mcu_init
   _temp_sense
     _ADC_select_channel
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Float
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _Leer_ADC (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _Leer_ADC (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   _Leer_ADC (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___lbtoft (ARG)
             ___ftpack
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _Leer_ADC (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _Leer_ADC
     ___awtoft
       _Leer_ADC (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___awtoft (ARG)
         _Leer_ADC (ARG)
         ___ftpack (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _Leer_ADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _Leer_ADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _Leer_ADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _Leer_ADC (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100     F0      F0      17       93.8%
BITBANK5           100      0       0      14        0.0%
BANK5              100     F0      F0      15       93.8%
BITBANK4           100      0       0      12        0.0%
BANK4              100     F0      F0      13       93.8%
BITBANK3           100      0       0      10        0.0%
BANK3              100     F0      F0      11       93.8%
BITBANK2           100      0       0       8        0.0%
BANK2              100     F0      F0       9       93.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     F0      F4       7       95.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9C      9F       5       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     6A2      20        0.0%
DATA                 0      0     6A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Nov 03 15:08:44 2016

               __size_of_PWM_DutyCycle 005A                                      _i 00FC  
                                   l11 3536                                     l13 3540  
                                   l15 354A                                     l17 3554  
                         ___awdiv@sign 000C                    ___wmul@multiplicand 0011  
                          __CFG_BORV$3 000000                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                           ___ftadd@exp1 0039  
                         ___ftadd@exp2 0038                            _trapezoidal 1E78  
                         ___ftadd@sign 0037                       ?_Lcd_Write_Float 004D  
                                  l101 34A6                                    l201 207C  
                                  l210 24F8                                    l122 2DB8  
                                  l108 2D36                                    l217 2C4A  
                                  l226 1C30                                    l139 2748  
                                  l341 0E08                                    l199 1F70  
                                  l641 2EA2                                    l609 286C  
                                  l713 261A                                    l706 258C  
                                  l707 25B4                                    l397 366E  
                                  l398 3670                                    l664 20FA  
                                  l738 35E8                                    l668 2124  
                                  l679 21D4                                    l688 21F0  
                                  l699 2D00                                    l788 30DE  
                                  l798 329A                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                           __CFG_CPD$OFF 000000  
                         __CFG_BOR$OFF 000000                           ___awmod@sign 0006  
                                  wreg 000FE8                           __CFG_LVP$OFF 000000  
                         ___ftdiv@cntr 0043                           ___ftdiv@sign 0048  
                         qualified@min 0025                           __CFG_WDT$OFF 000000  
                                 l3002 2FE6                                   l3016 29AA  
                                 l3120 31A2                                   l3200 0B34  
                                 l3034 2A10                                   l3210 0BBC  
                                 l3202 0B64                                   l3130 08C8  
                                 l3052 2A60                                   l3044 2A38  
                                 l3116 316E                                   l3300 0F96  
                                 l3204 0B7A                                   l3124 08AA  
                                 l2510 3538                                   l3046 2A44  
                                 l3038 2A20                                   l3062 3090  
                                 l3230 0CAC                                   l3214 0BE2  
                                 l3302 0FA4                                   l3142 0932  
                                 l3048 2A4A                                   l3064 309C  
                                 l3320 1014                                   l3312 0FE8  
                                 l3224 0C40                                   l3160 09A8  
                                 l3152 095E                                   l3144 0948  
                                 l2514 3542                                   l2610 2AC2  
                                 l3074 30D0                                   l3066 30A0  
                                 l3090 328C                                   l3082 3258  
                                 l3242 0CF2                                   l3170 09EE  
                                 l3154 098E                                   l3138 08F8  
                                 l2604 2A9A                                   l3500 2B7A  
                                 l3084 3264                                   l3340 10AA  
                                 l3332 105A                                   l3228 0CA6  
                                 l3148 0958                                   l2518 354C  
                                 l2542 2132                                   l3510 2C44  
                                 l3086 3268                                   l2710 3210  
                                 l2702 31F6                                   l3350 1154  
                                 l3318 100E                                   l3270 0E0C  
                                 l3246 0D16                                   l2480 2E3C  
                                 l2624 2AF4                                   l2536 2108  
                                 l3520 19EA                                   l3504 2B8A  
                                 l3440 2D54                                   l3408 338A  
                                 l3096 32B2                                   l3352 1158  
                                 l3336 107E                                   l3264 0DD6  
                                 l3248 0D1C                                   l3256 0DB0  
                                 l2490 2E98                                   l2482 2E5A  
                                 l2474 2E24                                   l2634 2B1C  
                                 l2570 21A0                                   l3450 2D86  
                                 l3442 2D5E                                   l3098 32BE  
                                 l2722 323C                                   l2714 3224  
                                 l2706 3204                                   l2802 19AA  
                                 l3346 10D0                                   l3282 0E8C  
                                 l3266 0DEA                                   l3258 0DBE  
                                 l3194 0AF8                                   l3186 0A90  
                                 l3354 116E                                   l2628 2B04  
                                 l2564 2184                                   l3540 228E  
                                 l3532 1BD6                                   l3508 2C18  
                                 l3452 2D90                                   l3444 2D68  
                                 l3436 2D40                                   l2900 27D4  
                                 l2660 300E                                   l2708 320C  
                                 l3292 0F70                                   l3356 118A  
                                 l2486 2E70                                   l2478 2E32  
                                 l2638 2B2C                                   l2566 218E  
                                 l2558 2162                                   l3550 2328  
                                 l3470 2968                                   l3526 1AE0  
                                 l3366 1EB0                                   l3454 2D9A  
                                 l3446 2D72                                   l3438 2D4A  
                                 l3462 2DC2                                   l2830 2552  
                                 l2670 3030                                   l2654 2FFE  
                                 l2718 322E                                   l2814 3650  
                                 l3294 0F7E                                   l3278 0E3A  
                                 l3198 0B1E                                   l2488 2E8E  
                                 l2584 220C                                   l2576 21C2  
                                 l2568 2198                                   l3552 2330  
                                 l3544 229E                                   l3384 20A8  
                                 l3376 1FBC                                   l3456 2DA4  
                                 l3448 2D7C                                   l2920 2832  
                                 l2824 2526                                   l2594 223C  
                                 l2578 21CC                                   l3562 238E  
                                 l3466 2888                                   l3490 245C  
                                 l3474 23CE                                   l3458 2DAE  
                                 l2930 285A                                   l2666 3024  
                                 l2682 3056                                   l2940 2C74  
                                 l3556 2340                                   l3396 3478  
                                 l3484 243C                                   l2932 2866  
                                 l2924 2842                                   l2908 2804  
                                 l2860 25E0                                   l2668 302C  
                                 l2764 1E38                                   l2756 1D78  
                                 l3486 2446                                   l3478 23E4  
                                 l2870 2608                                   l2686 3064  
                                 l2678 304C                                   l2880 2774  
                                 l2872 2614                                   l2864 25F0  
                                 l2784 17B6                                   l2946 2C9C  
                                 l2698 31EA                                   l2778 1712  
                                 l2796 1906                                   l2788 17DA  
                                 l2966 2CDA                                   l2886 2792  
                                 l3678 272A                                   l3766 2EEE  
                                 l2992 2F8A                                   l2984 33C8  
                                 l2996 2FBA                                   STR_1 0891  
                                 STR_2 088C                                   STR_3 0885  
                                 STR_4 087E                                   STR_5 0877  
                                 STR_6 0896                                   u2301 2AAA  
                                 u2071 20C6                                   u2081 20DA  
                                 u3220 0E00                                   u3060 0A2E  
                                 u2281 2A82                                   u3065 0A24  
                                 u2711 2C5C                                   u2551 250A  
                                 u2811 298E                                   u2731 2C84  
                                 u2571 2536                                   u3700 2748  
                                 u2830 29C8                                   u3570 19E8  
                                 u2835 29C0                                   u2960 319A  
                                 u2970 31CE                                   u3907 3448  
                                 u3685 33FC                                   u3917 345A  
                                 u3927 30FC                                   u2967 3190  
                                 u3937 3112                                   u2977 31C4  
                                 u3947 3128                                   u3957 362C  
                                 u3897 2730                                   _TMR2 000FCC  
                    ?_Lcd_Write_String 0005                                   _main 2EC2  
                         ___ftpack@arg 0001                           ___ftpack@exp 0004  
                                 fsr0h 000FEA                                   indf0 000FEF  
                                 fsr0l 000FE9                                   fsr2h 000FDA  
                                 fsr1l 000FE1                                   indf2 000FDF  
                                 fsr2l 000FD9                                   prodh 000FF4  
                                 prodl 000FF3                                   start 0000  
                   ??_Lcd_Write_String 0007                          __CFG_IESO$OFF 000000  
                         _sprintf$1526 0060                        __end_of_Lcd_Cmd 363A  
                        __CFG_MCLRE$ON 000000                           ___ftmul@cntr 0022  
                         ___param_bank 000010                           ___ftmul@sign 0023  
                         ___fttol@exp1 0039                           ___fttol@lval 0035  
                        __CFG_PLLDIV$1 000000                         __CFG_CCP2MX$ON 000000  
                                ?_main 0001                        __end_of___awdiv 306E  
                      __end_of___ftadd 2262                        __end_of___awmod 3246  
                      __end_of___ftdiv 2D32                        __end_of___ftneg 35F6  
                      __end_of___lldiv 30F0                        __end_of___ftmul 2B66  
                      ___awdiv@divisor 0009                        __end_of___llmod 32AC  
                      __end_of___ftsub 33F2                        __end_of___fttol 2A72  
                                _T2CON 000FCA                         __CFG_DEBUG$OFF 000000  
                      ___awdiv@counter 000B                                  _PORTA 000F80  
                                _PORTB 000F81                                  _PORTC 000F82  
                                _PORTD 000F83                                  _PORTE 000F84  
                        __CFG_USBDIV$2 000000                __size_of_Lcd_Set_Cursor 0050  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                         ___lltoft@exp 0011                        __end_of_defuzzy 23C4  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                       __CFG_EBTRB$OFF 000000                          ___awtoft@sign 000C  
                        _PWM_DutyCycle 3308                        __end_of_dpowers 0829  
                         out_mf@result 001E                                  _scale 15DE  
                      __end_of_isdigit 3658                          ___ftpack@sign 0005  
          __size_of_ADC_select_channel 00E2                                  tablat 000FF5  
                     __end_of_PWM_init 368C                        __end_of_trap_mf 24FA  
                                status 000FD8                        __end_of_sprintf 1198  
                       __CFG_ICPRT$OFF 000000                       __end_of_Lcd_Init 3164  
                     __end_of_Lcd_Port 3558                        __initialization 34CE  
                     __end_of_Leer_ADC 34CE                           __end_of_main 2F5A  
                     __end_of_Init_ADC 35AC                       __end_of_OpenPWM1 369E  
                               ??_main 0060                          ___fttol@sign1 0034  
                   __size_of_Lcd_Clear 000E                          __activetblptr 000002  
                 __size_of__tdiv_to_l_ 0132                         ?_PWM_DutyCycle 0001  
                     ___llmod@dividend 000E                                 ?_scale 0024  
                               _ADRESH 000FC4                          linspace@start 004B  
                               _ADRESL 000FC3                                 _CCPR1L 000FBE  
                     ___awdiv@dividend 0007                       __end_of___awtoft 349C  
                     __end_of___ftpack 2EC2                       __end_of___lbtoft 361A  
                     __end_of___lltoft 3308                             _OpenTimer2 3658  
                            ??_Lcd_Cmd 0002                     __size_of_SetDCPWM1 003A  
              __size_of_Lcd_Write_Char 0038                         __CFG_XINST$OFF 000000  
                     __end_of__powers_ 0877                                 ___ftge 2F5A  
                               ___wmul 35AC                              ??___awdiv 000B  
                            ??___ftadd 0034                         __CFG_STVREN$ON 000000  
                            ??___awmod 0005                              ??___ftdiv 0040  
                            ??___ftneg 0004                              ??___lldiv 0009  
                            ??___ftmul 001B                              ??___llmod 0016  
                            ??___ftsub 0040                              ??___fttol 002F  
                     __end_of_mcu_init 3582                       OpenTimer2@config 0001  
                               _fround 1C32                           trapezoidal@a 0049  
                         trapezoidal@b 004C                           trapezoidal@c 004F  
                         trapezoidal@d 0052                           trapezoidal@x 0055  
                     ___awdiv@quotient 000D                        ___awmod@divisor 0003  
                      ___awmod@counter 0005                              ??_defuzzy 004D  
                     __end_of_linspace 297E                                 _out_mf 19CE  
                ___ftmul@f3_as_product 001F           __size_of_fuzzy_system_single 0446  
                            ??_isdigit 0001                           __mediumconst 0000  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                       Lcd_Write_Float@f 004D  
                     Lcd_Write_Float@s 0077                              ??_trap_mf 005B  
                            ??_sprintf 0047                        Lcd_Set_Cursor@a 0005  
                      Lcd_Set_Cursor@b 0004                        Lcd_Set_Cursor@y 0007  
                      Lcd_Set_Cursor@z 0006                             __accesstop 0060  
              __end_of__initialization 34F4                        __CFG_PBADEN$OFF 000000  
                           ___ftadd@f1 002E                             ___ftadd@f2 0031  
                           ___ftge@ff1 0015                             ___ftge@ff2 0018  
                    __end_of_Lcd_Clear 36AC                          ___rparam_used 000001  
                           ___ftdiv@f1 003A                             ___ftdiv@f2 003D  
                           ___ftdiv@f3 0044                             ___ftneg@f1 0001  
                           ___awtoft@c 0009                             ___lbtoft@c 000C  
                           ___ftmul@f1 0015                             ___ftmul@f2 0018  
                           ___ftsub@f1 003A                             ___ftsub@f2 003D  
                           ___fttol@f1 002B                         __pcstackCOMRAM 0001  
                         __pidataBANK1 36AC                             ___lltoft@c 0009  
                        __end_of_scale 19CE                           ?_trapezoidal 0049  
                    __end_of_SetDCPWM1 342C                 PWM_DutyCycle@DutyCycle 003A  
                            ?_PWM_init 0001                         _Lcd_Set_Cursor 3362  
                           __div_to_l_ 2756                            linspace@end 004E  
                      ??_PWM_DutyCycle 003A                              ?_Lcd_Init 0001  
                            ?_Lcd_Port 0001                        __div_to_l_@exp1 000C  
                      __div_to_l_@cntr 000B                                ??_scale 0027  
                      __div_to_l_@quot 0007                              ?_Leer_ADC 0001  
                           __pbssBANK0 00FC                             __pbssBANK1 01F0  
                          ?_OpenTimer2 0001                              ?_Init_ADC 0001  
                            ?_OpenPWM1 0001                          __div_to_l_@f1 0001  
                        __div_to_l_@f2 0004                                ?___ftge 0015  
                              ?___wmul 000F                                _CCP1CON 000FBD  
                              ?_fround 0024              __size_of_Lcd_Write_String 0072  
                            ?___awtoft 0009                              ?___ftpack 0001  
                            ?___lbtoft 0009                 __end_of_Lcd_Set_Cursor 33B2  
                              ?_out_mf 001E                              ?___lltoft 0009  
                           ??_PWM_init 0002              fuzzy_system_single@output 00F3  
                   __size_of_qualified 00E6                             ??_Lcd_Init 0004  
                           ??_Lcd_Port 0001               __size_of_Lcd_Write_Float 002E  
                           ??_Leer_ADC 0003                             ??_Init_ADC 0001  
             fuzzy_system_single@input 005B                        __CFG_VREGEN$OFF 000000  
                       _Lcd_Write_Char 342C                                _Lcd_Cmd 361A  
                            ?_mcu_init 0001                             ??_OpenPWM1 0001  
                            ?_linspace 0049                      __end_of__npowers_ 0850  
                              __Hparam 0000                             _scale$1525 0027  
                              __Lparam 0000                   fuzzy_system_single@x 0600  
                 fuzzy_system_single@y 0678                        __size_of___ftge 0090  
                              ___awdiv 2FEA                                ___ftadd 20B6  
                              ___awmod 31D6                                ___ftdiv 2C4C  
                              ___ftneg 35D2                                ___lldiv 306E  
                      __size_of___wmul 0026                                ___ftmul 2A72  
                              ___llmod 3246                                ___ftsub 33B2  
                              ___fttol 297E                           __psmallconst 0800  
                              __pcinit 34CE                             ??___awtoft 000C  
                           ??___ftpack 0006                             ??___lbtoft 000C  
                      __size_of_fround 0246                                __ramtop 0800  
                      ?_Lcd_Set_Cursor 0004                    __size_of_OpenTimer2 001C  
                              _defuzzy 2262                             ??___lltoft 000D  
                              __ptext0 2EC2                                __ptext1 262C  
                              __ptext2 349C                                __ptext3 34FE  
                              __ptext4 089A                                __ptext5 15DE  
                              __ptext6 363A                                __ptext7 1C32  
                              __ptext8 31D6                                __ptext9 2FEA  
                      __size_of_out_mf 0264                            ?__div_to_l_ 0001  
                              _countup 01F2                                _dpowers 0801  
                            _T2CONbits 000FCA                                _isdigit 363A  
                     ___awmod@dividend 0001                          trapezoidal@ux 0058  
           __end_of_ADC_select_channel 2E14                                _trap_mf 23C4  
                              _sprintf 089A                 __end_of_Lcd_Write_Char 3464  
                 end_of_initialization 34F4                             ??_mcu_init 0001  
                        __Lmediumconst 0000                        temp_sense@canal 0054  
                  _fuzzy_system_single 1198                             ??_linspace 0053  
                temp_sense@temperatura 005B                         PWM_init@period 0002  
                      ___lldiv@divisor 0005                        ___lldiv@counter 000D  
                    __end_of_qualified 2C4C                            temp_sense@i 005E  
                              postdec1 000FE5                                postdec2 000FDD  
                              out_mf@i 0026                                out_mf@x 0020  
                              out_mf@y 0022                                out_mf@z 0024  
                              postinc1 000FE6                                postinc2 000FDE  
                            Lcd_Port@a 0001                             _temp_sense 262C  
                           defuzzy@out 004D                         __tdiv_to_l_@f1 0001  
                       __tdiv_to_l_@f2 0004                          ??__tdiv_to_l_ 0007  
                            _PORTDbits 000F83                              _PORTEbits 000F84  
                 ?_fuzzy_system_single 005B                   __size_of_trapezoidal 023E  
                            _TRISAbits 000F92                              _TRISCbits 000F94  
                      ?_Lcd_Write_Char 0001                      Lcd_Write_String@a 0005  
                    Lcd_Write_String@i 0009                            ___ftdiv@exp 0047  
                    ??_Lcd_Write_Float 0050  fuzzy_system_single@qualified_cons_mf1 0400  
fuzzy_system_single@qualified_cons_mf2 0478  fuzzy_system_single@qualified_cons_mf3 0500  
                  __size_of__div_to_l_ 0128                   temp_sense@adc_result 0058  
                          ___ftmul@exp 001E                              _Lcd_Clear 369E  
                       __end_of___ftge 2FEA                         trap_mf@t_value 0060  
                       __end_of___wmul 35D2                       _Lcd_Write_String 3164  
            ADC_select_channel@channel 0001                  ??_fuzzy_system_single 005E  
                       __end_of_fround 1E78                         __end_of_out_mf 1C32  
                  start_initialization 34CE                              _SetDCPWM1 33F2  
                    __size_of_PWM_init 0018                        SetDCPWM1@DCycle 0005  
                  __end_of__tdiv_to_l_ 262C                            trap_mf@temp 0070  
          fuzzy_system_single@ante_mf1 0100            fuzzy_system_single@ante_mf2 0178  
          fuzzy_system_single@ante_mf3 0200                              _DutyCycle 01F0  
          fuzzy_system_single@cons_mf1 0278            fuzzy_system_single@cons_mf2 0300  
                    __size_of_Lcd_Init 0074                           ??_OpenTimer2 0001  
          fuzzy_system_single@cons_mf3 0378                      __size_of_Lcd_Port 002C  
                    __size_of_Leer_ADC 0032                           linspace@size 0051  
                      ___llmod@divisor 0012                      __size_of_Init_ADC 002A  
                      ___llmod@counter 0016                      __size_of_OpenPWM1 0012  
                           ?_Lcd_Clear 0001                               ??___ftge 001B  
                             ??___wmul 0013                            ?_temp_sense 0050  
                          __pdataBANK1 01F2                       __CFG_LPT1OSC$OFF 000000  
                      Lcd_Write_Char@a 0004                        Lcd_Write_Char@y 0003  
                             ??_fround 0027                               ??_out_mf 0026  
                        sprintf@tmpval 0069                     __end_of_OpenTimer2 3674  
                           fround@prec 002D                      __size_of___awtoft 0038  
                    __size_of___ftpack 00AE                      __size_of___lbtoft 0024  
                    __size_of___lltoft 005C                          __pcstackBANK0 0060  
                        __pcstackBANK1 0100                          __pcstackBANK2 0200  
                        __pcstackBANK3 0300                          __pcstackBANK4 0400  
                        __pcstackBANK5 0500                          __pcstackBANK6 0600  
                __end_of_PWM_DutyCycle 3362                             ?_SetDCPWM1 0001  
                         _isdigit$1148 0002                               ?_Lcd_Cmd 0001  
                          sprintf@flag 0065                            sprintf@fval 0073  
                          sprintf@prec 0071                      __size_of_mcu_init 002A  
                    __size_of_linspace 0100                       ??_Lcd_Set_Cursor 0005  
                             ?___awdiv 0007                               ?___ftadd 002E  
                             ?___awmod 0001                               ?___ftdiv 003A  
                             ?___ftneg 0001                               ?___lldiv 0001  
                             ?___ftmul 0015                               ?___llmod 000E  
                             ?___ftsub 003A                              __npowers_ 0829  
                             ?___fttol 002B                               ?_defuzzy 0049  
                          __tdiv_to_l_ 24FA                           ??__div_to_l_ 0007  
                          __smallconst 0800                               ?_isdigit 0001  
                             ?_trap_mf 0060                               ?_sprintf 0040  
                       __size_of_scale 03F0                    __size_of_temp_sense 012A  
                       ___wmul@product 0013                               _PIE1bits 000F9D  
                   _ADC_select_channel 2D32                               Lcd_Cmd@a 0003  
                             _PIR1bits 000F9E                     __end_of__div_to_l_ 287E  
                          ??_Lcd_Clear 0004                       __CFG_WDTPS$32768 000000  
                            defuzzy@mf 004B                              _qualified 2B66  
                  ?_ADC_select_channel 0001                             _ADCON0bits 000FC2  
                           _ADCON1bits 000FC1                             _ADCON2bits 000FC0  
                    ___wmul@multiplier 000F                               _PWM_init 3674  
                           qualified@i 0028                             qualified@w 0022  
                           qualified@x 0020                             qualified@y 001E  
                     ??_Lcd_Write_Char 0002                            ??_SetDCPWM1 0003  
                      _Lcd_Write_Float 34FE                               _Lcd_Init 30F0  
                             _Lcd_Port 352C                               _Leer_ADC 349C  
                 ??_ADC_select_channel 0001                               _Init_ADC 3582  
             __end_of_Lcd_Write_String 31D6                     SetDCPWM1@dutycycle 0001  
                     __size_of_Lcd_Cmd 0020                           _Timer2Config 00FE  
                             _OpenPWM1 368C                               __Hrparam 0000  
                fuzzy_system_single@w1 00EA                  fuzzy_system_single@w2 00ED  
                fuzzy_system_single@w3 00F0                               __Lrparam 0000  
                           ?_qualified 001E                       __size_of___awdiv 0084  
                     __size_of___ftadd 01AC                       __size_of___awmod 0070  
                     __size_of___ftdiv 00E6                       __size_of___ftneg 0024  
                     __size_of___lldiv 0082                       __size_of___ftmul 00F4  
                     __size_of___llmod 0066                       __size_of___ftsub 0040  
                     __size_of___fttol 00F4                               ___awtoft 3464  
                             ___ftpack 2E14                               ___lbtoft 35F6  
                        ??_trapezoidal 0058                            _fround$1523 002A  
                          _fround$1524 0027                               ___lltoft 32AC  
                __CFG_FOSC$INTOSCIO_EC 000000                              linspace@i 0055  
                     __size_of_defuzzy 0162                              linspace@x 0049  
                           sprintf@exp 0067                             sprintf@val 006D  
                       OpenPWM1@period 0001                       __size_of_isdigit 001E  
                             __ptext10 24FA                               __ptext11 2756  
                             __ptext20 3558                               __ptext12 32AC  
                             __ptext21 1198                               __ptext13 3246  
                             __ptext30 2262                               __ptext22 23C4  
                             __ptext14 306E                               __ptext31 35AC  
                             __ptext23 1E78                               __ptext15 33B2  
                             __ptext40 2A72                               __ptext32 2C4C  
                             __ptext24 35D2                               __ptext16 3164  
                             __ptext41 2E14                               __ptext33 20B6  
                             __ptext25 2B66                               __ptext17 342C  
                             __ptext42 33F2                               __ptext34 3674  
                             __ptext26 19CE                               __ptext18 3362  
                             __ptext43 30F0                               __ptext35 3658  
                             __ptext27 2F5A                               __ptext19 2D32  
                             __ptext44 369E                               __ptext36 368C  
                             __ptext28 287E                               __ptext45 361A  
                             __ptext37 3308                               __ptext29 3464  
                             __ptext46 352C                               __ptext38 35F6  
                             __ptext47 3582                               __ptext39 297E  
                             __powers_ 0850                       __size_of_trap_mf 0136  
                     __size_of_sprintf 08FE                               _mcu_init 3558  
                        __size_of_main 0098                               _linspace 287E  
                        temp_sense@vin 0055                               defuzzy@i 0056  
                             defuzzy@x 0049            __end_of_fuzzy_system_single 15DE  
                         ??_temp_sense 0053                               main@duty 00F9  
              __end_of_Lcd_Write_Float 352C                  __CFG_CPUDIV$OSC1_PLL2 000000  
                      main@temperatura 00F6                       Leer_ADC@dato_adc 0003  
                  __end_of_trapezoidal 20B6                               isdigit@c 0003  
                             scale@scl 002A                        PWM_DutyCycle@DC 003D  
                   Lcd_Write_Char@temp 0002            PWM_DutyCycle@percentageDuty 003C  
                            sprintf@ap 0063                       __tdiv_to_l_@exp1 000F  
                            sprintf@sp 0040                       __tdiv_to_l_@cntr 000E  
                     __tdiv_to_l_@quot 000A                     __end_of_temp_sense 2756  
                     ___lldiv@dividend 0001                            ??_qualified 0025  
                             trap_mf@a 0064                               trap_mf@b 0067  
                             trap_mf@c 006A                               trap_mf@d 006D  
                             trap_mf@i 00E8                               trap_mf@x 0062  
                   Lcd_Set_Cursor@temp 0008                            defuzzy@sum1 0050  
                         ?__tdiv_to_l_ 0001                            defuzzy@sum2 0053  
                             sprintf@c 0076                               sprintf@f 0042  
                     ___lldiv@quotient 0009      fuzzy_system_single@overall_out_mf 0578  
