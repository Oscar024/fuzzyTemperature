
# 1 "fuzzy.c"

# 38 "fuzzy.h"
void linspace(double x[], double start, double end, int size) ;
double minimo(double x[]) ;
double maximo(double x[]);
double triangular(double a, double b, double c, double x);
void tri_mf(double t_value[],double x[],double a, double b, double c);
double trapezoidal(double a, double b, double c, double d, double x);
void trap_mf(double t_value[],double x[],double a, double b, double c, double d);
void qualified(double y[],double x[],double w);
void out_mf(double result[],double x[],double y[],double z[]);
double defuzzy(double x[],double mf[]);
void fuzzy_system(void);
double fuzzy_system_single(double input);

# 12 "fuzzy.c"
void linspace(double x[], double start, double end, int size)
{
int i;
for (i=0; i<size; i++)
x[i] = ( i*end + (size-1-i)*start ) / (size-1);
return;
}



double minimo(double x[])
{
int i;
double min;

min = x[0];
for (i = 1; i < 40; i++)
if (x[i] < min)
min = x[i];
return (min);
}

double maximo(double x[])
{
int i;
double max;
max = x[0];
for (i = 1; i < 40; i++)
if (x[i] > max)
max = x[i];
return (max);
}


double triangular(double a, double b, double c, double x)
{
double ux=0;
if(x<=a){
ux=0;
}
if(x>a && x<b){
ux=(x-a)/(b-a);
}
if(x==b){
ux=1;
}
if(x>b && x<c){
ux = (c-x)/(c-b);
}
return ux;
}

void tri_mf(double t_value[],double x[],double a, double b, double c)
{
int i;
double temp[40];
for(i=0; i<40; i++)
temp[i]= x[i];
for(i=0; i<40; i++)
t_value[i]= triangular(a,b,c,x[i]);

}
double trapezoidal(double a, double b, double c, double d, double x)
{
double ux=0;
if(x<=a){
ux=0;
}
if(x>a && x<b){
ux=(x-a)/(b-a);
}
if(x>=b && x<=c){
ux=1;
}
if(x>c && x<d){
ux = (d-x)/(d-c);
}
if(x>d){
ux=0;
}
return ux;
}



void trap_mf(double t_value[],double x[],double a, double b, double c, double d)
{
int i;
double temp[40];
for(i=0; i<40; i++)
temp[i]= x[i];
for(i=0; i<40; i++)
t_value[i]= trapezoidal(a,b,c,d,x[i]);

}

void qualified(double y[],double x[], double w)
{
double min;
int i;
min=w;
for(i=0;i<40;i++){
if (x[i] < w)
y[i] = x[i];
else
y[i] = w;
}

return;
}

void out_mf(double result[],double x[],double y[],double z[])
{
int i;
for(i=0; i<40;i++){
if(x[i] > y[i] && x[i] > z[i])
{

result[i]=x[i];
}
else
{
if( y[i] > x[i] && y[i] > z[i]){

result[i]=y[i];
}
else
{

result[i]=z[i];
}
}
}
}

double defuzzy(double x[],double mf[])
{
double sum1=0, sum2=0,out=0;
int i;
for(i=0;i<40; i++)
sum1+=x[i]*mf[i];
for(i=0;i<40; i++)
sum2+=mf[i];
out=sum1/sum2;
return out;
}

void fuzzy_system(void)
{
double ante_mf1[40],cons_mf1[40];
double ante_mf2[40],cons_mf2[40];
double ante_mf3[40],cons_mf3[40];
double x[40],y[40];
double qualified_cons_mf1[40],qualified_cons_mf2[40],qualified_cons_mf3[40];
double overall_out_mf[40];
double w1,w2,w3;
double output[40];
int i;
linspace(x,-10,10,40);
linspace(y,0,10,40);


trap_mf(ante_mf1,x,-20,-15,-6,-3);
trap_mf(ante_mf2,x,-6,-3,3,6);
trap_mf(ante_mf3,x,3,6,15,20);


trap_mf(cons_mf1,y,-2.46,-1.46,1.46,2.46);
trap_mf(cons_mf2,y,1.46,2.46,5,7);
trap_mf(cons_mf3,y,5,7,13,15);


for(i=0;i<40;i++){
w1=trapezoidal(-20,-15,-6,-3,x[i]);
w2=trapezoidal(-6,-3,3,6,x[i]);
w3=trapezoidal(3,6,15,20,x[i]);
qualified(qualified_cons_mf1,cons_mf1,w1);
qualified(qualified_cons_mf2,cons_mf2,w2);
qualified(qualified_cons_mf3,cons_mf3,w3);
out_mf(overall_out_mf,qualified_cons_mf1,qualified_cons_mf2,qualified_cons_mf3);
output[i]= defuzzy(y,overall_out_mf);
}
}

double fuzzy_system_single(double input)
{
double ante_mf1[40],cons_mf1[40];
double ante_mf2[40],cons_mf2[40];
double ante_mf3[40],cons_mf3[40];
double x[40],y[40];
double qualified_cons_mf1[40],qualified_cons_mf2[40],qualified_cons_mf3[40];
double overall_out_mf[40];
double w1,w2,w3;
double output;
int i;
linspace(x,0,100,40);
linspace(y,0,100,40);


trap_mf(ante_mf1,x,-36,-4,14.68,36);
trap_mf(ante_mf2,x,15.6,33.47,60.7,87.6);
trap_mf(ante_mf3,x,64,79.76,104,136);


trap_mf(cons_mf1,y,-36,-4,17.59,36);
trap_mf(cons_mf2,y,14,46,54,86);
trap_mf(cons_mf3,y,64,85.32,104,136);



w1=trapezoidal(-36,-4,14.68,36,input);
w2=trapezoidal(15.6,33.47,60.7,87.6,input);
w3=trapezoidal(64,79.76,104,136,input);
qualified(qualified_cons_mf1,cons_mf1,w1);
qualified(qualified_cons_mf2,cons_mf2,w2);
qualified(qualified_cons_mf3,cons_mf3,w3);
out_mf(overall_out_mf,qualified_cons_mf1,qualified_cons_mf2,qualified_cons_mf3);
output= defuzzy(y,overall_out_mf);
return output;

}

